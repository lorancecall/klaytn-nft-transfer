{"ast":null,"code":"require(\"core-js/modules/es.typed-array.at.js\");\n\nrequire(\"core-js/modules/es.typed-array.set.js\");\n\nrequire(\"core-js/modules/es.error.cause.js\");\n\n// Blake2B in pure Javascript\n// Adapted from the reference implementation in RFC7693\n// Ported to Javascript by DC - https://github.com/dcposch\nconst util = require('./util'); // 64-bit unsigned addition\n// Sets v[a,a+1] += v[b,b+1]\n// v should be a Uint32Array\n\n\nfunction ADD64AA(v, a, b) {\n  const o0 = v[a] + v[b];\n  let o1 = v[a + 1] + v[b + 1];\n\n  if (o0 >= 0x100000000) {\n    o1++;\n  }\n\n  v[a] = o0;\n  v[a + 1] = o1;\n} // 64-bit unsigned addition\n// Sets v[a,a+1] += b\n// b0 is the low 32 bits of b, b1 represents the high 32 bits\n\n\nfunction ADD64AC(v, a, b0, b1) {\n  let o0 = v[a] + b0;\n\n  if (b0 < 0) {\n    o0 += 0x100000000;\n  }\n\n  let o1 = v[a + 1] + b1;\n\n  if (o0 >= 0x100000000) {\n    o1++;\n  }\n\n  v[a] = o0;\n  v[a + 1] = o1;\n} // Little-endian byte access\n\n\nfunction B2B_GET32(arr, i) {\n  return arr[i] ^ arr[i + 1] << 8 ^ arr[i + 2] << 16 ^ arr[i + 3] << 24;\n} // G Mixing function\n// The ROTRs are inlined for speed\n\n\nfunction B2B_G(a, b, c, d, ix, iy) {\n  const x0 = m[ix];\n  const x1 = m[ix + 1];\n  const y0 = m[iy];\n  const y1 = m[iy + 1];\n  ADD64AA(v, a, b); // v[a,a+1] += v[b,b+1] ... in JS we must store a uint64 as two uint32s\n\n  ADD64AC(v, a, x0, x1); // v[a, a+1] += x ... x0 is the low 32 bits of x, x1 is the high 32 bits\n  // v[d,d+1] = (v[d,d+1] xor v[a,a+1]) rotated to the right by 32 bits\n\n  let xor0 = v[d] ^ v[a];\n  let xor1 = v[d + 1] ^ v[a + 1];\n  v[d] = xor1;\n  v[d + 1] = xor0;\n  ADD64AA(v, c, d); // v[b,b+1] = (v[b,b+1] xor v[c,c+1]) rotated right by 24 bits\n\n  xor0 = v[b] ^ v[c];\n  xor1 = v[b + 1] ^ v[c + 1];\n  v[b] = xor0 >>> 24 ^ xor1 << 8;\n  v[b + 1] = xor1 >>> 24 ^ xor0 << 8;\n  ADD64AA(v, a, b);\n  ADD64AC(v, a, y0, y1); // v[d,d+1] = (v[d,d+1] xor v[a,a+1]) rotated right by 16 bits\n\n  xor0 = v[d] ^ v[a];\n  xor1 = v[d + 1] ^ v[a + 1];\n  v[d] = xor0 >>> 16 ^ xor1 << 16;\n  v[d + 1] = xor1 >>> 16 ^ xor0 << 16;\n  ADD64AA(v, c, d); // v[b,b+1] = (v[b,b+1] xor v[c,c+1]) rotated right by 63 bits\n\n  xor0 = v[b] ^ v[c];\n  xor1 = v[b + 1] ^ v[c + 1];\n  v[b] = xor1 >>> 31 ^ xor0 << 1;\n  v[b + 1] = xor0 >>> 31 ^ xor1 << 1;\n} // Initialization Vector\n\n\nconst BLAKE2B_IV32 = new Uint32Array([0xf3bcc908, 0x6a09e667, 0x84caa73b, 0xbb67ae85, 0xfe94f82b, 0x3c6ef372, 0x5f1d36f1, 0xa54ff53a, 0xade682d1, 0x510e527f, 0x2b3e6c1f, 0x9b05688c, 0xfb41bd6b, 0x1f83d9ab, 0x137e2179, 0x5be0cd19]);\nconst SIGMA8 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3, 11, 8, 12, 0, 5, 2, 15, 13, 10, 14, 3, 6, 7, 1, 9, 4, 7, 9, 3, 1, 13, 12, 11, 14, 2, 6, 5, 10, 4, 0, 15, 8, 9, 0, 5, 7, 2, 4, 10, 15, 14, 1, 11, 12, 6, 8, 3, 13, 2, 12, 6, 10, 0, 11, 8, 3, 4, 13, 7, 5, 15, 14, 1, 9, 12, 5, 1, 15, 14, 13, 4, 10, 0, 7, 6, 3, 9, 2, 8, 11, 13, 11, 7, 14, 12, 1, 3, 9, 5, 0, 15, 4, 8, 6, 2, 10, 6, 15, 14, 9, 11, 3, 0, 8, 12, 2, 13, 7, 1, 4, 10, 5, 10, 2, 8, 4, 7, 6, 1, 5, 15, 11, 9, 14, 3, 12, 13, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 14, 10, 4, 8, 9, 15, 13, 6, 1, 12, 0, 2, 11, 7, 5, 3]; // These are offsets into a uint64 buffer.\n// Multiply them all by 2 to make them offsets into a uint32 buffer,\n// because this is Javascript and we don't have uint64s\n\nconst SIGMA82 = new Uint8Array(SIGMA8.map(function (x) {\n  return x * 2;\n})); // Compression function. 'last' flag indicates last block.\n// Note we're representing 16 uint64s as 32 uint32s\n\nconst v = new Uint32Array(32);\nconst m = new Uint32Array(32);\n\nfunction blake2bCompress(ctx, last) {\n  let i = 0; // init work variables\n\n  for (i = 0; i < 16; i++) {\n    v[i] = ctx.h[i];\n    v[i + 16] = BLAKE2B_IV32[i];\n  } // low 64 bits of offset\n\n\n  v[24] = v[24] ^ ctx.t;\n  v[25] = v[25] ^ ctx.t / 0x100000000; // high 64 bits not supported, offset may not be higher than 2**53-1\n  // last block flag set ?\n\n  if (last) {\n    v[28] = ~v[28];\n    v[29] = ~v[29];\n  } // get little-endian words\n\n\n  for (i = 0; i < 32; i++) {\n    m[i] = B2B_GET32(ctx.b, 4 * i);\n  } // twelve rounds of mixing\n  // uncomment the DebugPrint calls to log the computation\n  // and match the RFC sample documentation\n  // util.debugPrint('          m[16]', m, 64)\n\n\n  for (i = 0; i < 12; i++) {\n    // util.debugPrint('   (i=' + (i < 10 ? ' ' : '') + i + ') v[16]', v, 64)\n    B2B_G(0, 8, 16, 24, SIGMA82[i * 16 + 0], SIGMA82[i * 16 + 1]);\n    B2B_G(2, 10, 18, 26, SIGMA82[i * 16 + 2], SIGMA82[i * 16 + 3]);\n    B2B_G(4, 12, 20, 28, SIGMA82[i * 16 + 4], SIGMA82[i * 16 + 5]);\n    B2B_G(6, 14, 22, 30, SIGMA82[i * 16 + 6], SIGMA82[i * 16 + 7]);\n    B2B_G(0, 10, 20, 30, SIGMA82[i * 16 + 8], SIGMA82[i * 16 + 9]);\n    B2B_G(2, 12, 22, 24, SIGMA82[i * 16 + 10], SIGMA82[i * 16 + 11]);\n    B2B_G(4, 14, 16, 26, SIGMA82[i * 16 + 12], SIGMA82[i * 16 + 13]);\n    B2B_G(6, 8, 18, 28, SIGMA82[i * 16 + 14], SIGMA82[i * 16 + 15]);\n  } // util.debugPrint('   (i=12) v[16]', v, 64)\n\n\n  for (i = 0; i < 16; i++) {\n    ctx.h[i] = ctx.h[i] ^ v[i] ^ v[i + 16];\n  } // util.debugPrint('h[8]', ctx.h, 64)\n\n} // reusable parameterBlock\n\n\nconst parameterBlock = new Uint8Array([0, 0, 0, 0, //  0: outlen, keylen, fanout, depth\n0, 0, 0, 0, //  4: leaf length, sequential mode\n0, 0, 0, 0, //  8: node offset\n0, 0, 0, 0, // 12: node offset\n0, 0, 0, 0, // 16: node depth, inner length, rfu\n0, 0, 0, 0, // 20: rfu\n0, 0, 0, 0, // 24: rfu\n0, 0, 0, 0, // 28: rfu\n0, 0, 0, 0, // 32: salt\n0, 0, 0, 0, // 36: salt\n0, 0, 0, 0, // 40: salt\n0, 0, 0, 0, // 44: salt\n0, 0, 0, 0, // 48: personal\n0, 0, 0, 0, // 52: personal\n0, 0, 0, 0, // 56: personal\n0, 0, 0, 0 // 60: personal\n]); // Creates a BLAKE2b hashing context\n// Requires an output length between 1 and 64 bytes\n// Takes an optional Uint8Array key\n// Takes an optinal Uint8Array salt\n// Takes an optinal Uint8Array personal\n\nfunction blake2bInit(outlen, key, salt, personal) {\n  if (outlen === 0 || outlen > 64) {\n    throw new Error('Illegal output length, expected 0 < length <= 64');\n  }\n\n  if (key && key.length > 64) {\n    throw new Error('Illegal key, expected Uint8Array with 0 < length <= 64');\n  }\n\n  if (salt && salt.length !== 16) {\n    throw new Error('Illegal salt, expected Uint8Array with length is 16');\n  }\n\n  if (personal && personal.length !== 16) {\n    throw new Error('Illegal personal, expected Uint8Array with length is 16');\n  } // state, 'param block'\n\n\n  const ctx = {\n    b: new Uint8Array(128),\n    h: new Uint32Array(16),\n    t: 0,\n    // input count\n    c: 0,\n    // pointer within buffer\n    outlen: outlen // output length in bytes\n\n  }; // initialize parameterBlock before usage\n\n  parameterBlock.fill(0);\n  parameterBlock[0] = outlen;\n  if (key) parameterBlock[1] = key.length;\n  parameterBlock[2] = 1; // fanout\n\n  parameterBlock[3] = 1; // depth\n\n  if (salt) parameterBlock.set(salt, 32);\n  if (personal) parameterBlock.set(personal, 48); // initialize hash state\n\n  for (let i = 0; i < 16; i++) {\n    ctx.h[i] = BLAKE2B_IV32[i] ^ B2B_GET32(parameterBlock, i * 4);\n  } // key the hash, if applicable\n\n\n  if (key) {\n    blake2bUpdate(ctx, key); // at the end\n\n    ctx.c = 128;\n  }\n\n  return ctx;\n} // Updates a BLAKE2b streaming hash\n// Requires hash context and Uint8Array (byte array)\n\n\nfunction blake2bUpdate(ctx, input) {\n  for (let i = 0; i < input.length; i++) {\n    if (ctx.c === 128) {\n      // buffer full ?\n      ctx.t += ctx.c; // add counters\n\n      blake2bCompress(ctx, false); // compress (not last)\n\n      ctx.c = 0; // counter to zero\n    }\n\n    ctx.b[ctx.c++] = input[i];\n  }\n} // Completes a BLAKE2b streaming hash\n// Returns a Uint8Array containing the message digest\n\n\nfunction blake2bFinal(ctx) {\n  ctx.t += ctx.c; // mark last block offset\n\n  while (ctx.c < 128) {\n    // fill up with zeros\n    ctx.b[ctx.c++] = 0;\n  }\n\n  blake2bCompress(ctx, true); // final block flag = 1\n  // little endian convert and store\n\n  const out = new Uint8Array(ctx.outlen);\n\n  for (let i = 0; i < ctx.outlen; i++) {\n    out[i] = ctx.h[i >> 2] >> 8 * (i & 3);\n  }\n\n  return out;\n} // Computes the BLAKE2B hash of a string or byte array, and returns a Uint8Array\n//\n// Returns a n-byte Uint8Array\n//\n// Parameters:\n// - input - the input bytes, as a string, Buffer or Uint8Array\n// - key - optional key Uint8Array, up to 64 bytes\n// - outlen - optional output length in bytes, default 64\n// - salt - optional salt bytes, string, Buffer or Uint8Array\n// - personal - optional personal bytes, string, Buffer or Uint8Array\n\n\nfunction blake2b(input, key, outlen, salt, personal) {\n  // preprocess inputs\n  outlen = outlen || 64;\n  input = util.normalizeInput(input);\n\n  if (salt) {\n    salt = util.normalizeInput(salt);\n  }\n\n  if (personal) {\n    personal = util.normalizeInput(personal);\n  } // do the math\n\n\n  const ctx = blake2bInit(outlen, key, salt, personal);\n  blake2bUpdate(ctx, input);\n  return blake2bFinal(ctx);\n} // Computes the BLAKE2B hash of a string or byte array\n//\n// Returns an n-byte hash in hex, all lowercase\n//\n// Parameters:\n// - input - the input bytes, as a string, Buffer, or Uint8Array\n// - key - optional key Uint8Array, up to 64 bytes\n// - outlen - optional output length in bytes, default 64\n// - salt - optional salt bytes, string, Buffer or Uint8Array\n// - personal - optional personal bytes, string, Buffer or Uint8Array\n\n\nfunction blake2bHex(input, key, outlen, salt, personal) {\n  const output = blake2b(input, key, outlen, salt, personal);\n  return util.toHex(output);\n}\n\nmodule.exports = {\n  blake2b: blake2b,\n  blake2bHex: blake2bHex,\n  blake2bInit: blake2bInit,\n  blake2bUpdate: blake2bUpdate,\n  blake2bFinal: blake2bFinal\n};","map":{"version":3,"sources":["/home/lorancecall/Projects/vuejs-tutorial/testpage/node_modules/blakejs/blake2b.js"],"names":["util","require","ADD64AA","v","a","b","o0","o1","ADD64AC","b0","b1","B2B_GET32","arr","i","B2B_G","c","d","ix","iy","x0","m","x1","y0","y1","xor0","xor1","BLAKE2B_IV32","Uint32Array","SIGMA8","SIGMA82","Uint8Array","map","x","blake2bCompress","ctx","last","h","t","parameterBlock","blake2bInit","outlen","key","salt","personal","Error","length","fill","set","blake2bUpdate","input","blake2bFinal","out","blake2b","normalizeInput","blake2bHex","output","toHex","module","exports"],"mappings":"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","sourcesContent":["// Blake2B in pure Javascript\n// Adapted from the reference implementation in RFC7693\n// Ported to Javascript by DC - https://github.com/dcposch\n\nconst util = require('./util')\n\n// 64-bit unsigned addition\n// Sets v[a,a+1] += v[b,b+1]\n// v should be a Uint32Array\nfunction ADD64AA (v, a, b) {\n  const o0 = v[a] + v[b]\n  let o1 = v[a + 1] + v[b + 1]\n  if (o0 >= 0x100000000) {\n    o1++\n  }\n  v[a] = o0\n  v[a + 1] = o1\n}\n\n// 64-bit unsigned addition\n// Sets v[a,a+1] += b\n// b0 is the low 32 bits of b, b1 represents the high 32 bits\nfunction ADD64AC (v, a, b0, b1) {\n  let o0 = v[a] + b0\n  if (b0 < 0) {\n    o0 += 0x100000000\n  }\n  let o1 = v[a + 1] + b1\n  if (o0 >= 0x100000000) {\n    o1++\n  }\n  v[a] = o0\n  v[a + 1] = o1\n}\n\n// Little-endian byte access\nfunction B2B_GET32 (arr, i) {\n  return arr[i] ^ (arr[i + 1] << 8) ^ (arr[i + 2] << 16) ^ (arr[i + 3] << 24)\n}\n\n// G Mixing function\n// The ROTRs are inlined for speed\nfunction B2B_G (a, b, c, d, ix, iy) {\n  const x0 = m[ix]\n  const x1 = m[ix + 1]\n  const y0 = m[iy]\n  const y1 = m[iy + 1]\n\n  ADD64AA(v, a, b) // v[a,a+1] += v[b,b+1] ... in JS we must store a uint64 as two uint32s\n  ADD64AC(v, a, x0, x1) // v[a, a+1] += x ... x0 is the low 32 bits of x, x1 is the high 32 bits\n\n  // v[d,d+1] = (v[d,d+1] xor v[a,a+1]) rotated to the right by 32 bits\n  let xor0 = v[d] ^ v[a]\n  let xor1 = v[d + 1] ^ v[a + 1]\n  v[d] = xor1\n  v[d + 1] = xor0\n\n  ADD64AA(v, c, d)\n\n  // v[b,b+1] = (v[b,b+1] xor v[c,c+1]) rotated right by 24 bits\n  xor0 = v[b] ^ v[c]\n  xor1 = v[b + 1] ^ v[c + 1]\n  v[b] = (xor0 >>> 24) ^ (xor1 << 8)\n  v[b + 1] = (xor1 >>> 24) ^ (xor0 << 8)\n\n  ADD64AA(v, a, b)\n  ADD64AC(v, a, y0, y1)\n\n  // v[d,d+1] = (v[d,d+1] xor v[a,a+1]) rotated right by 16 bits\n  xor0 = v[d] ^ v[a]\n  xor1 = v[d + 1] ^ v[a + 1]\n  v[d] = (xor0 >>> 16) ^ (xor1 << 16)\n  v[d + 1] = (xor1 >>> 16) ^ (xor0 << 16)\n\n  ADD64AA(v, c, d)\n\n  // v[b,b+1] = (v[b,b+1] xor v[c,c+1]) rotated right by 63 bits\n  xor0 = v[b] ^ v[c]\n  xor1 = v[b + 1] ^ v[c + 1]\n  v[b] = (xor1 >>> 31) ^ (xor0 << 1)\n  v[b + 1] = (xor0 >>> 31) ^ (xor1 << 1)\n}\n\n// Initialization Vector\nconst BLAKE2B_IV32 = new Uint32Array([\n  0xf3bcc908, 0x6a09e667, 0x84caa73b, 0xbb67ae85, 0xfe94f82b, 0x3c6ef372,\n  0x5f1d36f1, 0xa54ff53a, 0xade682d1, 0x510e527f, 0x2b3e6c1f, 0x9b05688c,\n  0xfb41bd6b, 0x1f83d9ab, 0x137e2179, 0x5be0cd19\n])\n\nconst SIGMA8 = [\n  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 14, 10, 4, 8, 9, 15, 13,\n  6, 1, 12, 0, 2, 11, 7, 5, 3, 11, 8, 12, 0, 5, 2, 15, 13, 10, 14, 3, 6, 7, 1,\n  9, 4, 7, 9, 3, 1, 13, 12, 11, 14, 2, 6, 5, 10, 4, 0, 15, 8, 9, 0, 5, 7, 2, 4,\n  10, 15, 14, 1, 11, 12, 6, 8, 3, 13, 2, 12, 6, 10, 0, 11, 8, 3, 4, 13, 7, 5,\n  15, 14, 1, 9, 12, 5, 1, 15, 14, 13, 4, 10, 0, 7, 6, 3, 9, 2, 8, 11, 13, 11, 7,\n  14, 12, 1, 3, 9, 5, 0, 15, 4, 8, 6, 2, 10, 6, 15, 14, 9, 11, 3, 0, 8, 12, 2,\n  13, 7, 1, 4, 10, 5, 10, 2, 8, 4, 7, 6, 1, 5, 15, 11, 9, 14, 3, 12, 13, 0, 0,\n  1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 14, 10, 4, 8, 9, 15, 13, 6,\n  1, 12, 0, 2, 11, 7, 5, 3\n]\n\n// These are offsets into a uint64 buffer.\n// Multiply them all by 2 to make them offsets into a uint32 buffer,\n// because this is Javascript and we don't have uint64s\nconst SIGMA82 = new Uint8Array(\n  SIGMA8.map(function (x) {\n    return x * 2\n  })\n)\n\n// Compression function. 'last' flag indicates last block.\n// Note we're representing 16 uint64s as 32 uint32s\nconst v = new Uint32Array(32)\nconst m = new Uint32Array(32)\nfunction blake2bCompress (ctx, last) {\n  let i = 0\n\n  // init work variables\n  for (i = 0; i < 16; i++) {\n    v[i] = ctx.h[i]\n    v[i + 16] = BLAKE2B_IV32[i]\n  }\n\n  // low 64 bits of offset\n  v[24] = v[24] ^ ctx.t\n  v[25] = v[25] ^ (ctx.t / 0x100000000)\n  // high 64 bits not supported, offset may not be higher than 2**53-1\n\n  // last block flag set ?\n  if (last) {\n    v[28] = ~v[28]\n    v[29] = ~v[29]\n  }\n\n  // get little-endian words\n  for (i = 0; i < 32; i++) {\n    m[i] = B2B_GET32(ctx.b, 4 * i)\n  }\n\n  // twelve rounds of mixing\n  // uncomment the DebugPrint calls to log the computation\n  // and match the RFC sample documentation\n  // util.debugPrint('          m[16]', m, 64)\n  for (i = 0; i < 12; i++) {\n    // util.debugPrint('   (i=' + (i < 10 ? ' ' : '') + i + ') v[16]', v, 64)\n    B2B_G(0, 8, 16, 24, SIGMA82[i * 16 + 0], SIGMA82[i * 16 + 1])\n    B2B_G(2, 10, 18, 26, SIGMA82[i * 16 + 2], SIGMA82[i * 16 + 3])\n    B2B_G(4, 12, 20, 28, SIGMA82[i * 16 + 4], SIGMA82[i * 16 + 5])\n    B2B_G(6, 14, 22, 30, SIGMA82[i * 16 + 6], SIGMA82[i * 16 + 7])\n    B2B_G(0, 10, 20, 30, SIGMA82[i * 16 + 8], SIGMA82[i * 16 + 9])\n    B2B_G(2, 12, 22, 24, SIGMA82[i * 16 + 10], SIGMA82[i * 16 + 11])\n    B2B_G(4, 14, 16, 26, SIGMA82[i * 16 + 12], SIGMA82[i * 16 + 13])\n    B2B_G(6, 8, 18, 28, SIGMA82[i * 16 + 14], SIGMA82[i * 16 + 15])\n  }\n  // util.debugPrint('   (i=12) v[16]', v, 64)\n\n  for (i = 0; i < 16; i++) {\n    ctx.h[i] = ctx.h[i] ^ v[i] ^ v[i + 16]\n  }\n  // util.debugPrint('h[8]', ctx.h, 64)\n}\n\n// reusable parameterBlock\nconst parameterBlock = new Uint8Array([\n  0,\n  0,\n  0,\n  0, //  0: outlen, keylen, fanout, depth\n  0,\n  0,\n  0,\n  0, //  4: leaf length, sequential mode\n  0,\n  0,\n  0,\n  0, //  8: node offset\n  0,\n  0,\n  0,\n  0, // 12: node offset\n  0,\n  0,\n  0,\n  0, // 16: node depth, inner length, rfu\n  0,\n  0,\n  0,\n  0, // 20: rfu\n  0,\n  0,\n  0,\n  0, // 24: rfu\n  0,\n  0,\n  0,\n  0, // 28: rfu\n  0,\n  0,\n  0,\n  0, // 32: salt\n  0,\n  0,\n  0,\n  0, // 36: salt\n  0,\n  0,\n  0,\n  0, // 40: salt\n  0,\n  0,\n  0,\n  0, // 44: salt\n  0,\n  0,\n  0,\n  0, // 48: personal\n  0,\n  0,\n  0,\n  0, // 52: personal\n  0,\n  0,\n  0,\n  0, // 56: personal\n  0,\n  0,\n  0,\n  0 // 60: personal\n])\n\n// Creates a BLAKE2b hashing context\n// Requires an output length between 1 and 64 bytes\n// Takes an optional Uint8Array key\n// Takes an optinal Uint8Array salt\n// Takes an optinal Uint8Array personal\nfunction blake2bInit (outlen, key, salt, personal) {\n  if (outlen === 0 || outlen > 64) {\n    throw new Error('Illegal output length, expected 0 < length <= 64')\n  }\n  if (key && key.length > 64) {\n    throw new Error('Illegal key, expected Uint8Array with 0 < length <= 64')\n  }\n  if (salt && salt.length !== 16) {\n    throw new Error('Illegal salt, expected Uint8Array with length is 16')\n  }\n  if (personal && personal.length !== 16) {\n    throw new Error('Illegal personal, expected Uint8Array with length is 16')\n  }\n\n  // state, 'param block'\n  const ctx = {\n    b: new Uint8Array(128),\n    h: new Uint32Array(16),\n    t: 0, // input count\n    c: 0, // pointer within buffer\n    outlen: outlen // output length in bytes\n  }\n\n  // initialize parameterBlock before usage\n  parameterBlock.fill(0)\n  parameterBlock[0] = outlen\n  if (key) parameterBlock[1] = key.length\n  parameterBlock[2] = 1 // fanout\n  parameterBlock[3] = 1 // depth\n  if (salt) parameterBlock.set(salt, 32)\n  if (personal) parameterBlock.set(personal, 48)\n\n  // initialize hash state\n  for (let i = 0; i < 16; i++) {\n    ctx.h[i] = BLAKE2B_IV32[i] ^ B2B_GET32(parameterBlock, i * 4)\n  }\n\n  // key the hash, if applicable\n  if (key) {\n    blake2bUpdate(ctx, key)\n    // at the end\n    ctx.c = 128\n  }\n\n  return ctx\n}\n\n// Updates a BLAKE2b streaming hash\n// Requires hash context and Uint8Array (byte array)\nfunction blake2bUpdate (ctx, input) {\n  for (let i = 0; i < input.length; i++) {\n    if (ctx.c === 128) {\n      // buffer full ?\n      ctx.t += ctx.c // add counters\n      blake2bCompress(ctx, false) // compress (not last)\n      ctx.c = 0 // counter to zero\n    }\n    ctx.b[ctx.c++] = input[i]\n  }\n}\n\n// Completes a BLAKE2b streaming hash\n// Returns a Uint8Array containing the message digest\nfunction blake2bFinal (ctx) {\n  ctx.t += ctx.c // mark last block offset\n\n  while (ctx.c < 128) {\n    // fill up with zeros\n    ctx.b[ctx.c++] = 0\n  }\n  blake2bCompress(ctx, true) // final block flag = 1\n\n  // little endian convert and store\n  const out = new Uint8Array(ctx.outlen)\n  for (let i = 0; i < ctx.outlen; i++) {\n    out[i] = ctx.h[i >> 2] >> (8 * (i & 3))\n  }\n  return out\n}\n\n// Computes the BLAKE2B hash of a string or byte array, and returns a Uint8Array\n//\n// Returns a n-byte Uint8Array\n//\n// Parameters:\n// - input - the input bytes, as a string, Buffer or Uint8Array\n// - key - optional key Uint8Array, up to 64 bytes\n// - outlen - optional output length in bytes, default 64\n// - salt - optional salt bytes, string, Buffer or Uint8Array\n// - personal - optional personal bytes, string, Buffer or Uint8Array\nfunction blake2b (input, key, outlen, salt, personal) {\n  // preprocess inputs\n  outlen = outlen || 64\n  input = util.normalizeInput(input)\n  if (salt) {\n    salt = util.normalizeInput(salt)\n  }\n  if (personal) {\n    personal = util.normalizeInput(personal)\n  }\n\n  // do the math\n  const ctx = blake2bInit(outlen, key, salt, personal)\n  blake2bUpdate(ctx, input)\n  return blake2bFinal(ctx)\n}\n\n// Computes the BLAKE2B hash of a string or byte array\n//\n// Returns an n-byte hash in hex, all lowercase\n//\n// Parameters:\n// - input - the input bytes, as a string, Buffer, or Uint8Array\n// - key - optional key Uint8Array, up to 64 bytes\n// - outlen - optional output length in bytes, default 64\n// - salt - optional salt bytes, string, Buffer or Uint8Array\n// - personal - optional personal bytes, string, Buffer or Uint8Array\nfunction blake2bHex (input, key, outlen, salt, personal) {\n  const output = blake2b(input, key, outlen, salt, personal)\n  return util.toHex(output)\n}\n\nmodule.exports = {\n  blake2b: blake2b,\n  blake2bHex: blake2bHex,\n  blake2bInit: blake2bInit,\n  blake2bUpdate: blake2bUpdate,\n  blake2bFinal: blake2bFinal\n}\n"]},"metadata":{},"sourceType":"script"}