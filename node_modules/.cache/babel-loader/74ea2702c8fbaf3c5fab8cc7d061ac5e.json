{"ast":null,"code":"'use strict';\n\nconst CID = require('cids');\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n\nfunction toPin(type, cid, metadata) {\n  const pin = {\n    type,\n    cid: new CID(cid)\n  };\n\n  if (metadata) {\n    pin.metadata = metadata;\n  }\n\n  return pin;\n}\n\nmodule.exports = configure(api => {\n  return async function* ls(options = {}) {\n    if (options.paths) {\n      options.paths = Array.isArray(options.paths) ? options.paths : [options.paths];\n    }\n\n    const res = await api.post('pin/ls', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({ ...options,\n        arg: (options.paths || []).map(path => `${path}`),\n        stream: true\n      }),\n      headers: options.headers\n    });\n\n    for await (const pin of res.ndjson()) {\n      if (pin.Keys) {\n        // non-streaming response\n        for (const cid of Object.keys(pin.Keys)) {\n          yield toPin(pin.Keys[cid].Type, cid, pin.Keys[cid].Metadata);\n        }\n\n        return;\n      }\n\n      yield toPin(pin.Type, pin.Cid, pin.Metadata);\n    }\n  };\n});","map":{"version":3,"sources":["/home/lorancecall/Projects/vuejs-tutorial/testpage/node_modules/ipfs-http-client/src/pin/ls.js"],"names":["CID","require","configure","toUrlSearchParams","toPin","type","cid","metadata","pin","module","exports","api","ls","options","paths","Array","isArray","res","post","timeout","signal","searchParams","arg","map","path","stream","headers","ndjson","Keys","Object","keys","Type","Metadata","Cid"],"mappings":"AAAA;;AAEA,MAAMA,GAAG,GAAGC,OAAO,CAAC,MAAD,CAAnB;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAME,iBAAiB,GAAGF,OAAO,CAAC,6BAAD,CAAjC;;AAEA,SAASG,KAAT,CAAgBC,IAAhB,EAAsBC,GAAtB,EAA2BC,QAA3B,EAAqC;AACnC,QAAMC,GAAG,GAAG;AACVH,IAAAA,IADU;AAEVC,IAAAA,GAAG,EAAE,IAAIN,GAAJ,CAAQM,GAAR;AAFK,GAAZ;;AAKA,MAAIC,QAAJ,EAAc;AACZC,IAAAA,GAAG,CAACD,QAAJ,GAAeA,QAAf;AACD;;AAED,SAAOC,GAAP;AACD;;AAEDC,MAAM,CAACC,OAAP,GAAiBR,SAAS,CAACS,GAAG,IAAI;AAChC,SAAO,gBAAiBC,EAAjB,CAAqBC,OAAO,GAAG,EAA/B,EAAmC;AACxC,QAAIA,OAAO,CAACC,KAAZ,EAAmB;AACjBD,MAAAA,OAAO,CAACC,KAAR,GAAgBC,KAAK,CAACC,OAAN,CAAcH,OAAO,CAACC,KAAtB,IAA+BD,OAAO,CAACC,KAAvC,GAA+C,CAACD,OAAO,CAACC,KAAT,CAA/D;AACD;;AAED,UAAMG,GAAG,GAAG,MAAMN,GAAG,CAACO,IAAJ,CAAS,QAAT,EAAmB;AACnCC,MAAAA,OAAO,EAAEN,OAAO,CAACM,OADkB;AAEnCC,MAAAA,MAAM,EAAEP,OAAO,CAACO,MAFmB;AAGnCC,MAAAA,YAAY,EAAElB,iBAAiB,CAAC,EAC9B,GAAGU,OAD2B;AAE9BS,QAAAA,GAAG,EAAE,CAACT,OAAO,CAACC,KAAR,IAAiB,EAAlB,EAAsBS,GAAtB,CAA0BC,IAAI,IAAK,GAAEA,IAAK,EAA1C,CAFyB;AAG9BC,QAAAA,MAAM,EAAE;AAHsB,OAAD,CAHI;AAQnCC,MAAAA,OAAO,EAAEb,OAAO,CAACa;AARkB,KAAnB,CAAlB;;AAWA,eAAW,MAAMlB,GAAjB,IAAwBS,GAAG,CAACU,MAAJ,EAAxB,EAAsC;AACpC,UAAInB,GAAG,CAACoB,IAAR,EAAc;AAAE;AACd,aAAK,MAAMtB,GAAX,IAAkBuB,MAAM,CAACC,IAAP,CAAYtB,GAAG,CAACoB,IAAhB,CAAlB,EAAyC;AACvC,gBAAMxB,KAAK,CAACI,GAAG,CAACoB,IAAJ,CAAStB,GAAT,EAAcyB,IAAf,EAAqBzB,GAArB,EAA0BE,GAAG,CAACoB,IAAJ,CAAStB,GAAT,EAAc0B,QAAxC,CAAX;AACD;;AACD;AACD;;AAED,YAAM5B,KAAK,CAACI,GAAG,CAACuB,IAAL,EAAWvB,GAAG,CAACyB,GAAf,EAAoBzB,GAAG,CAACwB,QAAxB,CAAX;AACD;AACF,GA1BD;AA2BD,CA5ByB,CAA1B","sourcesContent":["'use strict'\n\nconst CID = require('cids')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\nfunction toPin (type, cid, metadata) {\n  const pin = {\n    type,\n    cid: new CID(cid)\n  }\n\n  if (metadata) {\n    pin.metadata = metadata\n  }\n\n  return pin\n}\n\nmodule.exports = configure(api => {\n  return async function * ls (options = {}) {\n    if (options.paths) {\n      options.paths = Array.isArray(options.paths) ? options.paths : [options.paths]\n    }\n\n    const res = await api.post('pin/ls', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        ...options,\n        arg: (options.paths || []).map(path => `${path}`),\n        stream: true\n      }),\n      headers: options.headers\n    })\n\n    for await (const pin of res.ndjson()) {\n      if (pin.Keys) { // non-streaming response\n        for (const cid of Object.keys(pin.Keys)) {\n          yield toPin(pin.Keys[cid].Type, cid, pin.Keys[cid].Metadata)\n        }\n        return\n      }\n\n      yield toPin(pin.Type, pin.Cid, pin.Metadata)\n    }\n  }\n})\n"]},"metadata":{},"sourceType":"script"}