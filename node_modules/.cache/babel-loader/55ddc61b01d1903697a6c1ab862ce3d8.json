{"ast":null,"code":"/*\n    Copyright 2022 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\nconst EthereumAccessList = require('../ethereumTypedTransaction/ethereumAccessList');\n/**\n * Represents a ethereum access list transaction wrapper.\n * @class\n * @hideconstructor\n */\n\n\nclass EthereumAccessListWrapper {\n  /**\n   * Creates a ethereum access list transaction wrapper.\n   * The wrapper plays an intermediate role for calling static functions of each transaction type in `caver.transaction`.\n   * @constructor\n   * @param {object} _klaytnCall - An object includes klay rpc calls.\n   */\n  constructor(klaytnCall) {\n    this.klaytnCall = klaytnCall;\n  }\n  /**\n   * Calls `EthereumAccessList.create`.\n   *\n   * @param {object} obj - An object defines fields to create a tx.\n   * @return {string} An RLP-encoded transaction string.\n   */\n\n\n  create(obj) {\n    return EthereumAccessList.create(obj, this.klaytnCall);\n  }\n  /**\n   * Calls `EthereumAccessListMemo.decode`.\n   *\n   * @param {string} encoded - RLP-encoded string.\n   * @return {string} EthereumAccessListMemo instance.\n   */\n\n\n  decode(encoded) {\n    return EthereumAccessList.decode(encoded, this.klaytnCall);\n  }\n\n}\n\nmodule.exports = EthereumAccessListWrapper;","map":{"version":3,"sources":["/home/lorancecall/Projects/vuejs-tutorial/testpage/node_modules/caver-js/packages/caver-transaction/src/transactionTypes/wrappers/ethereumAccessListWrapper.js"],"names":["EthereumAccessList","require","EthereumAccessListWrapper","constructor","klaytnCall","create","obj","decode","encoded","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,MAAMA,kBAAkB,GAAGC,OAAO,CAAC,gDAAD,CAAlC;AAEA;AACA;AACA;AACA;AACA;;;AACA,MAAMC,yBAAN,CAAgC;AAC5B;AACJ;AACA;AACA;AACA;AACA;AACIC,EAAAA,WAAW,CAACC,UAAD,EAAa;AACpB,SAAKA,UAAL,GAAkBA,UAAlB;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;;;AACIC,EAAAA,MAAM,CAACC,GAAD,EAAM;AACR,WAAON,kBAAkB,CAACK,MAAnB,CAA0BC,GAA1B,EAA+B,KAAKF,UAApC,CAAP;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;;;AACIG,EAAAA,MAAM,CAACC,OAAD,EAAU;AACZ,WAAOR,kBAAkB,CAACO,MAAnB,CAA0BC,OAA1B,EAAmC,KAAKJ,UAAxC,CAAP;AACH;;AA7B2B;;AAgChCK,MAAM,CAACC,OAAP,GAAiBR,yBAAjB","sourcesContent":["/*\n    Copyright 2022 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nconst EthereumAccessList = require('../ethereumTypedTransaction/ethereumAccessList')\n\n/**\n * Represents a ethereum access list transaction wrapper.\n * @class\n * @hideconstructor\n */\nclass EthereumAccessListWrapper {\n    /**\n     * Creates a ethereum access list transaction wrapper.\n     * The wrapper plays an intermediate role for calling static functions of each transaction type in `caver.transaction`.\n     * @constructor\n     * @param {object} _klaytnCall - An object includes klay rpc calls.\n     */\n    constructor(klaytnCall) {\n        this.klaytnCall = klaytnCall\n    }\n\n    /**\n     * Calls `EthereumAccessList.create`.\n     *\n     * @param {object} obj - An object defines fields to create a tx.\n     * @return {string} An RLP-encoded transaction string.\n     */\n    create(obj) {\n        return EthereumAccessList.create(obj, this.klaytnCall)\n    }\n\n    /**\n     * Calls `EthereumAccessListMemo.decode`.\n     *\n     * @param {string} encoded - RLP-encoded string.\n     * @return {string} EthereumAccessListMemo instance.\n     */\n    decode(encoded) {\n        return EthereumAccessList.decode(encoded, this.klaytnCall)\n    }\n}\n\nmodule.exports = EthereumAccessListWrapper\n"]},"metadata":{},"sourceType":"script"}