{"ast":null,"code":"'use strict';\n\nrequire(\"core-js/modules/es.typed-array.at.js\");\n\nrequire(\"core-js/modules/es.typed-array.set.js\");\n\nrequire(\"core-js/modules/es.error.cause.js\");\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n\nconst {\n  Value\n} = require('./response-types');\n\nconst uint8ArrayToString = require('uint8arrays/to-string');\n\nconst uint8ArrayFromString = require('uint8arrays/from-string');\n\nmodule.exports = configure(api => {\n  /**\n   * @type {import('..').ImplementsMethod<'get', import('ipfs-core/src/components/dht')>}\n   */\n  async function get(key, options = {}) {\n    const res = await api.post('dht/get', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: key instanceof Uint8Array ? uint8ArrayToString(key) : key,\n        ...options\n      }),\n      headers: options.headers\n    });\n\n    for await (const message of res.ndjson()) {\n      if (message.Type === Value) {\n        return uint8ArrayFromString(message.Extra, 'base64pad');\n      }\n    }\n\n    throw new Error('not found');\n  }\n\n  return get;\n});","map":{"version":3,"sources":["/home/lorancecall/Projects/vuejs-tutorial/testpage/node_modules/ipfs-http-client/src/dht/get.js"],"names":["configure","require","toUrlSearchParams","Value","uint8ArrayToString","uint8ArrayFromString","module","exports","api","get","key","options","res","post","timeout","signal","searchParams","arg","Uint8Array","headers","message","ndjson","Type","Extra","Error"],"mappings":"AAAA;;;;;;;;AAEA,MAAMA,SAAS,GAAGC,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAMC,iBAAiB,GAAGD,OAAO,CAAC,6BAAD,CAAjC;;AACA,MAAM;AAAEE,EAAAA;AAAF,IAAYF,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAMG,kBAAkB,GAAGH,OAAO,CAAC,uBAAD,CAAlC;;AACA,MAAMI,oBAAoB,GAAGJ,OAAO,CAAC,yBAAD,CAApC;;AAEAK,MAAM,CAACC,OAAP,GAAiBP,SAAS,CAACQ,GAAG,IAAI;AAChC;AACF;AACA;AACE,iBAAeC,GAAf,CAAoBC,GAApB,EAAyBC,OAAO,GAAG,EAAnC,EAAuC;AACrC,UAAMC,GAAG,GAAG,MAAMJ,GAAG,CAACK,IAAJ,CAAS,SAAT,EAAoB;AACpCC,MAAAA,OAAO,EAAEH,OAAO,CAACG,OADmB;AAEpCC,MAAAA,MAAM,EAAEJ,OAAO,CAACI,MAFoB;AAGpCC,MAAAA,YAAY,EAAEd,iBAAiB,CAAC;AAC9Be,QAAAA,GAAG,EAAEP,GAAG,YAAYQ,UAAf,GAA4Bd,kBAAkB,CAACM,GAAD,CAA9C,GAAsDA,GAD7B;AAE9B,WAAGC;AAF2B,OAAD,CAHK;AAOpCQ,MAAAA,OAAO,EAAER,OAAO,CAACQ;AAPmB,KAApB,CAAlB;;AAUA,eAAW,MAAMC,OAAjB,IAA4BR,GAAG,CAACS,MAAJ,EAA5B,EAA0C;AACxC,UAAID,OAAO,CAACE,IAAR,KAAiBnB,KAArB,EAA4B;AAC1B,eAAOE,oBAAoB,CAACe,OAAO,CAACG,KAAT,EAAgB,WAAhB,CAA3B;AACD;AACF;;AAED,UAAM,IAAIC,KAAJ,CAAU,WAAV,CAAN;AACD;;AAED,SAAOf,GAAP;AACD,CAzByB,CAA1B","sourcesContent":["'use strict'\n\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\nconst { Value } = require('./response-types')\nconst uint8ArrayToString = require('uint8arrays/to-string')\nconst uint8ArrayFromString = require('uint8arrays/from-string')\n\nmodule.exports = configure(api => {\n  /**\n   * @type {import('..').ImplementsMethod<'get', import('ipfs-core/src/components/dht')>}\n   */\n  async function get (key, options = {}) {\n    const res = await api.post('dht/get', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: key instanceof Uint8Array ? uint8ArrayToString(key) : key,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    for await (const message of res.ndjson()) {\n      if (message.Type === Value) {\n        return uint8ArrayFromString(message.Extra, 'base64pad')\n      }\n    }\n\n    throw new Error('not found')\n  }\n\n  return get\n})\n"]},"metadata":{},"sourceType":"script"}