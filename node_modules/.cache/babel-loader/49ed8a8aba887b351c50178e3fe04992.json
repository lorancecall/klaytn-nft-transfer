{"ast":null,"code":"require(\"core-js/modules/es.error.cause.js\");\n\n/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\nconst AccountLib = require('eth-lib/lib/account');\n\nconst Nat = require('eth-lib/lib/nat');\n\nconst elliptic = require('elliptic');\n\nconst secp256k1 = new elliptic.ec('secp256k1');\n\nconst utils = require('../../../caver-utils');\n\nconst SignatureData = require('./signatureData');\n/**\n * Representing a PrivateKey class that includes private key string.\n * @class\n * @hideconstructor\n */\n\n\nclass PrivateKey {\n  /**\n   * creates a privateKey.\n   * @param {string} key - The private key string.\n   */\n  constructor(key) {\n    this.privateKey = key;\n  }\n  /**\n   * @type {string}\n   */\n\n\n  get privateKey() {\n    return this._privateKey;\n  }\n\n  set privateKey(p) {\n    if (!utils.isValidPrivateKey(p)) throw new Error(`Invalid private key: ${p}`);\n    this._privateKey = utils.addHexPrefix(p);\n  }\n  /**\n   * Signs with transactionHash with key and returns signature.\n   *\n   * @example\n   * const signature = privateKey.sign('0xe9a11d9ef95fb437f75d07ce768d43e74f158dd54b106e7d3746ce29d545b550', '0x2810')\n   *\n   * @param {string} transactionHash The hash of transaction.\n   * @param {string|number} chainId The chainId or the network.\n   * @return {SignatureData} A {@link SignatureData}.\n   */\n\n\n  sign(transactionHash, chainId) {\n    let addToV;\n\n    if (chainId === undefined) {\n      throw new Error(`Insufficient parameters: chainId is undefined.`);\n    } else {\n      chainId = utils.toHex(chainId);\n      addToV = Nat.toNumber(chainId) * 2 + 35;\n    }\n\n    const signature = AccountLib.makeSigner(addToV)(transactionHash, this.privateKey);\n    const [v, r, s] = AccountLib.decodeSignature(signature).map(sig => utils.makeEven(utils.trimLeadingZero(sig)));\n    return new SignatureData([v, r, s]);\n  }\n  /**\n   * Signs with hashed data and returns signature data.\n   * ecsign returns a signature which has v as a parity (0 for even, 1 for odd) of the y-value of a secp256k1 signature.\n   *\n   * @example\n   * const signature = privateKey.ecsign('0xe9a11d9ef95fb437f75d07ce768d43e74f158dd54b106e7d3746ce29d545b550')\n   *\n   * @param {string} hash The hash to sign.\n   * @return {SignatureData} A {@link SignatureData}.\n   */\n\n\n  ecsign(hash) {\n    // ecsign returns recovery id `v` as y-parity (0 or 1).\n    // `AccountLib.makeSigner` makes a sign function that adds addToV to `v`, so use 0.\n    const addToV = 0;\n    const signature = AccountLib.makeSigner(addToV)(hash, this.privateKey);\n    let [v, r, s] = AccountLib.decodeSignature(signature).map(sig => utils.makeEven(utils.trimLeadingZero(sig))); // This is for converting '0x' to '0x0'\n\n    v = utils.toHex(utils.hexToNumber(v));\n    return new SignatureData([v, r, s]);\n  }\n  /**\n   * Signs with hashed data and returns `signature`.\n   *\n   * @example\n   * const signature = privateKey.signMessage('0xe9a11d9ef95fb437f75d07ce768d43e74f158dd54b106e7d3746ce29d545b550')\n   *\n   * @param {string} messageHash The hash of data to sign.\n   * @return {SignatureData} A {@link SignatureData}.\n   */\n\n\n  signMessage(messageHash) {\n    const signature = AccountLib.sign(messageHash, this.privateKey);\n    const [v, r, s] = AccountLib.decodeSignature(signature);\n    return new SignatureData([v, r, s]);\n  }\n  /**\n   * Returns public key string.\n   *\n   * @example\n   * const publicKey = privateKey.getPublicKey()\n   *\n   * @param {boolean} [compressed] Whether in compressed format or not.\n   * @return {string} A public key string which is derived from private key string.\n   */\n\n\n  getPublicKey(compressed = false) {\n    const strippedPrivateKey = utils.stripHexPrefix(this.privateKey);\n    const ecKey = secp256k1.keyFromPrivate(Buffer.from(strippedPrivateKey, 'hex'));\n    if (!compressed) return `0x${ecKey.getPublic(false, 'hex').slice(2)}`;\n    return `0x${ecKey.getPublic(true, 'hex')}`;\n  }\n  /**\n   * Returns derived address from private key string.\n   *\n   * @example\n   * const address = privateKey.getDerivedAddress()\n   *\n   * @return {string} A address which is derived from private key string.\n   */\n\n\n  getDerivedAddress() {\n    return AccountLib.fromPrivate(this.privateKey).address.toLowerCase();\n  }\n\n}\n\nmodule.exports = PrivateKey;","map":{"version":3,"sources":["/home/lorancecall/Projects/vuejs-tutorial/testpage/node_modules/caver-js/packages/caver-wallet/src/keyring/privateKey.js"],"names":["AccountLib","require","Nat","elliptic","secp256k1","ec","utils","SignatureData","PrivateKey","constructor","key","privateKey","_privateKey","p","isValidPrivateKey","Error","addHexPrefix","sign","transactionHash","chainId","addToV","undefined","toHex","toNumber","signature","makeSigner","v","r","s","decodeSignature","map","sig","makeEven","trimLeadingZero","ecsign","hash","hexToNumber","signMessage","messageHash","getPublicKey","compressed","strippedPrivateKey","stripHexPrefix","ecKey","keyFromPrivate","Buffer","from","getPublic","slice","getDerivedAddress","fromPrivate","address","toLowerCase","module","exports"],"mappings":"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","sourcesContent":["/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nconst AccountLib = require('eth-lib/lib/account')\nconst Nat = require('eth-lib/lib/nat')\n\nconst elliptic = require('elliptic')\n\nconst secp256k1 = new elliptic.ec('secp256k1')\n\nconst utils = require('../../../caver-utils')\nconst SignatureData = require('./signatureData')\n\n/**\n * Representing a PrivateKey class that includes private key string.\n * @class\n * @hideconstructor\n */\nclass PrivateKey {\n    /**\n     * creates a privateKey.\n     * @param {string} key - The private key string.\n     */\n    constructor(key) {\n        this.privateKey = key\n    }\n\n    /**\n     * @type {string}\n     */\n    get privateKey() {\n        return this._privateKey\n    }\n\n    set privateKey(p) {\n        if (!utils.isValidPrivateKey(p)) throw new Error(`Invalid private key: ${p}`)\n        this._privateKey = utils.addHexPrefix(p)\n    }\n\n    /**\n     * Signs with transactionHash with key and returns signature.\n     *\n     * @example\n     * const signature = privateKey.sign('0xe9a11d9ef95fb437f75d07ce768d43e74f158dd54b106e7d3746ce29d545b550', '0x2810')\n     *\n     * @param {string} transactionHash The hash of transaction.\n     * @param {string|number} chainId The chainId or the network.\n     * @return {SignatureData} A {@link SignatureData}.\n     */\n    sign(transactionHash, chainId) {\n        let addToV\n        if (chainId === undefined) {\n            throw new Error(`Insufficient parameters: chainId is undefined.`)\n        } else {\n            chainId = utils.toHex(chainId)\n            addToV = Nat.toNumber(chainId) * 2 + 35\n        }\n        const signature = AccountLib.makeSigner(addToV)(transactionHash, this.privateKey)\n        const [v, r, s] = AccountLib.decodeSignature(signature).map(sig => utils.makeEven(utils.trimLeadingZero(sig)))\n        return new SignatureData([v, r, s])\n    }\n\n    /**\n     * Signs with hashed data and returns signature data.\n     * ecsign returns a signature which has v as a parity (0 for even, 1 for odd) of the y-value of a secp256k1 signature.\n     *\n     * @example\n     * const signature = privateKey.ecsign('0xe9a11d9ef95fb437f75d07ce768d43e74f158dd54b106e7d3746ce29d545b550')\n     *\n     * @param {string} hash The hash to sign.\n     * @return {SignatureData} A {@link SignatureData}.\n     */\n    ecsign(hash) {\n        // ecsign returns recovery id `v` as y-parity (0 or 1).\n        // `AccountLib.makeSigner` makes a sign function that adds addToV to `v`, so use 0.\n        const addToV = 0\n        const signature = AccountLib.makeSigner(addToV)(hash, this.privateKey)\n        let [v, r, s] = AccountLib.decodeSignature(signature).map(sig => utils.makeEven(utils.trimLeadingZero(sig)))\n        // This is for converting '0x' to '0x0'\n        v = utils.toHex(utils.hexToNumber(v))\n\n        return new SignatureData([v, r, s])\n    }\n\n    /**\n     * Signs with hashed data and returns `signature`.\n     *\n     * @example\n     * const signature = privateKey.signMessage('0xe9a11d9ef95fb437f75d07ce768d43e74f158dd54b106e7d3746ce29d545b550')\n     *\n     * @param {string} messageHash The hash of data to sign.\n     * @return {SignatureData} A {@link SignatureData}.\n     */\n    signMessage(messageHash) {\n        const signature = AccountLib.sign(messageHash, this.privateKey)\n        const [v, r, s] = AccountLib.decodeSignature(signature)\n        return new SignatureData([v, r, s])\n    }\n\n    /**\n     * Returns public key string.\n     *\n     * @example\n     * const publicKey = privateKey.getPublicKey()\n     *\n     * @param {boolean} [compressed] Whether in compressed format or not.\n     * @return {string} A public key string which is derived from private key string.\n     */\n    getPublicKey(compressed = false) {\n        const strippedPrivateKey = utils.stripHexPrefix(this.privateKey)\n\n        const ecKey = secp256k1.keyFromPrivate(Buffer.from(strippedPrivateKey, 'hex'))\n\n        if (!compressed) return `0x${ecKey.getPublic(false, 'hex').slice(2)}`\n        return `0x${ecKey.getPublic(true, 'hex')}`\n    }\n\n    /**\n     * Returns derived address from private key string.\n     *\n     * @example\n     * const address = privateKey.getDerivedAddress()\n     *\n     * @return {string} A address which is derived from private key string.\n     */\n    getDerivedAddress() {\n        return AccountLib.fromPrivate(this.privateKey).address.toLowerCase()\n    }\n}\n\nmodule.exports = PrivateKey\n"]},"metadata":{},"sourceType":"script"}