{"ast":null,"code":"'use strict';\n\nrequire(\"core-js/modules/es.error.cause.js\");\n\nconst errCode = require('err-code');\n\nconst CID = require('cids');\n/**\n * Transform one of:\n *\n * ```ts\n * CID\n * String\n * { cid: CID recursive, metadata }\n * { path: String recursive, metadata }\n * Iterable<CID>\n * Iterable<String>\n * Iterable<{ cid: CID recursive, metadata }>\n * Iterable<{ path: String recursive, metadata }>\n * AsyncIterable<CID>\n * AsyncIterable<String>\n * AsyncIterable<{ cid: CID recursive, metadata }>\n * AsyncIterable<{ path: String recursive, metadata }>\n * ```\n * Into:\n *\n * ```ts\n * AsyncIterable<{ path: CID|String, recursive:boolean, metadata }>\n * ```\n *\n * @param {Source} input\n * @returns {AsyncIterable<Pin>}\n */\n// eslint-disable-next-line complexity\n\n\nmodule.exports = async function* normaliseInput(input) {\n  // must give us something\n  if (input === null || input === undefined) {\n    throw errCode(new Error(`Unexpected input: ${input}`), 'ERR_UNEXPECTED_INPUT');\n  } // CID|String\n\n\n  if (CID.isCID(input)) {\n    yield toPin({\n      cid: input\n    });\n    return;\n  }\n\n  if (input instanceof String || typeof input === 'string') {\n    yield toPin({\n      path: input\n    });\n    return;\n  } // { cid: CID recursive, metadata }\n  // @ts-ignore - it still could be iterable or async iterable\n\n\n  if (input.cid != null || input.path != null) {\n    // @ts-ignore\n    return yield toPin(input);\n  } // Iterable<?>\n\n\n  if (input[Symbol.iterator]) {\n    const iterator = input[Symbol.iterator]();\n    const first = iterator.next();\n    if (first.done) return iterator; // Iterable<CID|String>\n\n    if (CID.isCID(first.value) || first.value instanceof String || typeof first.value === 'string') {\n      yield toPin({\n        cid: first.value\n      });\n\n      for (const cid of iterator) {\n        yield toPin({\n          cid\n        });\n      }\n\n      return;\n    } // Iterable<{ cid: CID recursive, metadata }>\n\n\n    if (first.value.cid != null || first.value.path != null) {\n      yield toPin(first.value);\n\n      for (const obj of iterator) {\n        yield toPin(obj);\n      }\n\n      return;\n    }\n\n    throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT');\n  } // AsyncIterable<?>\n\n\n  if (input[Symbol.asyncIterator]) {\n    const iterator = input[Symbol.asyncIterator]();\n    const first = await iterator.next();\n    if (first.done) return iterator; // AsyncIterable<CID|String>\n\n    if (CID.isCID(first.value) || first.value instanceof String || typeof first.value === 'string') {\n      yield toPin({\n        cid: first.value\n      });\n\n      for await (const cid of iterator) {\n        yield toPin({\n          cid\n        });\n      }\n\n      return;\n    } // AsyncIterable<{ cid: CID|String recursive, metadata }>\n\n\n    if (first.value.cid != null || first.value.path != null) {\n      yield toPin(first.value);\n\n      for await (const obj of iterator) {\n        yield toPin(obj);\n      }\n\n      return;\n    }\n\n    throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT');\n  }\n\n  throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT');\n};\n/**\n * @param {ToPinWithPath|ToPinWithCID} input\n * @returns {Pin}\n */\n\n\nfunction toPin(input) {\n  const pin = {\n    path: input.path == null ? input.cid : `${input.path}`,\n    recursive: input.recursive !== false\n  };\n\n  if (input.metadata != null) {\n    pin.metadata = input.metadata;\n  }\n\n  return pin;\n}\n/**\n * @typedef {Object} ToPinWithPath\n * @property {string | InstanceType<typeof window.String> | CID} path\n * @property {undefined} [cid]\n * @property {boolean} [recursive]\n * @property {any} [metadata]\n *\n * @typedef {Object} ToPinWithCID\n * @property {undefined} [path]\n * @property {CID} cid\n * @property {boolean} [recursive]\n * @property {any} [metadata]\n *\n * @typedef {CID|string|InstanceType<typeof window.String>|ToPinWithPath|ToPinWithPath} ToPin\n * @typedef {ToPin|Iterable<ToPin>|AsyncIterable<ToPin>} Source\n *\n * @typedef {Object} Pin\n * @property {string|CID} path\n * @property {boolean} recursive\n * @property {any} [metadata]\n */","map":{"version":3,"sources":["/home/lorancecall/Projects/vuejs-tutorial/testpage/node_modules/ipfs-core-utils/src/pins/normalise-input.js"],"names":["errCode","require","CID","module","exports","normaliseInput","input","undefined","Error","isCID","toPin","cid","String","path","Symbol","iterator","first","next","done","value","obj","asyncIterator","pin","recursive","metadata"],"mappings":"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","sourcesContent":["'use strict'\n\nconst errCode = require('err-code')\nconst CID = require('cids')\n\n/**\n * Transform one of:\n *\n * ```ts\n * CID\n * String\n * { cid: CID recursive, metadata }\n * { path: String recursive, metadata }\n * Iterable<CID>\n * Iterable<String>\n * Iterable<{ cid: CID recursive, metadata }>\n * Iterable<{ path: String recursive, metadata }>\n * AsyncIterable<CID>\n * AsyncIterable<String>\n * AsyncIterable<{ cid: CID recursive, metadata }>\n * AsyncIterable<{ path: String recursive, metadata }>\n * ```\n * Into:\n *\n * ```ts\n * AsyncIterable<{ path: CID|String, recursive:boolean, metadata }>\n * ```\n *\n * @param {Source} input\n * @returns {AsyncIterable<Pin>}\n */\n// eslint-disable-next-line complexity\nmodule.exports = async function * normaliseInput (input) {\n  // must give us something\n  if (input === null || input === undefined) {\n    throw errCode(new Error(`Unexpected input: ${input}`), 'ERR_UNEXPECTED_INPUT')\n  }\n\n  // CID|String\n  if (CID.isCID(input)) {\n    yield toPin({ cid: input })\n    return\n  }\n\n  if (input instanceof String || typeof input === 'string') {\n    yield toPin({ path: input })\n    return\n  }\n\n  // { cid: CID recursive, metadata }\n  // @ts-ignore - it still could be iterable or async iterable\n  if (input.cid != null || input.path != null) {\n    // @ts-ignore\n    return yield toPin(input)\n  }\n\n  // Iterable<?>\n  if (input[Symbol.iterator]) {\n    const iterator = input[Symbol.iterator]()\n    const first = iterator.next()\n    if (first.done) return iterator\n\n    // Iterable<CID|String>\n    if (CID.isCID(first.value) || first.value instanceof String || typeof first.value === 'string') {\n      yield toPin({ cid: first.value })\n      for (const cid of iterator) {\n        yield toPin({ cid })\n      }\n      return\n    }\n\n    // Iterable<{ cid: CID recursive, metadata }>\n    if (first.value.cid != null || first.value.path != null) {\n      yield toPin(first.value)\n      for (const obj of iterator) {\n        yield toPin(obj)\n      }\n      return\n    }\n\n    throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT')\n  }\n\n  // AsyncIterable<?>\n  if (input[Symbol.asyncIterator]) {\n    const iterator = input[Symbol.asyncIterator]()\n    const first = await iterator.next()\n    if (first.done) return iterator\n\n    // AsyncIterable<CID|String>\n    if (CID.isCID(first.value) || first.value instanceof String || typeof first.value === 'string') {\n      yield toPin({ cid: first.value })\n      for await (const cid of iterator) {\n        yield toPin({ cid })\n      }\n      return\n    }\n\n    // AsyncIterable<{ cid: CID|String recursive, metadata }>\n    if (first.value.cid != null || first.value.path != null) {\n      yield toPin(first.value)\n      for await (const obj of iterator) {\n        yield toPin(obj)\n      }\n      return\n    }\n\n    throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT')\n  }\n\n  throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT')\n}\n\n/**\n * @param {ToPinWithPath|ToPinWithCID} input\n * @returns {Pin}\n */\nfunction toPin (input) {\n  const pin = {\n    path: input.path == null ? input.cid : `${input.path}`,\n    recursive: input.recursive !== false\n  }\n\n  if (input.metadata != null) {\n    pin.metadata = input.metadata\n  }\n\n  return pin\n}\n\n/**\n * @typedef {Object} ToPinWithPath\n * @property {string | InstanceType<typeof window.String> | CID} path\n * @property {undefined} [cid]\n * @property {boolean} [recursive]\n * @property {any} [metadata]\n *\n * @typedef {Object} ToPinWithCID\n * @property {undefined} [path]\n * @property {CID} cid\n * @property {boolean} [recursive]\n * @property {any} [metadata]\n *\n * @typedef {CID|string|InstanceType<typeof window.String>|ToPinWithPath|ToPinWithPath} ToPin\n * @typedef {ToPin|Iterable<ToPin>|AsyncIterable<ToPin>} Source\n *\n * @typedef {Object} Pin\n * @property {string|CID} path\n * @property {boolean} recursive\n * @property {any} [metadata]\n */\n"]},"metadata":{},"sourceType":"script"}