{"ast":null,"code":"require(\"core-js/modules/es.error.cause.js\");\n\nrequire(\"core-js/modules/es.array.includes.js\");\n\n/*\n    Copyright 2018 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/**\n * Should be called to check the parameters of transaction\n *\n * @method validateParams\n * @param {Object}\n * @return {Error}\n */\nconst utils = require('../../caver-utils');\n\nconst {\n  TX_TYPE_STRING,\n  isEthereumTxType\n} = require('../../caver-transaction/src/transactionHelper/transactionHelper');\n\nfunction validateParams(tx) {\n  let error; // validate for fee payer transaction format\n\n  if (tx.senderRawTransaction) {\n    if (!tx.feePayer || tx.feePayer === '0x' || tx.feePayer === '0x0000000000000000000000000000000000000000') {\n      error = new Error(`Invalid fee payer: ${tx.feePayer}`);\n    } else if (!utils.isAddress(tx.feePayer)) {\n      error = new Error(`Invalid address of fee payer: ${tx.feePayer}`);\n    }\n\n    return error;\n  }\n\n  const isValidateType = validateTxType(tx.type);\n\n  if (!isValidateType) {\n    return new Error(`The transaction type [${tx.type}] is not supported`);\n  }\n\n  error = validateTxObjectWithType(tx);\n\n  if (error !== undefined) {\n    return error;\n  }\n\n  if (!isEthereumTxType(tx.type) && !tx.from) {\n    error = new Error('\"from\" is missing');\n  } else if (tx.from) {\n    if (tx.from === '0x' || tx.from === '0x0000000000000000000000000000000000000000') {\n      if (!isEthereumTxType(tx.type)) {\n        error = new Error(`Invalid address of from: ${tx.from}`);\n      }\n    } else if (!utils.isAddress(tx.from)) {\n      error = new Error(`Invalid address of from: ${tx.from}`);\n    }\n  }\n\n  if (tx.gas === undefined && tx.gasLimit === undefined) {\n    error = new Error('\"gas\" is missing');\n  } else if (tx.nonce < 0 || tx.gas < 0 || tx.gasLimit < 0 || tx.gasPrice !== undefined && tx.gasPrice < 0 || tx.chainId < 0) {\n    error = new Error('gas(or gasLimit), gasPrice, nonce or chainId is lower than 0');\n  } // If feePayerSignatures is set in transaction object, feePayer also should be defined together.\n\n\n  if (tx.feePayerSignatures && !utils.isEmptySig(tx.feePayerSignatures)) {\n    if (!tx.feePayer || tx.feePayer === '0x' || tx.feePayer === '0x0000000000000000000000000000000000000000') {\n      error = new Error('\"feePayer\" is missing: feePayer must be defined with feePayerSignatures.');\n    } else if (!utils.isAddress(tx.feePayer)) {\n      error = new Error(`Invalid address of fee payer: ${tx.feePayer}`);\n    }\n  }\n\n  return error;\n}\n/**\n * Should be called to check the type of transaction\n * Transaction type has to be checked if type is set.\n *\n * @method validateTypes\n * @param {string}\n * @return {bool}\n */\n\n\nfunction validateTxType(txType) {\n  if (!txType) {\n    return true;\n  }\n\n  switch (txType) {\n    case 'VALUE_TRANSFER':\n    case 'FEE_DELEGATED_VALUE_TRANSFER':\n    case 'FEE_DELEGATED_VALUE_TRANSFER_WITH_RATIO':\n    case 'VALUE_TRANSFER_MEMO':\n    case 'FEE_DELEGATED_VALUE_TRANSFER_MEMO':\n    case 'FEE_DELEGATED_VALUE_TRANSFER_MEMO_WITH_RATIO':\n    case 'ACCOUNT_UPDATE':\n    case 'FEE_DELEGATED_ACCOUNT_UPDATE':\n    case 'FEE_DELEGATED_ACCOUNT_UPDATE_WITH_RATIO':\n    case 'SMART_CONTRACT_DEPLOY':\n    case 'FEE_DELEGATED_SMART_CONTRACT_DEPLOY':\n    case 'FEE_DELEGATED_SMART_CONTRACT_DEPLOY_WITH_RATIO':\n    case 'SMART_CONTRACT_EXECUTION':\n    case 'FEE_DELEGATED_SMART_CONTRACT_EXECUTION':\n    case 'FEE_DELEGATED_SMART_CONTRACT_EXECUTION_WITH_RATIO':\n    case 'CANCEL':\n    case 'FEE_DELEGATED_CANCEL':\n    case 'FEE_DELEGATED_CANCEL_WITH_RATIO':\n    case 'CHAIN_DATA_ANCHORING':\n    case 'LEGACY':\n    case TX_TYPE_STRING.TxTypeValueTransfer:\n    case TX_TYPE_STRING.TxTypeFeeDelegatedValueTransfer:\n    case TX_TYPE_STRING.TxTypeFeeDelegatedValueTransferWithRatio:\n    case TX_TYPE_STRING.TxTypeValueTransferMemo:\n    case TX_TYPE_STRING.TxTypeFeeDelegatedValueTransferMemo:\n    case TX_TYPE_STRING.TxTypeFeeDelegatedValueTransferMemoWithRatio:\n    case TX_TYPE_STRING.TxTypeAccountUpdate:\n    case TX_TYPE_STRING.TxTypeFeeDelegatedAccountUpdate:\n    case TX_TYPE_STRING.TxTypeFeeDelegatedAccountUpdateWithRatio:\n    case TX_TYPE_STRING.TxTypeSmartContractDeploy:\n    case TX_TYPE_STRING.TxTypeFeeDelegatedSmartContractDeploy:\n    case TX_TYPE_STRING.TxTypeFeeDelegatedSmartContractDeployWithRatio:\n    case TX_TYPE_STRING.TxTypeSmartContractExecution:\n    case TX_TYPE_STRING.TxTypeFeeDelegatedSmartContractExecution:\n    case TX_TYPE_STRING.TxTypeFeeDelegatedSmartContractExecutionWithRatio:\n    case TX_TYPE_STRING.TxTypeCancel:\n    case TX_TYPE_STRING.TxTypeFeeDelegatedCancel:\n    case TX_TYPE_STRING.TxTypeFeeDelegatedCancelWithRatio:\n    case TX_TYPE_STRING.TxTypeChainDataAnchoring:\n    case TX_TYPE_STRING.TxTypeFeeDelegatedChainDataAnchoring:\n    case TX_TYPE_STRING.TxTypeFeeDelegatedChainDataAnchoringWithRatio:\n    case TX_TYPE_STRING.TxTypeLegacyTransaction:\n    case TX_TYPE_STRING.TxTypeEthereumAccessList:\n    case TX_TYPE_STRING.TxTypeEthereumDynamicFee:\n      return true;\n  }\n\n  return false;\n}\n/**\n * Should be called to check codeFormat\n *\n * @method validateTypes\n * @param {string}\n * @return {bool}\n */\n\n\nfunction validateCodeFormat(cf) {\n  if (cf === undefined) {\n    return true;\n  }\n\n  switch (cf) {\n    case 0:\n    case 'EVM':\n    case '0x':\n    case '0x0':\n      return true;\n  }\n\n  return false;\n}\n\nfunction validateTxObjectWithType(tx) {\n  if (tx.type === undefined) {\n    return validateLegacy(tx);\n  }\n\n  switch (tx.type) {\n    case 'LEGACY':\n    case TX_TYPE_STRING.TxTypeLegacyTransaction:\n      return validateLegacy(tx);\n\n    case 'VALUE_TRANSFER':\n    case TX_TYPE_STRING.TxTypeValueTransfer:\n      return validateValueTransfer(tx);\n\n    case 'FEE_DELEGATED_VALUE_TRANSFER':\n    case TX_TYPE_STRING.TxTypeFeeDelegatedValueTransfer:\n      return validateFeeDelegatedValueTransfer(tx);\n\n    case 'FEE_DELEGATED_VALUE_TRANSFER_WITH_RATIO':\n    case TX_TYPE_STRING.TxTypeFeeDelegatedValueTransferWithRatio:\n      return validateFeeDelegatedValueTransferWithRatio(tx);\n\n    case 'VALUE_TRANSFER_MEMO':\n    case TX_TYPE_STRING.TxTypeValueTransferMemo:\n      return validateValueTransferMemo(tx);\n\n    case 'FEE_DELEGATED_VALUE_TRANSFER_MEMO':\n    case TX_TYPE_STRING.TxTypeFeeDelegatedValueTransferMemo:\n      return validateFeeDelegatedValueTransferMemo(tx);\n\n    case 'FEE_DELEGATED_VALUE_TRANSFER_MEMO_WITH_RATIO':\n    case TX_TYPE_STRING.TxTypeFeeDelegatedValueTransferMemoWithRatio:\n      return validateFeeDelegatedValueTransferMemoWithRatio(tx);\n\n    case 'ACCOUNT_UPDATE':\n    case TX_TYPE_STRING.TxTypeAccountUpdate:\n      return validateAccountUpdate(tx);\n\n    case 'FEE_DELEGATED_ACCOUNT_UPDATE':\n    case TX_TYPE_STRING.TxTypeFeeDelegatedAccountUpdate:\n      return validateFeeDelegatedAccountUpdate(tx);\n\n    case 'FEE_DELEGATED_ACCOUNT_UPDATE_WITH_RATIO':\n    case TX_TYPE_STRING.TxTypeFeeDelegatedAccountUpdateWithRatio:\n      return validateFeeDelegatedAccountUpdateWithRatio(tx);\n\n    case 'SMART_CONTRACT_DEPLOY':\n    case TX_TYPE_STRING.TxTypeSmartContractDeploy:\n      return validateSmartContractDeploy(tx);\n\n    case 'FEE_DELEGATED_SMART_CONTRACT_DEPLOY':\n    case TX_TYPE_STRING.TxTypeFeeDelegatedSmartContractDeploy:\n      return validateFeeDelegatedSmartContractDeploy(tx);\n\n    case 'FEE_DELEGATED_SMART_CONTRACT_DEPLOY_WITH_RATIO':\n    case TX_TYPE_STRING.TxTypeFeeDelegatedSmartContractDeployWithRatio:\n      return validateFeeDelegatedSmartContractDeployWithRatio(tx);\n\n    case 'SMART_CONTRACT_EXECUTION':\n    case TX_TYPE_STRING.TxTypeSmartContractExecution:\n      return validateSmartContractExecution(tx);\n\n    case 'FEE_DELEGATED_SMART_CONTRACT_EXECUTION':\n    case TX_TYPE_STRING.TxTypeFeeDelegatedSmartContractExecution:\n      return validateFeeDelegatedSmartContractExecution(tx);\n\n    case 'FEE_DELEGATED_SMART_CONTRACT_EXECUTION_WITH_RATIO':\n    case TX_TYPE_STRING.TxTypeFeeDelegatedSmartContractExecutionWithRatio:\n      return validateFeeDelegatedSmartContractExecutionWithRatio(tx);\n\n    case 'CANCEL':\n    case TX_TYPE_STRING.TxTypeCancel:\n      return validateCancel(tx);\n\n    case 'FEE_DELEGATED_CANCEL':\n    case TX_TYPE_STRING.TxTypeFeeDelegatedCancel:\n      return validateFeeDelegatedCancel(tx);\n\n    case 'FEE_DELEGATED_CANCEL_WITH_RATIO':\n    case TX_TYPE_STRING.TxTypeFeeDelegatedCancelWithRatio:\n      return validateFeeDelegatedCancelWithRatio(tx);\n\n    case 'CHAIN_DATA_ANCHORING':\n    case TX_TYPE_STRING.TxTypeChainDataAnchoring:\n      return validateChainDataAnchoring(tx);\n\n    case TX_TYPE_STRING.TxTypeFeeDelegatedChainDataAnchoring:\n      return validateFeeDelegatedChainDataAnchoring(tx);\n\n    case TX_TYPE_STRING.TxTypeFeeDelegatedChainDataAnchoringWithRatio:\n      return validateFeeDelegatedChainDataAnchoringWithRatio(tx);\n\n    case TX_TYPE_STRING.TxTypeEthereumAccessList:\n      return validateEthereumAccessList(tx);\n\n    case TX_TYPE_STRING.TxTypeEthereumDynamicFee:\n      return validateEthereumDynamicFee(tx);\n  }\n\n  return undefined;\n}\n\nfunction validateLegacy(transaction) {\n  if (transaction.to === undefined && transaction.data === undefined && transaction.input === undefined) {\n    return new Error('contract creation without any data provided');\n  }\n\n  if (transaction.to && transaction.to !== '0x' && transaction.to !== '0x0000000000000000000000000000000000000000' && !utils.isAddress(transaction.to)) {\n    return new Error(`Invalid address of to: ${transaction.to}`);\n  }\n\n  if (transaction.codeFormat !== undefined) {\n    return new Error(`\"codeFormat\" cannot be used with ${transaction.type} transaction`);\n  }\n\n  if (transaction.humanReadable !== undefined) {\n    return new Error(`\"humanReadable\" cannot be used with ${transaction.type} transaction`);\n  }\n\n  if (transaction.accessList !== undefined) {\n    return new Error(`\"accessList\" cannot be used with ${transaction.type} transaction`);\n  }\n\n  if (transaction.maxPriorityFeePerGas !== undefined) {\n    return new Error(`\"maxPriorityFeePerGas\" cannot be used with ${transaction.type} transaction`);\n  }\n\n  if (transaction.maxFeePerGas !== undefined) {\n    return new Error(`\"maxFeePerGas\" cannot be used with ${transaction.type} transaction`);\n  }\n\n  const error = validateNonFeeDelegated(transaction);\n  if (error) return error;\n  return validateNotAccountTransaction(transaction);\n}\n\nfunction validateNonFeeDelegated(transaction) {\n  const type = transaction.type ? transaction.type : 'LEGACY';\n\n  if (transaction.feePayer !== undefined) {\n    return new Error(`\"feePayer\" cannot be used with ${type} transaction`);\n  }\n\n  if (transaction.feeRatio !== undefined) {\n    return new Error(`\"feeRatio\" cannot be used with ${type} transaction`);\n  }\n\n  if (transaction.feePayerSignatures !== undefined) {\n    return new Error(`\"feePayerSignatures\" cannot be used with ${type} transaction`);\n  }\n}\n\nfunction validateFeeDelegated(transaction) {\n  if (transaction.type.includes('WITH_RATIO') || transaction.type.includes('WithRatio')) {\n    if (transaction.feeRatio === undefined) {\n      return new Error('\"feeRatio\" is missing');\n    }\n  } else if (transaction.feeRatio !== undefined) {\n    return new Error(`\"feeRatio\" cannot be used with ${transaction.type} transaction`);\n  }\n}\n\nfunction validateNotAccountTransaction(transaction) {\n  const type = transaction.type ? transaction.type : 'LEGACY';\n\n  if (transaction.account !== undefined) {\n    return new Error(`\"account\" cannot be used with ${type} transaction`);\n  }\n\n  if (transaction.key !== undefined) {\n    return new Error(`\"key\" cannot be used with ${type} transaction`);\n  }\n\n  if (transaction.legacyKey !== undefined) {\n    return new Error(`\"legacyKey\" cannot be used with ${type} transaction`);\n  }\n\n  if (transaction.publicKey !== undefined) {\n    return new Error(`\"publicKey\" cannot be used with ${type} transaction`);\n  }\n\n  if (transaction.multisig !== undefined) {\n    return new Error(`\"multisig\" cannot be used with ${type} transaction`);\n  }\n\n  if (transaction.roleTransactionKey !== undefined) {\n    return new Error(`\"roleTransactionKey\" cannot be used with ${type} transaction`);\n  }\n\n  if (transaction.roleAccountUpdateKey !== undefined) {\n    return new Error(`\"roleAccountUpdateKey\" cannot be used with ${type} transaction`);\n  }\n\n  if (transaction.roleFeePayerKey !== undefined) {\n    return new Error(`\"roleFeePayerKey\" cannot be used with ${type} transaction`);\n  }\n\n  if (transaction.failKey !== undefined) {\n    return new Error(`\"failKey\" cannot be used with ${type} transaction`);\n  }\n}\n\nfunction checkValueTransferEssential(transaction) {\n  if (transaction.to === undefined) {\n    return new Error('\"to\" is missing');\n  }\n\n  if (!utils.isAddress(transaction.to)) {\n    return new Error(`Invalid address of to: ${transaction.to}`);\n  }\n\n  if (transaction.value === undefined) {\n    return new Error('\"value\" is missing');\n  }\n\n  if (transaction.codeFormat !== undefined) {\n    return new Error(`\"codeFormat\" cannot be used with ${transaction.type} transaction`);\n  }\n\n  if (transaction.data !== undefined) {\n    return new Error(`\"data\" cannot be used with ${transaction.type} transaction`);\n  }\n\n  if (transaction.input !== undefined) {\n    return new Error(`\"input\" cannot be used with ${transaction.type} transaction`);\n  }\n\n  if (transaction.humanReadable !== undefined) {\n    return new Error(`\"humanReadable\" cannot be used with ${transaction.type} transaction`);\n  }\n\n  if (transaction.accessList !== undefined) {\n    return new Error(`\"accessList\" cannot be used with ${transaction.type} transaction`);\n  }\n\n  if (transaction.maxPriorityFeePerGas !== undefined) {\n    return new Error(`\"maxPriorityFeePerGas\" cannot be used with ${transaction.type} transaction`);\n  }\n\n  if (transaction.maxFeePerGas !== undefined) {\n    return new Error(`\"maxFeePerGas\" cannot be used with ${transaction.type} transaction`);\n  }\n}\n\nfunction validateValueTransfer(transaction) {\n  let error = checkValueTransferEssential(transaction);\n  if (error) return error;\n  error = validateNonFeeDelegated(transaction);\n  if (error) return error;\n  return validateNotAccountTransaction(transaction);\n}\n\nfunction validateFeeDelegatedValueTransfer(transaction) {\n  let error = checkValueTransferEssential(transaction);\n  if (error) return error;\n  error = validateFeeDelegated(transaction);\n  if (error) return error;\n  return validateNotAccountTransaction(transaction);\n}\n\nfunction validateFeeDelegatedValueTransferWithRatio(transaction) {\n  return validateFeeDelegatedValueTransfer(transaction);\n}\n\nfunction checkValueTransferMemoEssential(transaction) {\n  if (transaction.to === undefined) {\n    return new Error('\"to\" is missing');\n  }\n\n  if (!utils.isAddress(transaction.to)) {\n    return new Error(`Invalid address of to: ${transaction.to}`);\n  }\n\n  if (transaction.value === undefined) {\n    return new Error('\"value\" is missing');\n  }\n\n  if (transaction.input !== undefined && transaction.data !== undefined) {\n    return new Error(`\"data\" and \"input\" cannot be used as properties of transactions at the same time.`);\n  }\n\n  if (transaction.input === undefined && transaction.data === undefined) {\n    if (transaction.type.includes('TxType')) return new Error('\"input\" is missing');\n    return new Error('\"data\" is missing');\n  }\n\n  if (transaction.codeFormat !== undefined) {\n    return new Error(`\"codeFormat\" cannot be used with ${transaction.type} transaction`);\n  }\n\n  if (transaction.humanReadable !== undefined) {\n    return new Error(`\"humanReadable\" cannot be used with ${transaction.type} transaction`);\n  }\n\n  if (transaction.accessList !== undefined) {\n    return new Error(`\"accessList\" cannot be used with ${transaction.type} transaction`);\n  }\n\n  if (transaction.maxPriorityFeePerGas !== undefined) {\n    return new Error(`\"maxPriorityFeePerGas\" cannot be used with ${transaction.type} transaction`);\n  }\n\n  if (transaction.maxFeePerGas !== undefined) {\n    return new Error(`\"maxFeePerGas\" cannot be used with ${transaction.type} transaction`);\n  }\n}\n\nfunction validateValueTransferMemo(transaction) {\n  let error = checkValueTransferMemoEssential(transaction);\n  if (error) return error;\n  error = validateNonFeeDelegated(transaction);\n  if (error) return error;\n  return validateNotAccountTransaction(transaction);\n}\n\nfunction validateFeeDelegatedValueTransferMemo(transaction) {\n  let error = checkValueTransferMemoEssential(transaction);\n  if (error) return error;\n  error = validateFeeDelegated(transaction);\n  if (error) return error;\n  return validateNotAccountTransaction(transaction);\n}\n\nfunction validateFeeDelegatedValueTransferMemoWithRatio(transaction) {\n  return validateFeeDelegatedValueTransferMemo(transaction);\n}\n\nfunction validateAccountTransaction(transaction) {\n  if (transaction.data !== undefined) {\n    return new Error(`\"data\" cannot be used with ${transaction.type} transaction`);\n  }\n\n  if (transaction.input !== undefined) {\n    return new Error(`\"input\" cannot be used with ${transaction.type} transaction`);\n  }\n\n  if (transaction.codeFormat !== undefined) {\n    return new Error(`\"codeFormat\" cannot be used with ${transaction.type} transaction`);\n  }\n\n  if (transaction.humanReadable !== undefined) {\n    return new Error(`\"humanReadable\" cannot be used with ${transaction.type} transaction`);\n  }\n\n  if (transaction.accessList !== undefined) {\n    return new Error(`\"accessList\" cannot be used with ${transaction.type} transaction`);\n  }\n\n  if (transaction.maxPriorityFeePerGas !== undefined) {\n    return new Error(`\"maxPriorityFeePerGas\" cannot be used with ${transaction.type} transaction`);\n  }\n\n  if (transaction.maxFeePerGas !== undefined) {\n    return new Error(`\"maxFeePerGas\" cannot be used with ${transaction.type} transaction`);\n  } // TxTypeAccountUpdate, TxTypeFeeDelegatedAccountUpdate and TxTypeFeeDelegatedAccountUpdateWithRatio transaction use 'account' only\n\n\n  if (transaction.type.includes('TxType')) {\n    if (!transaction.account) return new Error(`Missing account information with ${transaction.type} transaction`);\n\n    if (transaction.key !== undefined) {\n      return new Error(`\"key\" cannot be used with ${transaction.type} transaction.`);\n    }\n\n    if (transaction.legacyKey !== undefined) {\n      return new Error(`\"legacyKey\" cannot be used with ${transaction.type} transaction.`);\n    }\n\n    if (transaction.publicKey) {\n      return new Error(`\"publicKey\" cannot be used with ${transaction.type} transaction.`);\n    }\n\n    if (transaction.multisig) {\n      return new Error(`\"multisig\" cannot be used with ${transaction.type} transaction.`);\n    }\n\n    if (transaction.roleTransactionKey) {\n      return new Error(`\"roleTransactionKey\" cannot be used with ${transaction.type} transaction.`);\n    }\n\n    if (transaction.roleAccountUpdateKey) {\n      return new Error(`\"roleAccountUpdateKey\" cannot be used with ${transaction.type} transaction.`);\n    }\n\n    if (transaction.roleFeePayerKey) {\n      return new Error(`\"roleFeePayerKey\" cannot be used with ${transaction.type} transaction.`);\n    }\n\n    if (transaction.failKey !== undefined) {\n      return new Error(`\"failKey\" cannot be used with ${transaction.type} transaction.`);\n    }\n\n    return;\n  }\n\n  if (transaction.account) return new Error(`\"account\" cannot be used with ${transaction.type} transaction`);\n  const duplicatedKeyInfo = `The key parameter to be used for ${transaction.type} is duplicated.`;\n\n  if (!transaction.key && transaction.legacyKey === undefined && !transaction.publicKey && !transaction.multisig && !transaction.roleTransactionKey && !transaction.roleAccountUpdateKey && !transaction.roleFeePayerKey && transaction.failKey === undefined) {\n    return new Error(`Missing key information with ${transaction.type} transaction`);\n  }\n\n  if (transaction.key) {\n    if (transaction.legacyKey !== undefined || transaction.publicKey || transaction.multisig || transaction.roleTransactionKey || transaction.roleAccountUpdateKey || transaction.roleFeePayerKey || transaction.failKey !== undefined) {\n      return new Error(duplicatedKeyInfo);\n    }\n  } else if (transaction.legacyKey !== undefined) {\n    if (transaction.publicKey || transaction.multisig || transaction.roleTransactionKey || transaction.roleAccountUpdateKey || transaction.roleFeePayerKey || transaction.failKey !== undefined) {\n      return new Error(duplicatedKeyInfo);\n    }\n  } else if (transaction.publicKey) {\n    if (transaction.multisig || transaction.roleTransactionKey || transaction.roleAccountUpdateKey || transaction.roleFeePayerKey || transaction.failKey !== undefined) {\n      return new Error(duplicatedKeyInfo);\n    }\n  } else if (transaction.multisig) {\n    if (transaction.roleTransactionKey || transaction.roleAccountUpdateKey || transaction.roleFeePayerKey || transaction.failKey !== undefined) {\n      return new Error(duplicatedKeyInfo);\n    }\n  } else if (transaction.failKey !== undefined) {\n    if (transaction.roleTransactionKey || transaction.roleAccountUpdateKey || transaction.roleFeePayerKey) {\n      return new Error(duplicatedKeyInfo);\n    }\n  }\n}\n\nfunction checkUpdateEssential(transaction) {\n  if (transaction.to !== undefined) {\n    return new Error(`\"to\" cannot be used with ${transaction.type} transaction`);\n  }\n\n  if (transaction.value !== undefined) {\n    return new Error(`\"value\" cannot be used with ${transaction.type} transaction`);\n  }\n}\n\nfunction validateAccountUpdate(transaction) {\n  let error = checkUpdateEssential(transaction);\n  if (error) return error;\n  error = validateAccountTransaction(transaction);\n  if (error) return error;\n  return validateNonFeeDelegated(transaction);\n}\n\nfunction validateFeeDelegatedAccountUpdate(transaction) {\n  let error = checkUpdateEssential(transaction);\n  if (error) return error;\n  error = validateAccountTransaction(transaction);\n  if (error) return error;\n  return validateFeeDelegated(transaction);\n}\n\nfunction validateFeeDelegatedAccountUpdateWithRatio(transaction) {\n  return validateFeeDelegatedAccountUpdate(transaction);\n}\n\nfunction checkDeployEssential(transaction) {\n  if (transaction.value === undefined && !transaction.type.includes('TxType')) {\n    return new Error('\"value\" is missing');\n  }\n\n  if (transaction.input !== undefined && transaction.data !== undefined && !transaction.type.includes('TxType')) {\n    return new Error(`\"data\" and \"input\" cannot be used as properties of transactions at the same time.`);\n  }\n\n  if (transaction.input === undefined && transaction.data === undefined) {\n    if (transaction.type.includes('TxType')) return new Error('\"input\" is missing');\n    return new Error('\"data\" is missing');\n  } // To handle null in `to` field\n\n\n  if (transaction.to && transaction.to !== '0x') {\n    return new Error(`\"to\" cannot be used with ${transaction.type} transaction`);\n  }\n\n  if (transaction.codeFormat !== undefined && !validateCodeFormat(transaction.codeFormat)) {\n    return new Error(`The codeFormat(${transaction.codeFormat}) is invalid.`);\n  }\n\n  if (transaction.humanReadable !== undefined && transaction.humanReadable === true) {\n    return new Error('HumanReadableAddress is not supported yet.');\n  }\n\n  if (transaction.accessList !== undefined) {\n    return new Error(`\"accessList\" cannot be used with ${transaction.type} transaction`);\n  }\n\n  if (transaction.maxPriorityFeePerGas !== undefined) {\n    return new Error(`\"maxPriorityFeePerGas\" cannot be used with ${transaction.type} transaction`);\n  }\n\n  if (transaction.maxFeePerGas !== undefined) {\n    return new Error(`\"maxFeePerGas\" cannot be used with ${transaction.type} transaction`);\n  }\n}\n\nfunction validateSmartContractDeploy(transaction) {\n  let error = checkDeployEssential(transaction);\n  if (error) return error;\n  error = validateNonFeeDelegated(transaction);\n  if (error) return error;\n  return validateNotAccountTransaction(transaction);\n}\n\nfunction validateFeeDelegatedSmartContractDeploy(transaction) {\n  let error = checkDeployEssential(transaction);\n  if (error) return error;\n  error = validateNotAccountTransaction(transaction);\n  if (error) return error;\n  return validateFeeDelegated(transaction);\n}\n\nfunction validateFeeDelegatedSmartContractDeployWithRatio(transaction) {\n  return validateFeeDelegatedSmartContractDeploy(transaction);\n}\n\nfunction checkExecutionEssential(transaction) {\n  if (transaction.to === undefined) {\n    return new Error('\"to\" is missing');\n  }\n\n  if (!utils.isAddress(transaction.to)) {\n    return new Error(`Invalid address of to: ${transaction.to}`);\n  }\n\n  if (transaction.input !== undefined && transaction.data !== undefined) {\n    return new Error(`\"data\" and \"input\" cannot be used as properties of transactions at the same time.`);\n  }\n\n  if (transaction.input === undefined && transaction.data === undefined) {\n    if (transaction.type.includes('TxType')) return new Error('\"input\" is missing');\n    return new Error('\"data\" is missing');\n  }\n\n  if (transaction.codeFormat !== undefined) {\n    return new Error(`\"codeFormat\" cannot be used with ${transaction.type} transaction`);\n  }\n\n  if (transaction.humanReadable !== undefined) {\n    return new Error(`\"humanReadable\" cannot be used with ${transaction.type} transaction`);\n  }\n\n  if (transaction.accessList !== undefined) {\n    return new Error(`\"accessList\" cannot be used with ${transaction.type} transaction`);\n  }\n\n  if (transaction.maxPriorityFeePerGas !== undefined) {\n    return new Error(`\"maxPriorityFeePerGas\" cannot be used with ${transaction.type} transaction`);\n  }\n\n  if (transaction.maxFeePerGas !== undefined) {\n    return new Error(`\"maxFeePerGas\" cannot be used with ${transaction.type} transaction`);\n  }\n}\n\nfunction validateSmartContractExecution(transaction) {\n  let error = checkExecutionEssential(transaction);\n  if (error) return error;\n  error = validateNonFeeDelegated(transaction);\n  if (error) return error;\n  return validateNotAccountTransaction(transaction);\n}\n\nfunction validateFeeDelegatedSmartContractExecution(transaction) {\n  let error = checkExecutionEssential(transaction);\n  if (error) return error;\n  error = validateNotAccountTransaction(transaction);\n  if (error) return error;\n  return validateFeeDelegated(transaction);\n}\n\nfunction validateFeeDelegatedSmartContractExecutionWithRatio(transaction) {\n  return validateFeeDelegatedSmartContractExecution(transaction);\n}\n\nfunction checkCacncelEssential(transaction) {\n  if (transaction.to !== undefined) {\n    return new Error(`\"to\" cannot be used with ${transaction.type} transaction`);\n  }\n\n  if (transaction.value !== undefined) {\n    return new Error(`\"value\" cannot be used with ${transaction.type} transaction`);\n  }\n\n  if (transaction.data !== undefined) {\n    return new Error(`\"data\" cannot be used with ${transaction.type} transaction`);\n  }\n\n  if (transaction.input !== undefined) {\n    return new Error(`\"input\" cannot be used with ${transaction.type} transaction`);\n  }\n\n  if (transaction.codeFormat !== undefined) {\n    return new Error(`\"codeFormat\" cannot be used with ${transaction.type} transaction`);\n  }\n\n  if (transaction.humanReadable !== undefined) {\n    return new Error(`\"humanReadable\" cannot be used with ${transaction.type} transaction`);\n  }\n\n  if (transaction.accessList !== undefined) {\n    return new Error(`\"accessList\" cannot be used with ${transaction.type} transaction`);\n  }\n\n  if (transaction.maxPriorityFeePerGas !== undefined) {\n    return new Error(`\"maxPriorityFeePerGas\" cannot be used with ${transaction.type} transaction`);\n  }\n\n  if (transaction.maxFeePerGas !== undefined) {\n    return new Error(`\"maxFeePerGas\" cannot be used with ${transaction.type} transaction`);\n  }\n}\n\nfunction validateCancel(transaction) {\n  let error = checkCacncelEssential(transaction);\n  if (error) return error;\n  error = validateNonFeeDelegated(transaction);\n  if (error) return error;\n  return validateNotAccountTransaction(transaction);\n}\n\nfunction validateFeeDelegatedCancel(transaction) {\n  let error = checkCacncelEssential(transaction);\n  if (error) return error;\n  error = validateNotAccountTransaction(transaction);\n  if (error) return error;\n  return validateFeeDelegated(transaction);\n}\n\nfunction validateFeeDelegatedCancelWithRatio(transaction) {\n  return validateFeeDelegatedCancel(transaction);\n}\n\nfunction checkChainDataAnchoringEssential(transaction) {\n  if (transaction.input !== undefined && transaction.data !== undefined) {\n    return new Error(`\"data\" and \"input\" cannot be used as properties of transactions at the same time.`);\n  }\n\n  if (transaction.input === undefined && transaction.data === undefined) {\n    if (transaction.anchoredData !== undefined) {\n      transaction.data = transaction.anchoredData;\n      delete transaction.anchoredData;\n    } else {\n      if (transaction.type.includes('TxType')) return new Error('\"input\" is missing');\n      return new Error('\"data\" is missing');\n    }\n  }\n\n  if (transaction.value !== undefined) {\n    return new Error(`\"value\" cannot be used with ${transaction.type} transaction`);\n  }\n\n  if (transaction.to !== undefined) {\n    return new Error(`\"to\" cannot be used with ${transaction.type} transaction`);\n  }\n\n  if (transaction.codeFormat !== undefined) {\n    return new Error(`\"codeFormat\" cannot be used with ${transaction.type} transaction`);\n  }\n\n  if (transaction.humanReadable !== undefined) {\n    return new Error(`\"humanReadable\" cannot be used with ${transaction.type} transaction`);\n  }\n\n  if (transaction.accessList !== undefined) {\n    return new Error(`\"accessList\" cannot be used with ${transaction.type} transaction`);\n  }\n\n  if (transaction.maxPriorityFeePerGas !== undefined) {\n    return new Error(`\"maxPriorityFeePerGas\" cannot be used with ${transaction.type} transaction`);\n  }\n\n  if (transaction.maxFeePerGas !== undefined) {\n    return new Error(`\"maxFeePerGas\" cannot be used with ${transaction.type} transaction`);\n  }\n}\n\nfunction validateChainDataAnchoring(transaction) {\n  let error = checkChainDataAnchoringEssential(transaction);\n  if (error) return error;\n  error = validateNonFeeDelegated(transaction);\n  if (error) return error;\n  return validateNotAccountTransaction(transaction);\n}\n\nfunction validateFeeDelegatedChainDataAnchoring(transaction) {\n  let error = checkChainDataAnchoringEssential(transaction);\n  if (error) return error;\n  error = validateNotAccountTransaction(transaction);\n  if (error) return error;\n  return validateFeeDelegated(transaction);\n}\n\nfunction validateFeeDelegatedChainDataAnchoringWithRatio(transaction) {\n  return validateFeeDelegatedChainDataAnchoring(transaction);\n}\n\nfunction validateEthereumAccessList(transaction) {\n  if (transaction.to === undefined && transaction.data === undefined && transaction.input === undefined) {\n    return new Error('contract creation without any data provided');\n  }\n\n  if (transaction.to && transaction.to !== '0x' && transaction.to !== '0x0000000000000000000000000000000000000000' && !utils.isAddress(transaction.to)) {\n    return new Error(`Invalid address of to: ${transaction.to}`);\n  }\n\n  if (transaction.codeFormat !== undefined) {\n    return new Error(`\"codeFormat\" cannot be used with ${transaction.type} transaction`);\n  }\n\n  if (transaction.humanReadable !== undefined) {\n    return new Error(`\"humanReadable\" cannot be used with ${transaction.type} transaction`);\n  }\n\n  if (transaction.maxPriorityFeePerGas !== undefined) {\n    return new Error(`\"maxPriorityFeePerGas\" cannot be used with ${transaction.type} transaction`);\n  }\n\n  if (transaction.maxFeePerGas !== undefined) {\n    return new Error(`\"maxFeePerGas\" cannot be used with ${transaction.type} transaction`);\n  }\n\n  const error = validateNonFeeDelegated(transaction);\n  if (error) return error;\n  return validateNotAccountTransaction(transaction);\n}\n\nfunction validateEthereumDynamicFee(transaction) {\n  if (transaction.to === undefined && transaction.data === undefined && transaction.input === undefined) {\n    return new Error('contract creation without any data provided');\n  }\n\n  if (transaction.to && transaction.to !== '0x' && transaction.to !== '0x0000000000000000000000000000000000000000' && !utils.isAddress(transaction.to)) {\n    return new Error(`Invalid address of to: ${transaction.to}`);\n  }\n\n  if (transaction.codeFormat !== undefined) {\n    return new Error(`\"codeFormat\" cannot be used with ${transaction.type} transaction`);\n  }\n\n  if (transaction.humanReadable !== undefined) {\n    return new Error(`\"humanReadable\" cannot be used with ${transaction.type} transaction`);\n  }\n\n  if (transaction.gasPrice !== undefined) {\n    return new Error(`\"gasPrice\" cannot be used with ${transaction.type} transaction. Please use the maxPriorityFeePerGas and maxFeePerGas.`);\n  }\n\n  const error = validateNonFeeDelegated(transaction);\n  if (error) return error;\n  return validateNotAccountTransaction(transaction);\n}\n\nmodule.exports = {\n  validateParams,\n  validateTxType,\n  validateCodeFormat\n};","map":{"version":3,"sources":["/home/lorancecall/Projects/vuejs-tutorial/testpage/node_modules/caver-js/packages/caver-core-helpers/src/validateFunction.js"],"names":["utils","require","TX_TYPE_STRING","isEthereumTxType","validateParams","tx","error","senderRawTransaction","feePayer","Error","isAddress","isValidateType","validateTxType","type","validateTxObjectWithType","undefined","from","gas","gasLimit","nonce","gasPrice","chainId","feePayerSignatures","isEmptySig","txType","TxTypeValueTransfer","TxTypeFeeDelegatedValueTransfer","TxTypeFeeDelegatedValueTransferWithRatio","TxTypeValueTransferMemo","TxTypeFeeDelegatedValueTransferMemo","TxTypeFeeDelegatedValueTransferMemoWithRatio","TxTypeAccountUpdate","TxTypeFeeDelegatedAccountUpdate","TxTypeFeeDelegatedAccountUpdateWithRatio","TxTypeSmartContractDeploy","TxTypeFeeDelegatedSmartContractDeploy","TxTypeFeeDelegatedSmartContractDeployWithRatio","TxTypeSmartContractExecution","TxTypeFeeDelegatedSmartContractExecution","TxTypeFeeDelegatedSmartContractExecutionWithRatio","TxTypeCancel","TxTypeFeeDelegatedCancel","TxTypeFeeDelegatedCancelWithRatio","TxTypeChainDataAnchoring","TxTypeFeeDelegatedChainDataAnchoring","TxTypeFeeDelegatedChainDataAnchoringWithRatio","TxTypeLegacyTransaction","TxTypeEthereumAccessList","TxTypeEthereumDynamicFee","validateCodeFormat","cf","validateLegacy","validateValueTransfer","validateFeeDelegatedValueTransfer","validateFeeDelegatedValueTransferWithRatio","validateValueTransferMemo","validateFeeDelegatedValueTransferMemo","validateFeeDelegatedValueTransferMemoWithRatio","validateAccountUpdate","validateFeeDelegatedAccountUpdate","validateFeeDelegatedAccountUpdateWithRatio","validateSmartContractDeploy","validateFeeDelegatedSmartContractDeploy","validateFeeDelegatedSmartContractDeployWithRatio","validateSmartContractExecution","validateFeeDelegatedSmartContractExecution","validateFeeDelegatedSmartContractExecutionWithRatio","validateCancel","validateFeeDelegatedCancel","validateFeeDelegatedCancelWithRatio","validateChainDataAnchoring","validateFeeDelegatedChainDataAnchoring","validateFeeDelegatedChainDataAnchoringWithRatio","validateEthereumAccessList","validateEthereumDynamicFee","transaction","to","data","input","codeFormat","humanReadable","accessList","maxPriorityFeePerGas","maxFeePerGas","validateNonFeeDelegated","validateNotAccountTransaction","feeRatio","validateFeeDelegated","includes","account","key","legacyKey","publicKey","multisig","roleTransactionKey","roleAccountUpdateKey","roleFeePayerKey","failKey","checkValueTransferEssential","value","checkValueTransferMemoEssential","validateAccountTransaction","duplicatedKeyInfo","checkUpdateEssential","checkDeployEssential","checkExecutionEssential","checkCacncelEssential","checkChainDataAnchoringEssential","anchoredData","module","exports"],"mappings":"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","sourcesContent":["/*\n    Copyright 2018 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/**\n * Should be called to check the parameters of transaction\n *\n * @method validateParams\n * @param {Object}\n * @return {Error}\n */\n\nconst utils = require('../../caver-utils')\nconst { TX_TYPE_STRING, isEthereumTxType } = require('../../caver-transaction/src/transactionHelper/transactionHelper')\n\nfunction validateParams(tx) {\n    let error\n\n    // validate for fee payer transaction format\n    if (tx.senderRawTransaction) {\n        if (!tx.feePayer || tx.feePayer === '0x' || tx.feePayer === '0x0000000000000000000000000000000000000000') {\n            error = new Error(`Invalid fee payer: ${tx.feePayer}`)\n        } else if (!utils.isAddress(tx.feePayer)) {\n            error = new Error(`Invalid address of fee payer: ${tx.feePayer}`)\n        }\n        return error\n    }\n\n    const isValidateType = validateTxType(tx.type)\n    if (!isValidateType) {\n        return new Error(`The transaction type [${tx.type}] is not supported`)\n    }\n\n    error = validateTxObjectWithType(tx)\n    if (error !== undefined) {\n        return error\n    }\n\n    if (!isEthereumTxType(tx.type) && !tx.from) {\n        error = new Error('\"from\" is missing')\n    } else if (tx.from) {\n        if (tx.from === '0x' || tx.from === '0x0000000000000000000000000000000000000000') {\n            if (!isEthereumTxType(tx.type)) {\n                error = new Error(`Invalid address of from: ${tx.from}`)\n            }\n        } else if (!utils.isAddress(tx.from)) {\n            error = new Error(`Invalid address of from: ${tx.from}`)\n        }\n    }\n\n    if (tx.gas === undefined && tx.gasLimit === undefined) {\n        error = new Error('\"gas\" is missing')\n    } else if (tx.nonce < 0 || tx.gas < 0 || tx.gasLimit < 0 || (tx.gasPrice !== undefined && tx.gasPrice < 0) || tx.chainId < 0) {\n        error = new Error('gas(or gasLimit), gasPrice, nonce or chainId is lower than 0')\n    }\n\n    // If feePayerSignatures is set in transaction object, feePayer also should be defined together.\n    if (tx.feePayerSignatures && !utils.isEmptySig(tx.feePayerSignatures)) {\n        if (!tx.feePayer || tx.feePayer === '0x' || tx.feePayer === '0x0000000000000000000000000000000000000000') {\n            error = new Error('\"feePayer\" is missing: feePayer must be defined with feePayerSignatures.')\n        } else if (!utils.isAddress(tx.feePayer)) {\n            error = new Error(`Invalid address of fee payer: ${tx.feePayer}`)\n        }\n    }\n\n    return error\n}\n\n/**\n * Should be called to check the type of transaction\n * Transaction type has to be checked if type is set.\n *\n * @method validateTypes\n * @param {string}\n * @return {bool}\n */\nfunction validateTxType(txType) {\n    if (!txType) {\n        return true\n    }\n    switch (txType) {\n        case 'VALUE_TRANSFER':\n        case 'FEE_DELEGATED_VALUE_TRANSFER':\n        case 'FEE_DELEGATED_VALUE_TRANSFER_WITH_RATIO':\n        case 'VALUE_TRANSFER_MEMO':\n        case 'FEE_DELEGATED_VALUE_TRANSFER_MEMO':\n        case 'FEE_DELEGATED_VALUE_TRANSFER_MEMO_WITH_RATIO':\n        case 'ACCOUNT_UPDATE':\n        case 'FEE_DELEGATED_ACCOUNT_UPDATE':\n        case 'FEE_DELEGATED_ACCOUNT_UPDATE_WITH_RATIO':\n        case 'SMART_CONTRACT_DEPLOY':\n        case 'FEE_DELEGATED_SMART_CONTRACT_DEPLOY':\n        case 'FEE_DELEGATED_SMART_CONTRACT_DEPLOY_WITH_RATIO':\n        case 'SMART_CONTRACT_EXECUTION':\n        case 'FEE_DELEGATED_SMART_CONTRACT_EXECUTION':\n        case 'FEE_DELEGATED_SMART_CONTRACT_EXECUTION_WITH_RATIO':\n        case 'CANCEL':\n        case 'FEE_DELEGATED_CANCEL':\n        case 'FEE_DELEGATED_CANCEL_WITH_RATIO':\n        case 'CHAIN_DATA_ANCHORING':\n        case 'LEGACY':\n        case TX_TYPE_STRING.TxTypeValueTransfer:\n        case TX_TYPE_STRING.TxTypeFeeDelegatedValueTransfer:\n        case TX_TYPE_STRING.TxTypeFeeDelegatedValueTransferWithRatio:\n        case TX_TYPE_STRING.TxTypeValueTransferMemo:\n        case TX_TYPE_STRING.TxTypeFeeDelegatedValueTransferMemo:\n        case TX_TYPE_STRING.TxTypeFeeDelegatedValueTransferMemoWithRatio:\n        case TX_TYPE_STRING.TxTypeAccountUpdate:\n        case TX_TYPE_STRING.TxTypeFeeDelegatedAccountUpdate:\n        case TX_TYPE_STRING.TxTypeFeeDelegatedAccountUpdateWithRatio:\n        case TX_TYPE_STRING.TxTypeSmartContractDeploy:\n        case TX_TYPE_STRING.TxTypeFeeDelegatedSmartContractDeploy:\n        case TX_TYPE_STRING.TxTypeFeeDelegatedSmartContractDeployWithRatio:\n        case TX_TYPE_STRING.TxTypeSmartContractExecution:\n        case TX_TYPE_STRING.TxTypeFeeDelegatedSmartContractExecution:\n        case TX_TYPE_STRING.TxTypeFeeDelegatedSmartContractExecutionWithRatio:\n        case TX_TYPE_STRING.TxTypeCancel:\n        case TX_TYPE_STRING.TxTypeFeeDelegatedCancel:\n        case TX_TYPE_STRING.TxTypeFeeDelegatedCancelWithRatio:\n        case TX_TYPE_STRING.TxTypeChainDataAnchoring:\n        case TX_TYPE_STRING.TxTypeFeeDelegatedChainDataAnchoring:\n        case TX_TYPE_STRING.TxTypeFeeDelegatedChainDataAnchoringWithRatio:\n        case TX_TYPE_STRING.TxTypeLegacyTransaction:\n        case TX_TYPE_STRING.TxTypeEthereumAccessList:\n        case TX_TYPE_STRING.TxTypeEthereumDynamicFee:\n            return true\n    }\n    return false\n}\n\n/**\n * Should be called to check codeFormat\n *\n * @method validateTypes\n * @param {string}\n * @return {bool}\n */\nfunction validateCodeFormat(cf) {\n    if (cf === undefined) {\n        return true\n    }\n\n    switch (cf) {\n        case 0:\n        case 'EVM':\n        case '0x':\n        case '0x0':\n            return true\n    }\n    return false\n}\n\nfunction validateTxObjectWithType(tx) {\n    if (tx.type === undefined) {\n        return validateLegacy(tx)\n    }\n    switch (tx.type) {\n        case 'LEGACY':\n        case TX_TYPE_STRING.TxTypeLegacyTransaction:\n            return validateLegacy(tx)\n        case 'VALUE_TRANSFER':\n        case TX_TYPE_STRING.TxTypeValueTransfer:\n            return validateValueTransfer(tx)\n        case 'FEE_DELEGATED_VALUE_TRANSFER':\n        case TX_TYPE_STRING.TxTypeFeeDelegatedValueTransfer:\n            return validateFeeDelegatedValueTransfer(tx)\n        case 'FEE_DELEGATED_VALUE_TRANSFER_WITH_RATIO':\n        case TX_TYPE_STRING.TxTypeFeeDelegatedValueTransferWithRatio:\n            return validateFeeDelegatedValueTransferWithRatio(tx)\n        case 'VALUE_TRANSFER_MEMO':\n        case TX_TYPE_STRING.TxTypeValueTransferMemo:\n            return validateValueTransferMemo(tx)\n        case 'FEE_DELEGATED_VALUE_TRANSFER_MEMO':\n        case TX_TYPE_STRING.TxTypeFeeDelegatedValueTransferMemo:\n            return validateFeeDelegatedValueTransferMemo(tx)\n        case 'FEE_DELEGATED_VALUE_TRANSFER_MEMO_WITH_RATIO':\n        case TX_TYPE_STRING.TxTypeFeeDelegatedValueTransferMemoWithRatio:\n            return validateFeeDelegatedValueTransferMemoWithRatio(tx)\n        case 'ACCOUNT_UPDATE':\n        case TX_TYPE_STRING.TxTypeAccountUpdate:\n            return validateAccountUpdate(tx)\n        case 'FEE_DELEGATED_ACCOUNT_UPDATE':\n        case TX_TYPE_STRING.TxTypeFeeDelegatedAccountUpdate:\n            return validateFeeDelegatedAccountUpdate(tx)\n        case 'FEE_DELEGATED_ACCOUNT_UPDATE_WITH_RATIO':\n        case TX_TYPE_STRING.TxTypeFeeDelegatedAccountUpdateWithRatio:\n            return validateFeeDelegatedAccountUpdateWithRatio(tx)\n        case 'SMART_CONTRACT_DEPLOY':\n        case TX_TYPE_STRING.TxTypeSmartContractDeploy:\n            return validateSmartContractDeploy(tx)\n        case 'FEE_DELEGATED_SMART_CONTRACT_DEPLOY':\n        case TX_TYPE_STRING.TxTypeFeeDelegatedSmartContractDeploy:\n            return validateFeeDelegatedSmartContractDeploy(tx)\n        case 'FEE_DELEGATED_SMART_CONTRACT_DEPLOY_WITH_RATIO':\n        case TX_TYPE_STRING.TxTypeFeeDelegatedSmartContractDeployWithRatio:\n            return validateFeeDelegatedSmartContractDeployWithRatio(tx)\n        case 'SMART_CONTRACT_EXECUTION':\n        case TX_TYPE_STRING.TxTypeSmartContractExecution:\n            return validateSmartContractExecution(tx)\n        case 'FEE_DELEGATED_SMART_CONTRACT_EXECUTION':\n        case TX_TYPE_STRING.TxTypeFeeDelegatedSmartContractExecution:\n            return validateFeeDelegatedSmartContractExecution(tx)\n        case 'FEE_DELEGATED_SMART_CONTRACT_EXECUTION_WITH_RATIO':\n        case TX_TYPE_STRING.TxTypeFeeDelegatedSmartContractExecutionWithRatio:\n            return validateFeeDelegatedSmartContractExecutionWithRatio(tx)\n        case 'CANCEL':\n        case TX_TYPE_STRING.TxTypeCancel:\n            return validateCancel(tx)\n        case 'FEE_DELEGATED_CANCEL':\n        case TX_TYPE_STRING.TxTypeFeeDelegatedCancel:\n            return validateFeeDelegatedCancel(tx)\n        case 'FEE_DELEGATED_CANCEL_WITH_RATIO':\n        case TX_TYPE_STRING.TxTypeFeeDelegatedCancelWithRatio:\n            return validateFeeDelegatedCancelWithRatio(tx)\n        case 'CHAIN_DATA_ANCHORING':\n        case TX_TYPE_STRING.TxTypeChainDataAnchoring:\n            return validateChainDataAnchoring(tx)\n        case TX_TYPE_STRING.TxTypeFeeDelegatedChainDataAnchoring:\n            return validateFeeDelegatedChainDataAnchoring(tx)\n        case TX_TYPE_STRING.TxTypeFeeDelegatedChainDataAnchoringWithRatio:\n            return validateFeeDelegatedChainDataAnchoringWithRatio(tx)\n        case TX_TYPE_STRING.TxTypeEthereumAccessList:\n            return validateEthereumAccessList(tx)\n        case TX_TYPE_STRING.TxTypeEthereumDynamicFee:\n            return validateEthereumDynamicFee(tx)\n    }\n    return undefined\n}\n\nfunction validateLegacy(transaction) {\n    if (transaction.to === undefined && transaction.data === undefined && transaction.input === undefined) {\n        return new Error('contract creation without any data provided')\n    }\n\n    if (\n        transaction.to &&\n        transaction.to !== '0x' &&\n        transaction.to !== '0x0000000000000000000000000000000000000000' &&\n        !utils.isAddress(transaction.to)\n    ) {\n        return new Error(`Invalid address of to: ${transaction.to}`)\n    }\n\n    if (transaction.codeFormat !== undefined) {\n        return new Error(`\"codeFormat\" cannot be used with ${transaction.type} transaction`)\n    }\n\n    if (transaction.humanReadable !== undefined) {\n        return new Error(`\"humanReadable\" cannot be used with ${transaction.type} transaction`)\n    }\n\n    if (transaction.accessList !== undefined) {\n        return new Error(`\"accessList\" cannot be used with ${transaction.type} transaction`)\n    }\n\n    if (transaction.maxPriorityFeePerGas !== undefined) {\n        return new Error(`\"maxPriorityFeePerGas\" cannot be used with ${transaction.type} transaction`)\n    }\n\n    if (transaction.maxFeePerGas !== undefined) {\n        return new Error(`\"maxFeePerGas\" cannot be used with ${transaction.type} transaction`)\n    }\n\n    const error = validateNonFeeDelegated(transaction)\n    if (error) return error\n\n    return validateNotAccountTransaction(transaction)\n}\n\nfunction validateNonFeeDelegated(transaction) {\n    const type = transaction.type ? transaction.type : 'LEGACY'\n    if (transaction.feePayer !== undefined) {\n        return new Error(`\"feePayer\" cannot be used with ${type} transaction`)\n    }\n    if (transaction.feeRatio !== undefined) {\n        return new Error(`\"feeRatio\" cannot be used with ${type} transaction`)\n    }\n    if (transaction.feePayerSignatures !== undefined) {\n        return new Error(`\"feePayerSignatures\" cannot be used with ${type} transaction`)\n    }\n}\n\nfunction validateFeeDelegated(transaction) {\n    if (transaction.type.includes('WITH_RATIO') || transaction.type.includes('WithRatio')) {\n        if (transaction.feeRatio === undefined) {\n            return new Error('\"feeRatio\" is missing')\n        }\n    } else if (transaction.feeRatio !== undefined) {\n        return new Error(`\"feeRatio\" cannot be used with ${transaction.type} transaction`)\n    }\n}\n\nfunction validateNotAccountTransaction(transaction) {\n    const type = transaction.type ? transaction.type : 'LEGACY'\n    if (transaction.account !== undefined) {\n        return new Error(`\"account\" cannot be used with ${type} transaction`)\n    }\n    if (transaction.key !== undefined) {\n        return new Error(`\"key\" cannot be used with ${type} transaction`)\n    }\n    if (transaction.legacyKey !== undefined) {\n        return new Error(`\"legacyKey\" cannot be used with ${type} transaction`)\n    }\n    if (transaction.publicKey !== undefined) {\n        return new Error(`\"publicKey\" cannot be used with ${type} transaction`)\n    }\n    if (transaction.multisig !== undefined) {\n        return new Error(`\"multisig\" cannot be used with ${type} transaction`)\n    }\n    if (transaction.roleTransactionKey !== undefined) {\n        return new Error(`\"roleTransactionKey\" cannot be used with ${type} transaction`)\n    }\n    if (transaction.roleAccountUpdateKey !== undefined) {\n        return new Error(`\"roleAccountUpdateKey\" cannot be used with ${type} transaction`)\n    }\n    if (transaction.roleFeePayerKey !== undefined) {\n        return new Error(`\"roleFeePayerKey\" cannot be used with ${type} transaction`)\n    }\n    if (transaction.failKey !== undefined) {\n        return new Error(`\"failKey\" cannot be used with ${type} transaction`)\n    }\n}\n\nfunction checkValueTransferEssential(transaction) {\n    if (transaction.to === undefined) {\n        return new Error('\"to\" is missing')\n    }\n    if (!utils.isAddress(transaction.to)) {\n        return new Error(`Invalid address of to: ${transaction.to}`)\n    }\n    if (transaction.value === undefined) {\n        return new Error('\"value\" is missing')\n    }\n    if (transaction.codeFormat !== undefined) {\n        return new Error(`\"codeFormat\" cannot be used with ${transaction.type} transaction`)\n    }\n    if (transaction.data !== undefined) {\n        return new Error(`\"data\" cannot be used with ${transaction.type} transaction`)\n    }\n    if (transaction.input !== undefined) {\n        return new Error(`\"input\" cannot be used with ${transaction.type} transaction`)\n    }\n    if (transaction.humanReadable !== undefined) {\n        return new Error(`\"humanReadable\" cannot be used with ${transaction.type} transaction`)\n    }\n    if (transaction.accessList !== undefined) {\n        return new Error(`\"accessList\" cannot be used with ${transaction.type} transaction`)\n    }\n    if (transaction.maxPriorityFeePerGas !== undefined) {\n        return new Error(`\"maxPriorityFeePerGas\" cannot be used with ${transaction.type} transaction`)\n    }\n    if (transaction.maxFeePerGas !== undefined) {\n        return new Error(`\"maxFeePerGas\" cannot be used with ${transaction.type} transaction`)\n    }\n}\n\nfunction validateValueTransfer(transaction) {\n    let error = checkValueTransferEssential(transaction)\n    if (error) return error\n\n    error = validateNonFeeDelegated(transaction)\n    if (error) return error\n\n    return validateNotAccountTransaction(transaction)\n}\n\nfunction validateFeeDelegatedValueTransfer(transaction) {\n    let error = checkValueTransferEssential(transaction)\n    if (error) return error\n\n    error = validateFeeDelegated(transaction)\n    if (error) return error\n\n    return validateNotAccountTransaction(transaction)\n}\n\nfunction validateFeeDelegatedValueTransferWithRatio(transaction) {\n    return validateFeeDelegatedValueTransfer(transaction)\n}\n\nfunction checkValueTransferMemoEssential(transaction) {\n    if (transaction.to === undefined) {\n        return new Error('\"to\" is missing')\n    }\n    if (!utils.isAddress(transaction.to)) {\n        return new Error(`Invalid address of to: ${transaction.to}`)\n    }\n    if (transaction.value === undefined) {\n        return new Error('\"value\" is missing')\n    }\n\n    if (transaction.input !== undefined && transaction.data !== undefined) {\n        return new Error(`\"data\" and \"input\" cannot be used as properties of transactions at the same time.`)\n    }\n    if (transaction.input === undefined && transaction.data === undefined) {\n        if (transaction.type.includes('TxType')) return new Error('\"input\" is missing')\n        return new Error('\"data\" is missing')\n    }\n\n    if (transaction.codeFormat !== undefined) {\n        return new Error(`\"codeFormat\" cannot be used with ${transaction.type} transaction`)\n    }\n    if (transaction.humanReadable !== undefined) {\n        return new Error(`\"humanReadable\" cannot be used with ${transaction.type} transaction`)\n    }\n    if (transaction.accessList !== undefined) {\n        return new Error(`\"accessList\" cannot be used with ${transaction.type} transaction`)\n    }\n    if (transaction.maxPriorityFeePerGas !== undefined) {\n        return new Error(`\"maxPriorityFeePerGas\" cannot be used with ${transaction.type} transaction`)\n    }\n    if (transaction.maxFeePerGas !== undefined) {\n        return new Error(`\"maxFeePerGas\" cannot be used with ${transaction.type} transaction`)\n    }\n}\n\nfunction validateValueTransferMemo(transaction) {\n    let error = checkValueTransferMemoEssential(transaction)\n    if (error) return error\n\n    error = validateNonFeeDelegated(transaction)\n    if (error) return error\n\n    return validateNotAccountTransaction(transaction)\n}\n\nfunction validateFeeDelegatedValueTransferMemo(transaction) {\n    let error = checkValueTransferMemoEssential(transaction)\n    if (error) return error\n\n    error = validateFeeDelegated(transaction)\n    if (error) return error\n\n    return validateNotAccountTransaction(transaction)\n}\n\nfunction validateFeeDelegatedValueTransferMemoWithRatio(transaction) {\n    return validateFeeDelegatedValueTransferMemo(transaction)\n}\n\nfunction validateAccountTransaction(transaction) {\n    if (transaction.data !== undefined) {\n        return new Error(`\"data\" cannot be used with ${transaction.type} transaction`)\n    }\n    if (transaction.input !== undefined) {\n        return new Error(`\"input\" cannot be used with ${transaction.type} transaction`)\n    }\n    if (transaction.codeFormat !== undefined) {\n        return new Error(`\"codeFormat\" cannot be used with ${transaction.type} transaction`)\n    }\n    if (transaction.humanReadable !== undefined) {\n        return new Error(`\"humanReadable\" cannot be used with ${transaction.type} transaction`)\n    }\n    if (transaction.accessList !== undefined) {\n        return new Error(`\"accessList\" cannot be used with ${transaction.type} transaction`)\n    }\n    if (transaction.maxPriorityFeePerGas !== undefined) {\n        return new Error(`\"maxPriorityFeePerGas\" cannot be used with ${transaction.type} transaction`)\n    }\n    if (transaction.maxFeePerGas !== undefined) {\n        return new Error(`\"maxFeePerGas\" cannot be used with ${transaction.type} transaction`)\n    }\n\n    // TxTypeAccountUpdate, TxTypeFeeDelegatedAccountUpdate and TxTypeFeeDelegatedAccountUpdateWithRatio transaction use 'account' only\n    if (transaction.type.includes('TxType')) {\n        if (!transaction.account) return new Error(`Missing account information with ${transaction.type} transaction`)\n\n        if (transaction.key !== undefined) {\n            return new Error(`\"key\" cannot be used with ${transaction.type} transaction.`)\n        }\n        if (transaction.legacyKey !== undefined) {\n            return new Error(`\"legacyKey\" cannot be used with ${transaction.type} transaction.`)\n        }\n        if (transaction.publicKey) {\n            return new Error(`\"publicKey\" cannot be used with ${transaction.type} transaction.`)\n        }\n        if (transaction.multisig) {\n            return new Error(`\"multisig\" cannot be used with ${transaction.type} transaction.`)\n        }\n        if (transaction.roleTransactionKey) {\n            return new Error(`\"roleTransactionKey\" cannot be used with ${transaction.type} transaction.`)\n        }\n        if (transaction.roleAccountUpdateKey) {\n            return new Error(`\"roleAccountUpdateKey\" cannot be used with ${transaction.type} transaction.`)\n        }\n        if (transaction.roleFeePayerKey) {\n            return new Error(`\"roleFeePayerKey\" cannot be used with ${transaction.type} transaction.`)\n        }\n        if (transaction.failKey !== undefined) {\n            return new Error(`\"failKey\" cannot be used with ${transaction.type} transaction.`)\n        }\n\n        return\n    }\n\n    if (transaction.account) return new Error(`\"account\" cannot be used with ${transaction.type} transaction`)\n\n    const duplicatedKeyInfo = `The key parameter to be used for ${transaction.type} is duplicated.`\n    if (\n        !transaction.key &&\n        transaction.legacyKey === undefined &&\n        !transaction.publicKey &&\n        !transaction.multisig &&\n        !transaction.roleTransactionKey &&\n        !transaction.roleAccountUpdateKey &&\n        !transaction.roleFeePayerKey &&\n        transaction.failKey === undefined\n    ) {\n        return new Error(`Missing key information with ${transaction.type} transaction`)\n    }\n    if (transaction.key) {\n        if (\n            transaction.legacyKey !== undefined ||\n            transaction.publicKey ||\n            transaction.multisig ||\n            transaction.roleTransactionKey ||\n            transaction.roleAccountUpdateKey ||\n            transaction.roleFeePayerKey ||\n            transaction.failKey !== undefined\n        ) {\n            return new Error(duplicatedKeyInfo)\n        }\n    } else if (transaction.legacyKey !== undefined) {\n        if (\n            transaction.publicKey ||\n            transaction.multisig ||\n            transaction.roleTransactionKey ||\n            transaction.roleAccountUpdateKey ||\n            transaction.roleFeePayerKey ||\n            transaction.failKey !== undefined\n        ) {\n            return new Error(duplicatedKeyInfo)\n        }\n    } else if (transaction.publicKey) {\n        if (\n            transaction.multisig ||\n            transaction.roleTransactionKey ||\n            transaction.roleAccountUpdateKey ||\n            transaction.roleFeePayerKey ||\n            transaction.failKey !== undefined\n        ) {\n            return new Error(duplicatedKeyInfo)\n        }\n    } else if (transaction.multisig) {\n        if (\n            transaction.roleTransactionKey ||\n            transaction.roleAccountUpdateKey ||\n            transaction.roleFeePayerKey ||\n            transaction.failKey !== undefined\n        ) {\n            return new Error(duplicatedKeyInfo)\n        }\n    } else if (transaction.failKey !== undefined) {\n        if (transaction.roleTransactionKey || transaction.roleAccountUpdateKey || transaction.roleFeePayerKey) {\n            return new Error(duplicatedKeyInfo)\n        }\n    }\n}\n\nfunction checkUpdateEssential(transaction) {\n    if (transaction.to !== undefined) {\n        return new Error(`\"to\" cannot be used with ${transaction.type} transaction`)\n    }\n    if (transaction.value !== undefined) {\n        return new Error(`\"value\" cannot be used with ${transaction.type} transaction`)\n    }\n}\n\nfunction validateAccountUpdate(transaction) {\n    let error = checkUpdateEssential(transaction)\n    if (error) return error\n\n    error = validateAccountTransaction(transaction)\n    if (error) return error\n\n    return validateNonFeeDelegated(transaction)\n}\n\nfunction validateFeeDelegatedAccountUpdate(transaction) {\n    let error = checkUpdateEssential(transaction)\n    if (error) return error\n\n    error = validateAccountTransaction(transaction)\n    if (error) return error\n\n    return validateFeeDelegated(transaction)\n}\n\nfunction validateFeeDelegatedAccountUpdateWithRatio(transaction) {\n    return validateFeeDelegatedAccountUpdate(transaction)\n}\n\nfunction checkDeployEssential(transaction) {\n    if (transaction.value === undefined && !transaction.type.includes('TxType')) {\n        return new Error('\"value\" is missing')\n    }\n\n    if (transaction.input !== undefined && transaction.data !== undefined && !transaction.type.includes('TxType')) {\n        return new Error(`\"data\" and \"input\" cannot be used as properties of transactions at the same time.`)\n    }\n    if (transaction.input === undefined && transaction.data === undefined) {\n        if (transaction.type.includes('TxType')) return new Error('\"input\" is missing')\n        return new Error('\"data\" is missing')\n    }\n\n    // To handle null in `to` field\n    if (transaction.to && transaction.to !== '0x') {\n        return new Error(`\"to\" cannot be used with ${transaction.type} transaction`)\n    }\n    if (transaction.codeFormat !== undefined && !validateCodeFormat(transaction.codeFormat)) {\n        return new Error(`The codeFormat(${transaction.codeFormat}) is invalid.`)\n    }\n    if (transaction.humanReadable !== undefined && transaction.humanReadable === true) {\n        return new Error('HumanReadableAddress is not supported yet.')\n    }\n    if (transaction.accessList !== undefined) {\n        return new Error(`\"accessList\" cannot be used with ${transaction.type} transaction`)\n    }\n    if (transaction.maxPriorityFeePerGas !== undefined) {\n        return new Error(`\"maxPriorityFeePerGas\" cannot be used with ${transaction.type} transaction`)\n    }\n    if (transaction.maxFeePerGas !== undefined) {\n        return new Error(`\"maxFeePerGas\" cannot be used with ${transaction.type} transaction`)\n    }\n}\n\nfunction validateSmartContractDeploy(transaction) {\n    let error = checkDeployEssential(transaction)\n    if (error) return error\n\n    error = validateNonFeeDelegated(transaction)\n    if (error) return error\n\n    return validateNotAccountTransaction(transaction)\n}\n\nfunction validateFeeDelegatedSmartContractDeploy(transaction) {\n    let error = checkDeployEssential(transaction)\n    if (error) return error\n\n    error = validateNotAccountTransaction(transaction)\n    if (error) return error\n\n    return validateFeeDelegated(transaction)\n}\n\nfunction validateFeeDelegatedSmartContractDeployWithRatio(transaction) {\n    return validateFeeDelegatedSmartContractDeploy(transaction)\n}\n\nfunction checkExecutionEssential(transaction) {\n    if (transaction.to === undefined) {\n        return new Error('\"to\" is missing')\n    }\n    if (!utils.isAddress(transaction.to)) {\n        return new Error(`Invalid address of to: ${transaction.to}`)\n    }\n\n    if (transaction.input !== undefined && transaction.data !== undefined) {\n        return new Error(`\"data\" and \"input\" cannot be used as properties of transactions at the same time.`)\n    }\n    if (transaction.input === undefined && transaction.data === undefined) {\n        if (transaction.type.includes('TxType')) return new Error('\"input\" is missing')\n        return new Error('\"data\" is missing')\n    }\n\n    if (transaction.codeFormat !== undefined) {\n        return new Error(`\"codeFormat\" cannot be used with ${transaction.type} transaction`)\n    }\n    if (transaction.humanReadable !== undefined) {\n        return new Error(`\"humanReadable\" cannot be used with ${transaction.type} transaction`)\n    }\n    if (transaction.accessList !== undefined) {\n        return new Error(`\"accessList\" cannot be used with ${transaction.type} transaction`)\n    }\n    if (transaction.maxPriorityFeePerGas !== undefined) {\n        return new Error(`\"maxPriorityFeePerGas\" cannot be used with ${transaction.type} transaction`)\n    }\n    if (transaction.maxFeePerGas !== undefined) {\n        return new Error(`\"maxFeePerGas\" cannot be used with ${transaction.type} transaction`)\n    }\n}\n\nfunction validateSmartContractExecution(transaction) {\n    let error = checkExecutionEssential(transaction)\n    if (error) return error\n\n    error = validateNonFeeDelegated(transaction)\n    if (error) return error\n\n    return validateNotAccountTransaction(transaction)\n}\n\nfunction validateFeeDelegatedSmartContractExecution(transaction) {\n    let error = checkExecutionEssential(transaction)\n    if (error) return error\n\n    error = validateNotAccountTransaction(transaction)\n    if (error) return error\n\n    return validateFeeDelegated(transaction)\n}\n\nfunction validateFeeDelegatedSmartContractExecutionWithRatio(transaction) {\n    return validateFeeDelegatedSmartContractExecution(transaction)\n}\n\nfunction checkCacncelEssential(transaction) {\n    if (transaction.to !== undefined) {\n        return new Error(`\"to\" cannot be used with ${transaction.type} transaction`)\n    }\n    if (transaction.value !== undefined) {\n        return new Error(`\"value\" cannot be used with ${transaction.type} transaction`)\n    }\n    if (transaction.data !== undefined) {\n        return new Error(`\"data\" cannot be used with ${transaction.type} transaction`)\n    }\n    if (transaction.input !== undefined) {\n        return new Error(`\"input\" cannot be used with ${transaction.type} transaction`)\n    }\n    if (transaction.codeFormat !== undefined) {\n        return new Error(`\"codeFormat\" cannot be used with ${transaction.type} transaction`)\n    }\n    if (transaction.humanReadable !== undefined) {\n        return new Error(`\"humanReadable\" cannot be used with ${transaction.type} transaction`)\n    }\n    if (transaction.accessList !== undefined) {\n        return new Error(`\"accessList\" cannot be used with ${transaction.type} transaction`)\n    }\n    if (transaction.maxPriorityFeePerGas !== undefined) {\n        return new Error(`\"maxPriorityFeePerGas\" cannot be used with ${transaction.type} transaction`)\n    }\n    if (transaction.maxFeePerGas !== undefined) {\n        return new Error(`\"maxFeePerGas\" cannot be used with ${transaction.type} transaction`)\n    }\n}\n\nfunction validateCancel(transaction) {\n    let error = checkCacncelEssential(transaction)\n    if (error) return error\n\n    error = validateNonFeeDelegated(transaction)\n    if (error) return error\n\n    return validateNotAccountTransaction(transaction)\n}\n\nfunction validateFeeDelegatedCancel(transaction) {\n    let error = checkCacncelEssential(transaction)\n    if (error) return error\n\n    error = validateNotAccountTransaction(transaction)\n    if (error) return error\n\n    return validateFeeDelegated(transaction)\n}\n\nfunction validateFeeDelegatedCancelWithRatio(transaction) {\n    return validateFeeDelegatedCancel(transaction)\n}\n\nfunction checkChainDataAnchoringEssential(transaction) {\n    if (transaction.input !== undefined && transaction.data !== undefined) {\n        return new Error(`\"data\" and \"input\" cannot be used as properties of transactions at the same time.`)\n    }\n    if (transaction.input === undefined && transaction.data === undefined) {\n        if (transaction.anchoredData !== undefined) {\n            transaction.data = transaction.anchoredData\n            delete transaction.anchoredData\n        } else {\n            if (transaction.type.includes('TxType')) return new Error('\"input\" is missing')\n            return new Error('\"data\" is missing')\n        }\n    }\n\n    if (transaction.value !== undefined) {\n        return new Error(`\"value\" cannot be used with ${transaction.type} transaction`)\n    }\n    if (transaction.to !== undefined) {\n        return new Error(`\"to\" cannot be used with ${transaction.type} transaction`)\n    }\n    if (transaction.codeFormat !== undefined) {\n        return new Error(`\"codeFormat\" cannot be used with ${transaction.type} transaction`)\n    }\n    if (transaction.humanReadable !== undefined) {\n        return new Error(`\"humanReadable\" cannot be used with ${transaction.type} transaction`)\n    }\n    if (transaction.accessList !== undefined) {\n        return new Error(`\"accessList\" cannot be used with ${transaction.type} transaction`)\n    }\n    if (transaction.maxPriorityFeePerGas !== undefined) {\n        return new Error(`\"maxPriorityFeePerGas\" cannot be used with ${transaction.type} transaction`)\n    }\n    if (transaction.maxFeePerGas !== undefined) {\n        return new Error(`\"maxFeePerGas\" cannot be used with ${transaction.type} transaction`)\n    }\n}\n\nfunction validateChainDataAnchoring(transaction) {\n    let error = checkChainDataAnchoringEssential(transaction)\n    if (error) return error\n\n    error = validateNonFeeDelegated(transaction)\n    if (error) return error\n\n    return validateNotAccountTransaction(transaction)\n}\n\nfunction validateFeeDelegatedChainDataAnchoring(transaction) {\n    let error = checkChainDataAnchoringEssential(transaction)\n    if (error) return error\n\n    error = validateNotAccountTransaction(transaction)\n    if (error) return error\n\n    return validateFeeDelegated(transaction)\n}\n\nfunction validateFeeDelegatedChainDataAnchoringWithRatio(transaction) {\n    return validateFeeDelegatedChainDataAnchoring(transaction)\n}\n\nfunction validateEthereumAccessList(transaction) {\n    if (transaction.to === undefined && transaction.data === undefined && transaction.input === undefined) {\n        return new Error('contract creation without any data provided')\n    }\n\n    if (\n        transaction.to &&\n        transaction.to !== '0x' &&\n        transaction.to !== '0x0000000000000000000000000000000000000000' &&\n        !utils.isAddress(transaction.to)\n    ) {\n        return new Error(`Invalid address of to: ${transaction.to}`)\n    }\n\n    if (transaction.codeFormat !== undefined) {\n        return new Error(`\"codeFormat\" cannot be used with ${transaction.type} transaction`)\n    }\n\n    if (transaction.humanReadable !== undefined) {\n        return new Error(`\"humanReadable\" cannot be used with ${transaction.type} transaction`)\n    }\n\n    if (transaction.maxPriorityFeePerGas !== undefined) {\n        return new Error(`\"maxPriorityFeePerGas\" cannot be used with ${transaction.type} transaction`)\n    }\n\n    if (transaction.maxFeePerGas !== undefined) {\n        return new Error(`\"maxFeePerGas\" cannot be used with ${transaction.type} transaction`)\n    }\n\n    const error = validateNonFeeDelegated(transaction)\n    if (error) return error\n\n    return validateNotAccountTransaction(transaction)\n}\n\nfunction validateEthereumDynamicFee(transaction) {\n    if (transaction.to === undefined && transaction.data === undefined && transaction.input === undefined) {\n        return new Error('contract creation without any data provided')\n    }\n\n    if (\n        transaction.to &&\n        transaction.to !== '0x' &&\n        transaction.to !== '0x0000000000000000000000000000000000000000' &&\n        !utils.isAddress(transaction.to)\n    ) {\n        return new Error(`Invalid address of to: ${transaction.to}`)\n    }\n\n    if (transaction.codeFormat !== undefined) {\n        return new Error(`\"codeFormat\" cannot be used with ${transaction.type} transaction`)\n    }\n\n    if (transaction.humanReadable !== undefined) {\n        return new Error(`\"humanReadable\" cannot be used with ${transaction.type} transaction`)\n    }\n\n    if (transaction.gasPrice !== undefined) {\n        return new Error(\n            `\"gasPrice\" cannot be used with ${transaction.type} transaction. Please use the maxPriorityFeePerGas and maxFeePerGas.`\n        )\n    }\n\n    const error = validateNonFeeDelegated(transaction)\n    if (error) return error\n\n    return validateNotAccountTransaction(transaction)\n}\n\nmodule.exports = {\n    validateParams,\n    validateTxType,\n    validateCodeFormat,\n}\n"]},"metadata":{},"sourceType":"script"}