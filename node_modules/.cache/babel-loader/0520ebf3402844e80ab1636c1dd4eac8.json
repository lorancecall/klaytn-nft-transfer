{"ast":null,"code":"'use strict';\n\nconst configure = require('../lib/configure');\n\nconst multicodec = require('multicodec');\n\nconst loadFormat = require('../lib/ipld-formats');\n\nmodule.exports = configure((api, opts) => {\n  const getBlock = require('../block/get')(opts);\n\n  const dagResolve = require('./resolve')(opts);\n\n  const load = loadFormat(opts.ipld);\n  /**\n   * @type {import('..').Implements<typeof import('ipfs-core/src/components/dag/get')>}\n   */\n\n  const get = async (cid, options = {}) => {\n    const resolved = await dagResolve(cid, options);\n    const block = await getBlock(resolved.cid, options);\n    const codecName = multicodec.getName(resolved.cid.code);\n    const format = await load(codecName);\n\n    if (resolved.cid.code === multicodec.RAW && !resolved.remainderPath) {\n      resolved.remainderPath = '/';\n    }\n\n    return format.resolver.resolve(block.data, resolved.remainderPath);\n  };\n\n  return get;\n});","map":{"version":3,"sources":["/home/lorancecall/Projects/vuejs-tutorial/testpage/node_modules/ipfs-http-client/src/dag/get.js"],"names":["configure","require","multicodec","loadFormat","module","exports","api","opts","getBlock","dagResolve","load","ipld","get","cid","options","resolved","block","codecName","getName","code","format","RAW","remainderPath","resolver","resolve","data"],"mappings":"AAAA;;AAEA,MAAMA,SAAS,GAAGC,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAMC,UAAU,GAAGD,OAAO,CAAC,YAAD,CAA1B;;AACA,MAAME,UAAU,GAAGF,OAAO,CAAC,qBAAD,CAA1B;;AAEAG,MAAM,CAACC,OAAP,GAAiBL,SAAS,CAAC,CAACM,GAAD,EAAMC,IAAN,KAAe;AACxC,QAAMC,QAAQ,GAAGP,OAAO,CAAC,cAAD,CAAP,CAAwBM,IAAxB,CAAjB;;AACA,QAAME,UAAU,GAAGR,OAAO,CAAC,WAAD,CAAP,CAAqBM,IAArB,CAAnB;;AACA,QAAMG,IAAI,GAAGP,UAAU,CAACI,IAAI,CAACI,IAAN,CAAvB;AAEA;AACF;AACA;;AACE,QAAMC,GAAG,GAAG,OAAOC,GAAP,EAAYC,OAAO,GAAG,EAAtB,KAA6B;AACvC,UAAMC,QAAQ,GAAG,MAAMN,UAAU,CAACI,GAAD,EAAMC,OAAN,CAAjC;AACA,UAAME,KAAK,GAAG,MAAMR,QAAQ,CAACO,QAAQ,CAACF,GAAV,EAAeC,OAAf,CAA5B;AAEA,UAAMG,SAAS,GAAGf,UAAU,CAACgB,OAAX,CAAmBH,QAAQ,CAACF,GAAT,CAAaM,IAAhC,CAAlB;AACA,UAAMC,MAAM,GAAG,MAAMV,IAAI,CAACO,SAAD,CAAzB;;AAEA,QAAIF,QAAQ,CAACF,GAAT,CAAaM,IAAb,KAAsBjB,UAAU,CAACmB,GAAjC,IAAwC,CAACN,QAAQ,CAACO,aAAtD,EAAqE;AACnEP,MAAAA,QAAQ,CAACO,aAAT,GAAyB,GAAzB;AACD;;AAED,WAAOF,MAAM,CAACG,QAAP,CAAgBC,OAAhB,CAAwBR,KAAK,CAACS,IAA9B,EAAoCV,QAAQ,CAACO,aAA7C,CAAP;AACD,GAZD;;AAcA,SAAOV,GAAP;AACD,CAvByB,CAA1B","sourcesContent":["'use strict'\n\nconst configure = require('../lib/configure')\nconst multicodec = require('multicodec')\nconst loadFormat = require('../lib/ipld-formats')\n\nmodule.exports = configure((api, opts) => {\n  const getBlock = require('../block/get')(opts)\n  const dagResolve = require('./resolve')(opts)\n  const load = loadFormat(opts.ipld)\n\n  /**\n   * @type {import('..').Implements<typeof import('ipfs-core/src/components/dag/get')>}\n   */\n  const get = async (cid, options = {}) => {\n    const resolved = await dagResolve(cid, options)\n    const block = await getBlock(resolved.cid, options)\n\n    const codecName = multicodec.getName(resolved.cid.code)\n    const format = await load(codecName)\n\n    if (resolved.cid.code === multicodec.RAW && !resolved.remainderPath) {\n      resolved.remainderPath = '/'\n    }\n\n    return format.resolver.resolve(block.data, resolved.remainderPath)\n  }\n\n  return get\n})\n"]},"metadata":{},"sourceType":"script"}