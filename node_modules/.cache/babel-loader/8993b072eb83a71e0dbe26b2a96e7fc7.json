{"ast":null,"code":"'use strict';\n\nrequire(\"core-js/modules/es.error.cause.js\");\n\nconst CID = require('cids');\n\nconst Client = require('../../lib/core');\n\nconst Service = require('./service');\n\nconst toUrlSearchParams = require('../../lib/to-url-search-params');\n/**\n * @typedef {import('../..').HttpOptions} HttpOptions\n * @typedef {import('../../lib/core').ClientOptions} ClientOptions\n * @typedef {import('ipfs-core-types/src/basic').AbortOptions} AbortOptions\n * @typedef {import('ipfs-core-types/src/pin/remote').API} API\n * @typedef {import('ipfs-core-types/src/pin/remote').Pin} Pin\n * @typedef {import('ipfs-core-types/src/pin/remote').AddOptions} AddOptions\n * @typedef {import('ipfs-core-types/src/pin/remote').Query} Query\n * @typedef {import('ipfs-core-types/src/pin/remote').Status} Status\n *\n * @implements {API}\n */\n\n\nclass Remote {\n  /**\n   * @param {ClientOptions} options\n   */\n  constructor(options) {\n    /** @private */\n    this.client = new Client(options);\n    /** @readonly */\n\n    this.service = new Service(options);\n  }\n  /**\n   * Stores an IPFS object(s) from a given path to a remote pinning service.\n   *\n   * @param {CID} cid\n   * @param {AddOptions & AbortOptions & HttpOptions} options\n   * @returns {Promise<Pin>}\n   */\n\n\n  add(cid, options) {\n    return Remote.add(this.client, cid, options);\n  }\n  /**\n   * @param {Client} client\n   * @param {CID} cid\n   * @param {AddOptions & AbortOptions & HttpOptions} options\n   */\n\n\n  static async add(client, cid, {\n    timeout,\n    signal,\n    headers,\n    ...options\n  }) {\n    const response = await client.post('pin/remote/add', {\n      timeout,\n      signal,\n      headers,\n      searchParams: encodeAddParams({\n        cid,\n        ...options\n      })\n    });\n    return Remote.decodePin(await response.json());\n  }\n  /**\n   * @param {Object} json\n   * @param {string} json.Name\n   * @param {string} json.Cid\n   * @param {Status} json.Status\n   * @returns {Pin}\n   */\n\n\n  static decodePin({\n    Name: name,\n    Status: status,\n    Cid: cid\n  }) {\n    return {\n      cid: new CID(cid),\n      name,\n      status\n    };\n  }\n  /**\n   * Returns a list of matching pins on the remote pinning service.\n   *\n   * @param {Query & AbortOptions & HttpOptions} query\n   */\n\n\n  ls(query) {\n    return Remote.ls(this.client, query);\n  }\n  /**\n   *\n   * @param {Client} client\n   * @param {Query & AbortOptions & HttpOptions} options\n   * @returns {AsyncIterable<Pin>}\n   */\n\n\n  static async *ls(client, {\n    timeout,\n    signal,\n    headers,\n    ...query\n  }) {\n    const response = await client.post('pin/remote/ls', {\n      signal,\n      timeout,\n      headers,\n      searchParams: encodeQuery(query)\n    });\n\n    for await (const pin of response.ndjson()) {\n      yield Remote.decodePin(pin);\n    }\n  }\n  /**\n   * Removes a single pin object matching query allowing it to be garbage\n   * collected (if needed). Will error if multiple pins mtach provided\n   * query. To remove all matches use `rmAll` instead.\n   *\n   * @param {Query & AbortOptions & HttpOptions} query\n   */\n\n\n  rm(query) {\n    return Remote.rm(this.client, { ...query,\n      all: false\n    });\n  }\n  /**\n   * Removes all pin object that match given query allowing them to be garbage\n   * collected if needed.\n   *\n   * @param {Query & AbortOptions & HttpOptions} query\n   */\n\n\n  rmAll(query) {\n    return Remote.rm(this.client, { ...query,\n      all: true\n    });\n  }\n  /**\n   *\n   * @param {Client} client\n   * @param {{all: boolean} & Query & AbortOptions & HttpOptions} options\n   */\n\n\n  static async rm(client, {\n    timeout,\n    signal,\n    headers,\n    ...query\n  }) {\n    await client.post('pin/remote/rm', {\n      timeout,\n      signal,\n      headers,\n      searchParams: encodeQuery(query)\n    });\n  }\n\n}\n/**\n * @param {any} service\n * @returns {string}\n */\n\n\nconst encodeService = service => {\n  if (typeof service === 'string' && service !== '') {\n    return service;\n  } else {\n    throw new TypeError('service name must be passed');\n  }\n};\n/**\n * @param {any} cid\n * @returns {string}\n */\n\n\nconst encodeCID = cid => {\n  if (CID.isCID(cid)) {\n    return cid.toString();\n  } else {\n    throw new TypeError(`CID instance expected instead of ${cid}`);\n  }\n};\n/**\n * @param {Query & { all?: boolean }} query\n * @returns {URLSearchParams}\n */\n\n\nconst encodeQuery = ({\n  service,\n  cid,\n  name,\n  status,\n  all\n}) => {\n  const query = toUrlSearchParams({\n    service: encodeService(service),\n    name,\n    force: all ? true : undefined\n  });\n\n  if (cid) {\n    for (const value of cid) {\n      query.append('cid', encodeCID(value));\n    }\n  }\n\n  if (status) {\n    for (const value of status) {\n      query.append('status', value);\n    }\n  }\n\n  return query;\n};\n/**\n * @param {AddOptions & {cid:CID}} options\n * @returns {URLSearchParams}\n */\n\n\nconst encodeAddParams = ({\n  cid,\n  service,\n  background,\n  name,\n  origins\n}) => {\n  const params = toUrlSearchParams({\n    arg: encodeCID(cid),\n    service: encodeService(service),\n    name,\n    background: background ? true : undefined\n  });\n\n  if (origins) {\n    for (const origin of origins) {\n      params.append('origin', origin.toString());\n    }\n  }\n\n  return params;\n};\n\nmodule.exports = Remote;","map":{"version":3,"sources":["/home/lorancecall/Projects/vuejs-tutorial/testpage/node_modules/ipfs-http-client/src/pin/remote/index.js"],"names":["CID","require","Client","Service","toUrlSearchParams","Remote","constructor","options","client","service","add","cid","timeout","signal","headers","response","post","searchParams","encodeAddParams","decodePin","json","Name","name","Status","status","Cid","ls","query","encodeQuery","pin","ndjson","rm","all","rmAll","encodeService","TypeError","encodeCID","isCID","toString","force","undefined","value","append","background","origins","params","arg","origin","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst CID = require('cids')\nconst Client = require('../../lib/core')\nconst Service = require('./service')\nconst toUrlSearchParams = require('../../lib/to-url-search-params')\n\n/**\n * @typedef {import('../..').HttpOptions} HttpOptions\n * @typedef {import('../../lib/core').ClientOptions} ClientOptions\n * @typedef {import('ipfs-core-types/src/basic').AbortOptions} AbortOptions\n * @typedef {import('ipfs-core-types/src/pin/remote').API} API\n * @typedef {import('ipfs-core-types/src/pin/remote').Pin} Pin\n * @typedef {import('ipfs-core-types/src/pin/remote').AddOptions} AddOptions\n * @typedef {import('ipfs-core-types/src/pin/remote').Query} Query\n * @typedef {import('ipfs-core-types/src/pin/remote').Status} Status\n *\n * @implements {API}\n */\nclass Remote {\n  /**\n   * @param {ClientOptions} options\n   */\n  constructor (options) {\n    /** @private */\n    this.client = new Client(options)\n    /** @readonly */\n    this.service = new Service(options)\n  }\n\n  /**\n   * Stores an IPFS object(s) from a given path to a remote pinning service.\n   *\n   * @param {CID} cid\n   * @param {AddOptions & AbortOptions & HttpOptions} options\n   * @returns {Promise<Pin>}\n   */\n  add (cid, options) {\n    return Remote.add(this.client, cid, options)\n  }\n\n  /**\n   * @param {Client} client\n   * @param {CID} cid\n   * @param {AddOptions & AbortOptions & HttpOptions} options\n   */\n  static async add (client, cid, { timeout, signal, headers, ...options }) {\n    const response = await client.post('pin/remote/add', {\n      timeout,\n      signal,\n      headers,\n      searchParams: encodeAddParams({ cid, ...options })\n    })\n\n    return Remote.decodePin(await response.json())\n  }\n\n  /**\n   * @param {Object} json\n   * @param {string} json.Name\n   * @param {string} json.Cid\n   * @param {Status} json.Status\n   * @returns {Pin}\n   */\n  static decodePin ({ Name: name, Status: status, Cid: cid }) {\n    return {\n      cid: new CID(cid),\n      name,\n      status\n    }\n  }\n\n  /**\n   * Returns a list of matching pins on the remote pinning service.\n   *\n   * @param {Query & AbortOptions & HttpOptions} query\n   */\n  ls (query) {\n    return Remote.ls(this.client, query)\n  }\n\n  /**\n   *\n   * @param {Client} client\n   * @param {Query & AbortOptions & HttpOptions} options\n   * @returns {AsyncIterable<Pin>}\n   */\n  static async * ls (client, { timeout, signal, headers, ...query }) {\n    const response = await client.post('pin/remote/ls', {\n      signal,\n      timeout,\n      headers,\n      searchParams: encodeQuery(query)\n    })\n\n    for await (const pin of response.ndjson()) {\n      yield Remote.decodePin(pin)\n    }\n  }\n\n  /**\n   * Removes a single pin object matching query allowing it to be garbage\n   * collected (if needed). Will error if multiple pins mtach provided\n   * query. To remove all matches use `rmAll` instead.\n   *\n   * @param {Query & AbortOptions & HttpOptions} query\n   */\n  rm (query) {\n    return Remote.rm(this.client, { ...query, all: false })\n  }\n\n  /**\n   * Removes all pin object that match given query allowing them to be garbage\n   * collected if needed.\n   *\n   * @param {Query & AbortOptions & HttpOptions} query\n   */\n  rmAll (query) {\n    return Remote.rm(this.client, { ...query, all: true })\n  }\n\n  /**\n   *\n   * @param {Client} client\n   * @param {{all: boolean} & Query & AbortOptions & HttpOptions} options\n   */\n  static async rm (client, { timeout, signal, headers, ...query }) {\n    await client.post('pin/remote/rm', {\n      timeout,\n      signal,\n      headers,\n      searchParams: encodeQuery(query)\n    })\n  }\n}\n\n/**\n * @param {any} service\n * @returns {string}\n */\nconst encodeService = (service) => {\n  if (typeof service === 'string' && service !== '') {\n    return service\n  } else {\n    throw new TypeError('service name must be passed')\n  }\n}\n\n/**\n * @param {any} cid\n * @returns {string}\n */\nconst encodeCID = (cid) => {\n  if (CID.isCID(cid)) {\n    return cid.toString()\n  } else {\n    throw new TypeError(`CID instance expected instead of ${cid}`)\n  }\n}\n\n/**\n * @param {Query & { all?: boolean }} query\n * @returns {URLSearchParams}\n */\nconst encodeQuery = ({ service, cid, name, status, all }) => {\n  const query = toUrlSearchParams({\n    service: encodeService(service),\n    name,\n    force: all ? true : undefined\n  })\n\n  if (cid) {\n    for (const value of cid) {\n      query.append('cid', encodeCID(value))\n    }\n  }\n\n  if (status) {\n    for (const value of status) {\n      query.append('status', value)\n    }\n  }\n\n  return query\n}\n\n/**\n * @param {AddOptions & {cid:CID}} options\n * @returns {URLSearchParams}\n */\nconst encodeAddParams = ({ cid, service, background, name, origins }) => {\n  const params = toUrlSearchParams({\n    arg: encodeCID(cid),\n    service: encodeService(service),\n    name,\n    background: background ? true : undefined\n  })\n\n  if (origins) {\n    for (const origin of origins) {\n      params.append('origin', origin.toString())\n    }\n  }\n\n  return params\n}\n\nmodule.exports = Remote\n"]},"metadata":{},"sourceType":"script"}