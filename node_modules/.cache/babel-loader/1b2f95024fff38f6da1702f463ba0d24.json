{"ast":null,"code":"'use strict';\n\nrequire(\"core-js/modules/es.typed-array.at.js\");\n\nrequire(\"core-js/modules/es.typed-array.set.js\");\n\nrequire(\"core-js/modules/es.error.cause.js\");\n\nconst CID = require('cids');\n\nconst {\n  DAGNode\n} = require('ipld-dag-pb');\n\nconst multipartRequest = require('../lib/multipart-request');\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n\nconst abortSignal = require('../lib/abort-signal');\n\nconst {\n  AbortController\n} = require('native-abort-controller');\n\nconst unit8ArrayToString = require('uint8arrays/to-string');\n\nconst uint8ArrayFromString = require('uint8arrays/from-string');\n\nmodule.exports = configure(api => {\n  return async (obj, options = {}) => {\n    let tmpObj = {\n      Links: []\n    };\n\n    if (obj instanceof Uint8Array) {\n      if (!options.enc) {\n        tmpObj = {\n          Data: unit8ArrayToString(obj),\n          Links: []\n        };\n      }\n    } else if (DAGNode.isDAGNode(obj)) {\n      tmpObj = {\n        Data: unit8ArrayToString(obj.Data),\n        Links: obj.Links.map(l => ({\n          Name: l.Name,\n          Hash: l.Hash.toString(),\n          Size: l.Tsize\n        }))\n      };\n    } else if (typeof obj === 'object') {\n      tmpObj.Data = unit8ArrayToString(obj.Data);\n      tmpObj.Links = obj.Links;\n    } else {\n      throw new Error('obj not recognized');\n    }\n\n    let buf;\n\n    if (obj instanceof Uint8Array && options.enc) {\n      buf = obj;\n    } else {\n      options.enc = 'json';\n      buf = uint8ArrayFromString(JSON.stringify(tmpObj));\n    } // allow aborting requests on body errors\n\n\n    const controller = new AbortController();\n    const signal = abortSignal(controller.signal, options.signal); // @ts-ignore https://github.com/ipfs/js-ipfs-utils/issues/90\n\n    const res = await api.post('object/put', {\n      timeout: options.timeout,\n      signal,\n      searchParams: toUrlSearchParams(options),\n      ...(await multipartRequest(buf, controller, options.headers))\n    });\n    const {\n      Hash\n    } = await res.json();\n    return new CID(Hash);\n  };\n});","map":{"version":3,"sources":["/home/lorancecall/Projects/vuejs-tutorial/testpage/node_modules/ipfs-http-client/src/object/put.js"],"names":["CID","require","DAGNode","multipartRequest","configure","toUrlSearchParams","abortSignal","AbortController","unit8ArrayToString","uint8ArrayFromString","module","exports","api","obj","options","tmpObj","Links","Uint8Array","enc","Data","isDAGNode","map","l","Name","Hash","toString","Size","Tsize","Error","buf","JSON","stringify","controller","signal","res","post","timeout","searchParams","headers","json"],"mappings":"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","sourcesContent":["'use strict'\n\nconst CID = require('cids')\nconst { DAGNode } = require('ipld-dag-pb')\nconst multipartRequest = require('../lib/multipart-request')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\nconst abortSignal = require('../lib/abort-signal')\nconst { AbortController } = require('native-abort-controller')\nconst unit8ArrayToString = require('uint8arrays/to-string')\nconst uint8ArrayFromString = require('uint8arrays/from-string')\n\nmodule.exports = configure(api => {\n  return async (obj, options = {}) => {\n    let tmpObj = {\n      Links: []\n    }\n\n    if (obj instanceof Uint8Array) {\n      if (!options.enc) {\n        tmpObj = {\n          Data: unit8ArrayToString(obj),\n          Links: []\n        }\n      }\n    } else if (DAGNode.isDAGNode(obj)) {\n      tmpObj = {\n        Data: unit8ArrayToString(obj.Data),\n        Links: obj.Links.map(l => ({\n          Name: l.Name,\n          Hash: l.Hash.toString(),\n          Size: l.Tsize\n        }))\n      }\n    } else if (typeof obj === 'object') {\n      tmpObj.Data = unit8ArrayToString(obj.Data)\n      tmpObj.Links = obj.Links\n    } else {\n      throw new Error('obj not recognized')\n    }\n\n    let buf\n    if (obj instanceof Uint8Array && options.enc) {\n      buf = obj\n    } else {\n      options.enc = 'json'\n      buf = uint8ArrayFromString(JSON.stringify(tmpObj))\n    }\n\n    // allow aborting requests on body errors\n    const controller = new AbortController()\n    const signal = abortSignal(controller.signal, options.signal)\n\n    // @ts-ignore https://github.com/ipfs/js-ipfs-utils/issues/90\n    const res = await api.post('object/put', {\n      timeout: options.timeout,\n      signal,\n      searchParams: toUrlSearchParams(options),\n      ...(\n        await multipartRequest(buf, controller, options.headers)\n      )\n    })\n\n    const { Hash } = await res.json()\n\n    return new CID(Hash)\n  }\n})\n"]},"metadata":{},"sourceType":"script"}