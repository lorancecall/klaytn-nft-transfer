{"ast":null,"code":"require(\"core-js/modules/es.error.cause.js\");\n\n/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\nconst RLP = require('eth-lib/lib/rlp');\n\nconst Bytes = require('eth-lib/lib/bytes');\n\nconst _ = require('lodash');\n\nconst AbstractFeeDelegatedTransaction = require('../abstractFeeDelegatedTransaction');\n\nconst {\n  TX_TYPE_STRING,\n  TX_TYPE_TAG,\n  isNot\n} = require('../../transactionHelper/transactionHelper');\n\nconst utils = require('../../../../caver-utils/src');\n\nfunction _decode(rlpEncoded) {\n  rlpEncoded = utils.addHexPrefix(rlpEncoded);\n  if (!rlpEncoded.startsWith(TX_TYPE_TAG.TxTypeFeeDelegatedValueTransferMemo)) throw new Error(`Cannot decode to FeeDelegatedValueTransferMemo. The prefix must be ${TX_TYPE_TAG.TxTypeFeeDelegatedValueTransferMemo}: ${rlpEncoded}`);\n  const typeDettached = `0x${rlpEncoded.slice(4)}`;\n  const [nonce, gasPrice, gas, to, value, from, input, signatures, feePayer, feePayerSignatures] = RLP.decode(typeDettached);\n  return {\n    nonce: utils.trimLeadingZero(nonce),\n    gasPrice: utils.trimLeadingZero(gasPrice),\n    gas: utils.trimLeadingZero(gas),\n    to,\n    value: utils.trimLeadingZero(value),\n    from,\n    input,\n    signatures,\n    feePayer,\n    feePayerSignatures\n  };\n}\n/**\n * Represents a fee delegated value transfer memo transaction.\n * Please refer to {@link https://docs.klaytn.com/klaytn/design/transactions/fee-delegation#txtypefeedelegatedvaluetransfermemo|FeeDelegatedValueTransferMemo} to see more detail.\n * @class\n * @hideconstructor\n * @augments AbstractFeeDelegatedTransaction\n */\n\n\nclass FeeDelegatedValueTransferMemo extends AbstractFeeDelegatedTransaction {\n  /**\n   * Creates a fee delegated value transfer memo transaction.\n   * @method create\n   * @param {object|string} createTxObj - The parameters to create a FeeDelegatedValueTransferMemo transaction. This can be an object defining transaction information, or it can be an RLP-encoded string.\n   *                                      If it is an RLP-encoded string, decode it to create a transaction instance.\n   *                                      The object can define `from`, `to`, `value`, `input`, `nonce`, `gas`, `gasPrice`, `signatures`, `feePayer`, `feePayerSignatures` and `chainId`.\n   * @param {object} [klaytnCall] - An object includes klay rpc calls.\n   * @return {FeeDelegatedValueTransferMemo}\n   */\n  static create(createTxObj, klaytnCall) {\n    return new FeeDelegatedValueTransferMemo(createTxObj, klaytnCall);\n  }\n  /**\n   * decodes the RLP-encoded string and returns a FeeDelegatedValueTransferMemo transaction instance.\n   *\n   * @param {string} rlpEncoded The RLP-encoded fee delegated value transfer memo transaction.\n   * @param {object} [klaytnCall] - An object includes klay rpc calls.\n   * @return {FeeDelegatedValueTransferMemo}\n   */\n\n\n  static decode(rlpEncoded, klaytnCall) {\n    return new FeeDelegatedValueTransferMemo(_decode(rlpEncoded), klaytnCall);\n  }\n  /**\n   * Creates a fee delegated value transfer memo transaction.\n   * @constructor\n   * @param {object|string} createTxObj - The parameters to create a FeeDelegatedValueTransferMemo transaction. This can be an object defining transaction information, or it can be an RLP-encoded string.\n   *                                      If it is an RLP-encoded string, decode it to create a transaction instance.\n   *                                      The object can define `from`, `to`, `value`, `input`, `nonce`, `gas`, `gasPrice`, `signatures`, `feePayer`, `feePayerSignatures` and `chainId`.\n   * @param {object} [klaytnCall] - An object includes klay rpc calls.\n   */\n\n\n  constructor(createTxObj, klaytnCall) {\n    if (_.isString(createTxObj)) createTxObj = _decode(createTxObj);\n    super(TX_TYPE_STRING.TxTypeFeeDelegatedValueTransferMemo, createTxObj, klaytnCall);\n    this.to = createTxObj.to;\n    this.value = createTxObj.value;\n    if (createTxObj.input && createTxObj.data) throw new Error(`'input' and 'data' properties cannot be defined at the same time, please use either 'input' or 'data'.`);\n    this.input = createTxObj.input || createTxObj.data;\n    if (createTxObj.gasPrice !== undefined) this.gasPrice = createTxObj.gasPrice;\n  }\n  /**\n   * @type {string}\n   */\n\n\n  get gasPrice() {\n    return this._gasPrice;\n  }\n\n  set gasPrice(g) {\n    this._gasPrice = utils.numberToHex(g);\n  }\n  /**\n   * @type {string}\n   */\n\n\n  get to() {\n    return this._to;\n  }\n\n  set to(address) {\n    if (!utils.isAddress(address)) throw new Error(`Invalid address of to: ${address}`);\n    this._to = address.toLowerCase();\n  }\n  /**\n   * @type {string}\n   */\n\n\n  get value() {\n    return this._value;\n  }\n\n  set value(val) {\n    this._value = utils.numberToHex(val);\n  }\n  /**\n   * @type {string}\n   */\n\n\n  get input() {\n    return this._input;\n  }\n\n  set input(input) {\n    if (!input || !utils.isHex(input)) throw new Error(`Invalid input data ${input}`);\n    this._input = utils.addHexPrefix(input);\n  }\n  /**\n   * @type {string}\n   */\n\n\n  get data() {\n    return this._input;\n  }\n\n  set data(data) {\n    this._input = data;\n  }\n  /**\n   * Returns the RLP-encoded string of this transaction (i.e., rawTransaction).\n   *\n   * @example\n   * const result = tx.getRLPEncoding()\n   *\n   * @return {string} An RLP-encoded transaction string.\n   */\n\n\n  getRLPEncoding() {\n    this.validateOptionalValues();\n    const signatures = this.signatures.map(sig => sig.encode());\n    const feePayerSignatures = this.feePayerSignatures.map(sig => sig.encode());\n    return TX_TYPE_TAG.TxTypeFeeDelegatedValueTransferMemo + RLP.encode([Bytes.fromNat(this.nonce), Bytes.fromNat(this.gasPrice), Bytes.fromNat(this.gas), this.to.toLowerCase(), Bytes.fromNat(this.value), this.from.toLowerCase(), this.input, signatures, this.feePayer.toLowerCase(), feePayerSignatures]).slice(2);\n  }\n  /**\n   * Returns the RLP-encoded string to make the signature of this transaction.\n   * This method has to be overrided in classes which extends AbstractTransaction.\n   * getCommonRLPEncodingForSignature is used in getRLPEncodingForSignature.\n   *\n   * @example\n   * const result = tx.getCommonRLPEncodingForSignature()\n   *\n   * @return {string} An RLP-encoded transaction string without signature.\n   */\n\n\n  getCommonRLPEncodingForSignature() {\n    this.validateOptionalValues();\n    return RLP.encode([TX_TYPE_TAG.TxTypeFeeDelegatedValueTransferMemo, Bytes.fromNat(this.nonce), Bytes.fromNat(this.gasPrice), Bytes.fromNat(this.gas), this.to.toLowerCase(), Bytes.fromNat(this.value), this.from.toLowerCase(), this.input]);\n  }\n  /**\n   * Fills in the optional variables in transaction.\n   *\n   * If the `gasPrice`, `nonce`, or `chainId` of the transaction are not defined, this method asks the default values for these optional variables and preset them by sending JSON RPC call to the connected Klaytn Node.\n   * Use {@link Klay#getGasPrice|caver.rpc.klay.getGasPrice} to get gasPrice, {@link Klay#getTransactionCount|caver.rpc.klay.getTransactionCount} to get nonce and {@link Klay#getChainId|caver.rpc.klay.getChainId} call to get chainId.\n   *\n   * @example\n   * await tx.fillTransaction()\n   */\n\n\n  async fillTransaction() {\n    const [chainId, gasPrice, nonce] = await Promise.all([isNot(this.chainId) ? this.getChainId() : this.chainId, isNot(this.gasPrice) ? this.getGasPrice() : this.gasPrice, isNot(this.nonce) ? this.getNonce(this.from) : this.nonce]);\n    this.chainId = chainId;\n    this.gasPrice = gasPrice;\n    this.nonce = nonce;\n  }\n  /**\n   * Checks that member variables that can be defined by the user are defined.\n   * If there is an undefined variable, an error occurs.\n   *\n   * @ignore\n   */\n\n\n  validateOptionalValues() {\n    super.validateOptionalValues();\n    if (this.gasPrice === undefined) throw new Error(`gasPrice is undefined. Define gasPrice in transaction or use 'transaction.fillTransaction' to fill values.`);\n  }\n\n}\n\nmodule.exports = FeeDelegatedValueTransferMemo;","map":{"version":3,"sources":["/home/lorancecall/Projects/vuejs-tutorial/testpage/node_modules/caver-js/packages/caver-transaction/src/transactionTypes/valueTransferMemo/feeDelegatedValueTransferMemo.js"],"names":["RLP","require","Bytes","_","AbstractFeeDelegatedTransaction","TX_TYPE_STRING","TX_TYPE_TAG","isNot","utils","_decode","rlpEncoded","addHexPrefix","startsWith","TxTypeFeeDelegatedValueTransferMemo","Error","typeDettached","slice","nonce","gasPrice","gas","to","value","from","input","signatures","feePayer","feePayerSignatures","decode","trimLeadingZero","FeeDelegatedValueTransferMemo","create","createTxObj","klaytnCall","constructor","isString","data","undefined","_gasPrice","g","numberToHex","_to","address","isAddress","toLowerCase","_value","val","_input","isHex","getRLPEncoding","validateOptionalValues","map","sig","encode","fromNat","getCommonRLPEncodingForSignature","fillTransaction","chainId","Promise","all","getChainId","getGasPrice","getNonce","module","exports"],"mappings":"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","sourcesContent":["/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nconst RLP = require('eth-lib/lib/rlp')\nconst Bytes = require('eth-lib/lib/bytes')\nconst _ = require('lodash')\nconst AbstractFeeDelegatedTransaction = require('../abstractFeeDelegatedTransaction')\nconst { TX_TYPE_STRING, TX_TYPE_TAG, isNot } = require('../../transactionHelper/transactionHelper')\nconst utils = require('../../../../caver-utils/src')\n\nfunction _decode(rlpEncoded) {\n    rlpEncoded = utils.addHexPrefix(rlpEncoded)\n    if (!rlpEncoded.startsWith(TX_TYPE_TAG.TxTypeFeeDelegatedValueTransferMemo))\n        throw new Error(\n            `Cannot decode to FeeDelegatedValueTransferMemo. The prefix must be ${TX_TYPE_TAG.TxTypeFeeDelegatedValueTransferMemo}: ${rlpEncoded}`\n        )\n\n    const typeDettached = `0x${rlpEncoded.slice(4)}`\n    const [nonce, gasPrice, gas, to, value, from, input, signatures, feePayer, feePayerSignatures] = RLP.decode(typeDettached)\n    return {\n        nonce: utils.trimLeadingZero(nonce),\n        gasPrice: utils.trimLeadingZero(gasPrice),\n        gas: utils.trimLeadingZero(gas),\n        to,\n        value: utils.trimLeadingZero(value),\n        from,\n        input,\n        signatures,\n        feePayer,\n        feePayerSignatures,\n    }\n}\n\n/**\n * Represents a fee delegated value transfer memo transaction.\n * Please refer to {@link https://docs.klaytn.com/klaytn/design/transactions/fee-delegation#txtypefeedelegatedvaluetransfermemo|FeeDelegatedValueTransferMemo} to see more detail.\n * @class\n * @hideconstructor\n * @augments AbstractFeeDelegatedTransaction\n */\nclass FeeDelegatedValueTransferMemo extends AbstractFeeDelegatedTransaction {\n    /**\n     * Creates a fee delegated value transfer memo transaction.\n     * @method create\n     * @param {object|string} createTxObj - The parameters to create a FeeDelegatedValueTransferMemo transaction. This can be an object defining transaction information, or it can be an RLP-encoded string.\n     *                                      If it is an RLP-encoded string, decode it to create a transaction instance.\n     *                                      The object can define `from`, `to`, `value`, `input`, `nonce`, `gas`, `gasPrice`, `signatures`, `feePayer`, `feePayerSignatures` and `chainId`.\n     * @param {object} [klaytnCall] - An object includes klay rpc calls.\n     * @return {FeeDelegatedValueTransferMemo}\n     */\n    static create(createTxObj, klaytnCall) {\n        return new FeeDelegatedValueTransferMemo(createTxObj, klaytnCall)\n    }\n\n    /**\n     * decodes the RLP-encoded string and returns a FeeDelegatedValueTransferMemo transaction instance.\n     *\n     * @param {string} rlpEncoded The RLP-encoded fee delegated value transfer memo transaction.\n     * @param {object} [klaytnCall] - An object includes klay rpc calls.\n     * @return {FeeDelegatedValueTransferMemo}\n     */\n    static decode(rlpEncoded, klaytnCall) {\n        return new FeeDelegatedValueTransferMemo(_decode(rlpEncoded), klaytnCall)\n    }\n\n    /**\n     * Creates a fee delegated value transfer memo transaction.\n     * @constructor\n     * @param {object|string} createTxObj - The parameters to create a FeeDelegatedValueTransferMemo transaction. This can be an object defining transaction information, or it can be an RLP-encoded string.\n     *                                      If it is an RLP-encoded string, decode it to create a transaction instance.\n     *                                      The object can define `from`, `to`, `value`, `input`, `nonce`, `gas`, `gasPrice`, `signatures`, `feePayer`, `feePayerSignatures` and `chainId`.\n     * @param {object} [klaytnCall] - An object includes klay rpc calls.\n     */\n    constructor(createTxObj, klaytnCall) {\n        if (_.isString(createTxObj)) createTxObj = _decode(createTxObj)\n        super(TX_TYPE_STRING.TxTypeFeeDelegatedValueTransferMemo, createTxObj, klaytnCall)\n        this.to = createTxObj.to\n        this.value = createTxObj.value\n\n        if (createTxObj.input && createTxObj.data)\n            throw new Error(`'input' and 'data' properties cannot be defined at the same time, please use either 'input' or 'data'.`)\n\n        this.input = createTxObj.input || createTxObj.data\n\n        if (createTxObj.gasPrice !== undefined) this.gasPrice = createTxObj.gasPrice\n    }\n\n    /**\n     * @type {string}\n     */\n    get gasPrice() {\n        return this._gasPrice\n    }\n\n    set gasPrice(g) {\n        this._gasPrice = utils.numberToHex(g)\n    }\n\n    /**\n     * @type {string}\n     */\n    get to() {\n        return this._to\n    }\n\n    set to(address) {\n        if (!utils.isAddress(address)) throw new Error(`Invalid address of to: ${address}`)\n        this._to = address.toLowerCase()\n    }\n\n    /**\n     * @type {string}\n     */\n    get value() {\n        return this._value\n    }\n\n    set value(val) {\n        this._value = utils.numberToHex(val)\n    }\n\n    /**\n     * @type {string}\n     */\n    get input() {\n        return this._input\n    }\n\n    set input(input) {\n        if (!input || !utils.isHex(input)) throw new Error(`Invalid input data ${input}`)\n        this._input = utils.addHexPrefix(input)\n    }\n\n    /**\n     * @type {string}\n     */\n    get data() {\n        return this._input\n    }\n\n    set data(data) {\n        this._input = data\n    }\n\n    /**\n     * Returns the RLP-encoded string of this transaction (i.e., rawTransaction).\n     *\n     * @example\n     * const result = tx.getRLPEncoding()\n     *\n     * @return {string} An RLP-encoded transaction string.\n     */\n    getRLPEncoding() {\n        this.validateOptionalValues()\n        const signatures = this.signatures.map(sig => sig.encode())\n        const feePayerSignatures = this.feePayerSignatures.map(sig => sig.encode())\n\n        return (\n            TX_TYPE_TAG.TxTypeFeeDelegatedValueTransferMemo +\n            RLP.encode([\n                Bytes.fromNat(this.nonce),\n                Bytes.fromNat(this.gasPrice),\n                Bytes.fromNat(this.gas),\n                this.to.toLowerCase(),\n                Bytes.fromNat(this.value),\n                this.from.toLowerCase(),\n                this.input,\n                signatures,\n                this.feePayer.toLowerCase(),\n                feePayerSignatures,\n            ]).slice(2)\n        )\n    }\n\n    /**\n     * Returns the RLP-encoded string to make the signature of this transaction.\n     * This method has to be overrided in classes which extends AbstractTransaction.\n     * getCommonRLPEncodingForSignature is used in getRLPEncodingForSignature.\n     *\n     * @example\n     * const result = tx.getCommonRLPEncodingForSignature()\n     *\n     * @return {string} An RLP-encoded transaction string without signature.\n     */\n    getCommonRLPEncodingForSignature() {\n        this.validateOptionalValues()\n\n        return RLP.encode([\n            TX_TYPE_TAG.TxTypeFeeDelegatedValueTransferMemo,\n            Bytes.fromNat(this.nonce),\n            Bytes.fromNat(this.gasPrice),\n            Bytes.fromNat(this.gas),\n            this.to.toLowerCase(),\n            Bytes.fromNat(this.value),\n            this.from.toLowerCase(),\n            this.input,\n        ])\n    }\n\n    /**\n     * Fills in the optional variables in transaction.\n     *\n     * If the `gasPrice`, `nonce`, or `chainId` of the transaction are not defined, this method asks the default values for these optional variables and preset them by sending JSON RPC call to the connected Klaytn Node.\n     * Use {@link Klay#getGasPrice|caver.rpc.klay.getGasPrice} to get gasPrice, {@link Klay#getTransactionCount|caver.rpc.klay.getTransactionCount} to get nonce and {@link Klay#getChainId|caver.rpc.klay.getChainId} call to get chainId.\n     *\n     * @example\n     * await tx.fillTransaction()\n     */\n    async fillTransaction() {\n        const [chainId, gasPrice, nonce] = await Promise.all([\n            isNot(this.chainId) ? this.getChainId() : this.chainId,\n            isNot(this.gasPrice) ? this.getGasPrice() : this.gasPrice,\n            isNot(this.nonce) ? this.getNonce(this.from) : this.nonce,\n        ])\n\n        this.chainId = chainId\n        this.gasPrice = gasPrice\n        this.nonce = nonce\n    }\n\n    /**\n     * Checks that member variables that can be defined by the user are defined.\n     * If there is an undefined variable, an error occurs.\n     *\n     * @ignore\n     */\n    validateOptionalValues() {\n        super.validateOptionalValues()\n        if (this.gasPrice === undefined)\n            throw new Error(`gasPrice is undefined. Define gasPrice in transaction or use 'transaction.fillTransaction' to fill values.`)\n    }\n}\n\nmodule.exports = FeeDelegatedValueTransferMemo\n"]},"metadata":{},"sourceType":"script"}