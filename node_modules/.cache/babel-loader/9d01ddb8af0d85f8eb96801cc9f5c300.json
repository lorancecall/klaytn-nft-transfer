{"ast":null,"code":"'use strict';\n\nrequire(\"core-js/modules/es.typed-array.at.js\");\n\nrequire(\"core-js/modules/es.typed-array.set.js\");\n\nrequire(\"core-js/modules/es.array.includes.js\");\n\nrequire(\"core-js/modules/es.error.cause.js\");\n\nconst CID = require('cids');\n\nconst configure = require('./lib/configure');\n\nconst toUrlSearchParams = require('./lib/to-url-search-params');\n\nconst stat = require('./files/stat');\n\nmodule.exports = configure((api, opts) => {\n  return async function* ls(path, options = {}) {\n    const pathStr = `${path instanceof Uint8Array ? new CID(path) : path}`;\n\n    async function mapLink(link) {\n      let hash = link.Hash;\n\n      if (hash.includes('/')) {\n        // the hash is a path, but we need the CID\n        const ipfsPath = hash.startsWith('/ipfs/') ? hash : `/ipfs/${hash}`;\n        const stats = await stat(opts)(ipfsPath);\n        hash = stats.cid;\n      }\n\n      const entry = {\n        name: link.Name,\n        path: pathStr + (link.Name ? `/${link.Name}` : ''),\n        size: link.Size,\n        cid: new CID(hash),\n        type: typeOf(link),\n        depth: link.Depth || 1\n      };\n\n      if (link.Mode) {\n        entry.mode = parseInt(link.Mode, 8);\n      }\n\n      if (link.Mtime !== undefined && link.Mtime !== null) {\n        entry.mtime = {\n          secs: link.Mtime\n        };\n\n        if (link.MtimeNsecs !== undefined && link.MtimeNsecs !== null) {\n          entry.mtime.nsecs = link.MtimeNsecs;\n        }\n      }\n\n      return entry;\n    }\n\n    const res = await api.post('ls', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: pathStr,\n        ...options\n      }),\n      headers: options.headers\n    });\n\n    for await (let result of res.ndjson()) {\n      result = result.Objects;\n\n      if (!result) {\n        throw new Error('expected .Objects in results');\n      }\n\n      result = result[0];\n\n      if (!result) {\n        throw new Error('expected one array in results.Objects');\n      }\n\n      const links = result.Links;\n\n      if (!Array.isArray(links)) {\n        throw new Error('expected one array in results.Objects[0].Links');\n      }\n\n      if (!links.length) {\n        // no links, this is a file, yield a single result\n        yield mapLink(result);\n        return;\n      }\n\n      yield* links.map(mapLink);\n    }\n  };\n});\n\nfunction typeOf(link) {\n  switch (link.Type) {\n    case 1:\n    case 5:\n      return 'dir';\n\n    case 2:\n      return 'file';\n\n    default:\n      return 'unknown';\n  }\n}","map":{"version":3,"sources":["/home/lorancecall/Projects/vuejs-tutorial/testpage/node_modules/ipfs-http-client/src/ls.js"],"names":["CID","require","configure","toUrlSearchParams","stat","module","exports","api","opts","ls","path","options","pathStr","Uint8Array","mapLink","link","hash","Hash","includes","ipfsPath","startsWith","stats","cid","entry","name","Name","size","Size","type","typeOf","depth","Depth","Mode","mode","parseInt","Mtime","undefined","mtime","secs","MtimeNsecs","nsecs","res","post","timeout","signal","searchParams","arg","headers","result","ndjson","Objects","Error","links","Links","Array","isArray","length","map","Type"],"mappings":"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","sourcesContent":["'use strict'\n\nconst CID = require('cids')\nconst configure = require('./lib/configure')\nconst toUrlSearchParams = require('./lib/to-url-search-params')\nconst stat = require('./files/stat')\n\nmodule.exports = configure((api, opts) => {\n  return async function * ls (path, options = {}) {\n    const pathStr = `${path instanceof Uint8Array ? new CID(path) : path}`\n\n    async function mapLink (link) {\n      let hash = link.Hash\n\n      if (hash.includes('/')) {\n        // the hash is a path, but we need the CID\n        const ipfsPath = hash.startsWith('/ipfs/') ? hash : `/ipfs/${hash}`\n        const stats = await stat(opts)(ipfsPath)\n\n        hash = stats.cid\n      }\n\n      const entry = {\n        name: link.Name,\n        path: pathStr + (link.Name ? `/${link.Name}` : ''),\n        size: link.Size,\n        cid: new CID(hash),\n        type: typeOf(link),\n        depth: link.Depth || 1\n      }\n\n      if (link.Mode) {\n        entry.mode = parseInt(link.Mode, 8)\n      }\n\n      if (link.Mtime !== undefined && link.Mtime !== null) {\n        entry.mtime = {\n          secs: link.Mtime\n        }\n\n        if (link.MtimeNsecs !== undefined && link.MtimeNsecs !== null) {\n          entry.mtime.nsecs = link.MtimeNsecs\n        }\n      }\n\n      return entry\n    }\n\n    const res = await api.post('ls', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: pathStr,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    for await (let result of res.ndjson()) {\n      result = result.Objects\n\n      if (!result) {\n        throw new Error('expected .Objects in results')\n      }\n\n      result = result[0]\n      if (!result) {\n        throw new Error('expected one array in results.Objects')\n      }\n\n      const links = result.Links\n      if (!Array.isArray(links)) {\n        throw new Error('expected one array in results.Objects[0].Links')\n      }\n\n      if (!links.length) {\n        // no links, this is a file, yield a single result\n        yield mapLink(result)\n\n        return\n      }\n\n      yield * links.map(mapLink)\n    }\n  }\n})\n\nfunction typeOf (link) {\n  switch (link.Type) {\n    case 1:\n    case 5:\n      return 'dir'\n    case 2:\n      return 'file'\n    default:\n      return 'unknown'\n  }\n}\n"]},"metadata":{},"sourceType":"script"}