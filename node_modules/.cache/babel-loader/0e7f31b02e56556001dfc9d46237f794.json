{"ast":null,"code":"'use strict';\n\nrequire(\"core-js/modules/es.error.cause.js\");\n\nconst toCamel = require('../lib/object-to-camel');\n\nconst configure = require('../lib/configure');\n\nconst toUrlSearchParams = require('../lib/to-url-search-params');\n\nmodule.exports = configure(api => {\n  /**\n   * @type {import('..').ImplementsMethod<'set', import('ipfs-core/src/components/config')>}\n   */\n  const set = async (key, value, options = {}) => {\n    if (typeof key !== 'string') {\n      throw new Error('Invalid key type');\n    }\n\n    const params = { ...options,\n      ...encodeParam(key, value)\n    };\n    const res = await api.post('config', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams(params),\n      headers: options.headers\n    });\n    return toCamel(await res.json());\n  };\n\n  return set;\n});\n\nconst encodeParam = (key, value) => {\n  switch (typeof value) {\n    case 'boolean':\n      return {\n        arg: [key, value.toString()],\n        bool: true\n      };\n\n    case 'string':\n      return {\n        arg: [key, value]\n      };\n\n    default:\n      return {\n        arg: [key, JSON.stringify(value)],\n        json: true\n      };\n  }\n};","map":{"version":3,"sources":["/home/lorancecall/Projects/vuejs-tutorial/testpage/node_modules/ipfs-http-client/src/config/set.js"],"names":["toCamel","require","configure","toUrlSearchParams","module","exports","api","set","key","value","options","Error","params","encodeParam","res","post","timeout","signal","searchParams","headers","json","arg","toString","bool","JSON","stringify"],"mappings":"AAAA;;;;AAEA,MAAMA,OAAO,GAAGC,OAAO,CAAC,wBAAD,CAAvB;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,kBAAD,CAAzB;;AACA,MAAME,iBAAiB,GAAGF,OAAO,CAAC,6BAAD,CAAjC;;AAEAG,MAAM,CAACC,OAAP,GAAiBH,SAAS,CAACI,GAAG,IAAI;AAChC;AACF;AACA;AACE,QAAMC,GAAG,GAAG,OAAOC,GAAP,EAAYC,KAAZ,EAAmBC,OAAO,GAAG,EAA7B,KAAoC;AAC9C,QAAI,OAAOF,GAAP,KAAe,QAAnB,EAA6B;AAC3B,YAAM,IAAIG,KAAJ,CAAU,kBAAV,CAAN;AACD;;AAED,UAAMC,MAAM,GAAG,EACb,GAAGF,OADU;AAEb,SAAGG,WAAW,CAACL,GAAD,EAAMC,KAAN;AAFD,KAAf;AAKA,UAAMK,GAAG,GAAG,MAAMR,GAAG,CAACS,IAAJ,CAAS,QAAT,EAAmB;AACnCC,MAAAA,OAAO,EAAEN,OAAO,CAACM,OADkB;AAEnCC,MAAAA,MAAM,EAAEP,OAAO,CAACO,MAFmB;AAGnCC,MAAAA,YAAY,EAAEf,iBAAiB,CAACS,MAAD,CAHI;AAInCO,MAAAA,OAAO,EAAET,OAAO,CAACS;AAJkB,KAAnB,CAAlB;AAOA,WAAOnB,OAAO,CAAC,MAAMc,GAAG,CAACM,IAAJ,EAAP,CAAd;AACD,GAlBD;;AAoBA,SAAOb,GAAP;AACD,CAzByB,CAA1B;;AA2BA,MAAMM,WAAW,GAAG,CAACL,GAAD,EAAMC,KAAN,KAAgB;AAClC,UAAQ,OAAOA,KAAf;AACE,SAAK,SAAL;AACE,aAAO;AAAEY,QAAAA,GAAG,EAAE,CAACb,GAAD,EAAMC,KAAK,CAACa,QAAN,EAAN,CAAP;AAAgCC,QAAAA,IAAI,EAAE;AAAtC,OAAP;;AACF,SAAK,QAAL;AACE,aAAO;AAAEF,QAAAA,GAAG,EAAE,CAACb,GAAD,EAAMC,KAAN;AAAP,OAAP;;AACF;AACE,aAAO;AAAEY,QAAAA,GAAG,EAAE,CAACb,GAAD,EAAMgB,IAAI,CAACC,SAAL,CAAehB,KAAf,CAAN,CAAP;AAAqCW,QAAAA,IAAI,EAAE;AAA3C,OAAP;AANJ;AAQD,CATD","sourcesContent":["'use strict'\n\nconst toCamel = require('../lib/object-to-camel')\nconst configure = require('../lib/configure')\nconst toUrlSearchParams = require('../lib/to-url-search-params')\n\nmodule.exports = configure(api => {\n  /**\n   * @type {import('..').ImplementsMethod<'set', import('ipfs-core/src/components/config')>}\n   */\n  const set = async (key, value, options = {}) => {\n    if (typeof key !== 'string') {\n      throw new Error('Invalid key type')\n    }\n\n    const params = {\n      ...options,\n      ...encodeParam(key, value)\n    }\n\n    const res = await api.post('config', {\n      timeout: options.timeout,\n      signal: options.signal,\n      searchParams: toUrlSearchParams(params),\n      headers: options.headers\n    })\n\n    return toCamel(await res.json())\n  }\n\n  return set\n})\n\nconst encodeParam = (key, value) => {\n  switch (typeof value) {\n    case 'boolean':\n      return { arg: [key, value.toString()], bool: true }\n    case 'string':\n      return { arg: [key, value] }\n    default:\n      return { arg: [key, JSON.stringify(value)], json: true }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}