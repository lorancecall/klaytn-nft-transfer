{"ast":null,"code":"require(\"core-js/modules/es.error.cause.js\");\n\n/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\nconst RLP = require('eth-lib/lib/rlp');\n\nconst Bytes = require('eth-lib/lib/bytes');\n\nconst _ = require('lodash');\n\nconst AbstractFeeDelegatedTransaction = require('../abstractFeeDelegatedTransaction');\n\nconst {\n  TX_TYPE_STRING,\n  TX_TYPE_TAG,\n  isNot\n} = require('../../transactionHelper/transactionHelper');\n\nconst utils = require('../../../../caver-utils/src');\n\nconst Account = require('../../../../caver-account');\n\nfunction _decode(rlpEncoded) {\n  rlpEncoded = utils.addHexPrefix(rlpEncoded);\n  if (!rlpEncoded.startsWith(TX_TYPE_TAG.TxTypeFeeDelegatedAccountUpdate)) throw new Error(`Cannot decode to FeeDelegatedAccountUpdate. The prefix must be ${TX_TYPE_TAG.TxTypeFeeDelegatedAccountUpdate}: ${rlpEncoded}`);\n  const typeDettached = `0x${rlpEncoded.slice(4)}`;\n  const [nonce, gasPrice, gas, from, rlpEncodedKey, signatures, feePayer, feePayerSignatures] = RLP.decode(typeDettached);\n  return {\n    nonce: utils.trimLeadingZero(nonce),\n    gasPrice: utils.trimLeadingZero(gasPrice),\n    gas: utils.trimLeadingZero(gas),\n    from,\n    rlpEncodedKey,\n    signatures,\n    feePayer,\n    feePayerSignatures\n  };\n}\n/**\n * Represents a fee delegated account update transaction.\n * Please refer to {@link https://docs.klaytn.com/klaytn/design/transactions/fee-delegation#txtypefeedelegatedaccountupdate|FeeDelegatedAccountUpdate} to see more detail.\n * @class\n * @hideconstructor\n */\n\n\nclass FeeDelegatedAccountUpdate extends AbstractFeeDelegatedTransaction {\n  /**\n   * Creates a fee delegated account update transaction.\n   * @method create\n   * @param {object|string} createTxObj - The parameters to create a FeeDelegatedAccountUpdate transaction. This can be an object defining transaction information, or it can be an RLP-encoded string.\n   *                                      If it is an RLP-encoded string, decode it to create a transaction instance.\n   *                               The object can define `from`, `account`, `nonce`, `gas`, `gasPrice`, `signatures`, `feePayer`, `feePayerSignatures` and `chainId`.\n   * @param {object} [klaytnCall] - An object includes klay rpc calls.\n   * @return {FeeDelegatedAccountUpdate}\n   */\n  static create(createTxObj, klaytnCall) {\n    return new FeeDelegatedAccountUpdate(createTxObj, klaytnCall);\n  }\n  /**\n   * decodes the RLP-encoded string and returns a FeeDelegatedAccountUpdate transaction instance.\n   *\n   * @param {string} rlpEncoded The RLP-encoded fee delegated account update transaction.\n   * @param {object} [klaytnCall] - An object includes klay rpc calls.\n   * @return {FeeDelegatedAccountUpdate}\n   */\n\n\n  static decode(rlpEncoded, klaytnCall) {\n    const decoded = _decode(rlpEncoded);\n\n    decoded.account = Account.createFromRLPEncoding(decoded.from, decoded.rlpEncodedKey);\n    return new FeeDelegatedAccountUpdate(decoded, klaytnCall);\n  }\n  /**\n   * Creates a fee delegated account update transaction.\n   * @constructor\n   * @param {object|string} createTxObj - The parameters to create a FeeDelegatedAccountUpdate transaction. This can be an object defining transaction information, or it can be an RLP-encoded string.\n   *                                      If it is an RLP-encoded string, decode it to create a transaction instance.\n   *                               The object can define `from`, `account`, `nonce`, `gas`, `gasPrice`, `signatures`, `feePayer`, `feePayerSignatures` and `chainId`.\n   * @param {object} [klaytnCall] - An object includes klay rpc calls.\n   */\n\n\n  constructor(createTxObj, klaytnCall) {\n    if (_.isString(createTxObj)) {\n      createTxObj = _decode(createTxObj);\n      createTxObj.account = Account.createFromRLPEncoding(createTxObj.from, createTxObj.rlpEncodedKey);\n    }\n\n    super(TX_TYPE_STRING.TxTypeFeeDelegatedAccountUpdate, createTxObj, klaytnCall);\n    this.account = createTxObj.account;\n    if (createTxObj.gasPrice !== undefined) this.gasPrice = createTxObj.gasPrice;\n  }\n  /**\n   * @type {string}\n   */\n\n\n  get gasPrice() {\n    return this._gasPrice;\n  }\n\n  set gasPrice(g) {\n    this._gasPrice = utils.numberToHex(g);\n  }\n  /**\n   * @type {Account}\n   */\n\n\n  get account() {\n    return this._account;\n  }\n\n  set account(acct) {\n    if (!(acct instanceof Account)) throw new Error(`Invalid account. 'account' should be instance of 'Account'.`);\n    if (this.from.toLowerCase() !== acct.address.toLowerCase()) throw new Error(`Transaction from address(${this.from.toLowerCase()}) and account address(${acct.address}) do not match.`);\n    this._account = acct;\n  }\n  /**\n   * Returns the RLP-encoded string of this transaction (i.e., rawTransaction).\n   *\n   * @example\n   * const result = tx.getRLPEncoding()\n   *\n   * @return {string} An RLP-encoded transaction string.\n   */\n\n\n  getRLPEncoding() {\n    this.validateOptionalValues();\n    const signatures = this.signatures.map(sig => sig.encode());\n    const feePayerSignatures = this.feePayerSignatures.map(sig => sig.encode());\n    return TX_TYPE_TAG.TxTypeFeeDelegatedAccountUpdate + RLP.encode([Bytes.fromNat(this.nonce), Bytes.fromNat(this.gasPrice), Bytes.fromNat(this.gas), this.from.toLowerCase(), this.account.getRLPEncodingAccountKey(), signatures, this.feePayer.toLowerCase(), feePayerSignatures]).slice(2);\n  }\n  /**\n   * Returns the RLP-encoded string to make the signature of this transaction.\n   * This method has to be overrided in classes which extends AbstractTransaction.\n   * getCommonRLPEncodingForSignature is used in getRLPEncodingForSignature.\n   *\n   * @example\n   * const result = tx.getCommonRLPEncodingForSignature()\n   *\n   * @return {string} An RLP-encoded transaction string without signature.\n   */\n\n\n  getCommonRLPEncodingForSignature() {\n    this.validateOptionalValues();\n    return RLP.encode([TX_TYPE_TAG.TxTypeFeeDelegatedAccountUpdate, Bytes.fromNat(this.nonce), Bytes.fromNat(this.gasPrice), Bytes.fromNat(this.gas), this.from.toLowerCase(), this.account.getRLPEncodingAccountKey()]);\n  }\n  /**\n   * Fills in the optional variables in transaction.\n   *\n   * If the `gasPrice`, `nonce`, or `chainId` of the transaction are not defined, this method asks the default values for these optional variables and preset them by sending JSON RPC call to the connected Klaytn Node.\n   * Use {@link Klay#getGasPrice|caver.rpc.klay.getGasPrice} to get gasPrice, {@link Klay#getTransactionCount|caver.rpc.klay.getTransactionCount} to get nonce and {@link Klay#getChainId|caver.rpc.klay.getChainId} call to get chainId.\n   *\n   * @example\n   * await tx.fillTransaction()\n   */\n\n\n  async fillTransaction() {\n    const [chainId, gasPrice, nonce] = await Promise.all([isNot(this.chainId) ? this.getChainId() : this.chainId, isNot(this.gasPrice) ? this.getGasPrice() : this.gasPrice, isNot(this.nonce) ? this.getNonce(this.from) : this.nonce]);\n    this.chainId = chainId;\n    this.gasPrice = gasPrice;\n    this.nonce = nonce;\n  }\n  /**\n   * Checks that member variables that can be defined by the user are defined.\n   * If there is an undefined variable, an error occurs.\n   *\n   * @ignore\n   */\n\n\n  validateOptionalValues() {\n    super.validateOptionalValues();\n    if (this.gasPrice === undefined) throw new Error(`gasPrice is undefined. Define gasPrice in transaction or use 'transaction.fillTransaction' to fill values.`);\n  }\n\n}\n\nmodule.exports = FeeDelegatedAccountUpdate;","map":{"version":3,"sources":["/home/lorancecall/Projects/vuejs-tutorial/testpage/node_modules/caver-js/packages/caver-transaction/src/transactionTypes/accountUpdate/feeDelegatedAccountUpdate.js"],"names":["RLP","require","Bytes","_","AbstractFeeDelegatedTransaction","TX_TYPE_STRING","TX_TYPE_TAG","isNot","utils","Account","_decode","rlpEncoded","addHexPrefix","startsWith","TxTypeFeeDelegatedAccountUpdate","Error","typeDettached","slice","nonce","gasPrice","gas","from","rlpEncodedKey","signatures","feePayer","feePayerSignatures","decode","trimLeadingZero","FeeDelegatedAccountUpdate","create","createTxObj","klaytnCall","decoded","account","createFromRLPEncoding","constructor","isString","undefined","_gasPrice","g","numberToHex","_account","acct","toLowerCase","address","getRLPEncoding","validateOptionalValues","map","sig","encode","fromNat","getRLPEncodingAccountKey","getCommonRLPEncodingForSignature","fillTransaction","chainId","Promise","all","getChainId","getGasPrice","getNonce","module","exports"],"mappings":"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","sourcesContent":["/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nconst RLP = require('eth-lib/lib/rlp')\nconst Bytes = require('eth-lib/lib/bytes')\nconst _ = require('lodash')\nconst AbstractFeeDelegatedTransaction = require('../abstractFeeDelegatedTransaction')\nconst { TX_TYPE_STRING, TX_TYPE_TAG, isNot } = require('../../transactionHelper/transactionHelper')\nconst utils = require('../../../../caver-utils/src')\nconst Account = require('../../../../caver-account')\n\nfunction _decode(rlpEncoded) {\n    rlpEncoded = utils.addHexPrefix(rlpEncoded)\n    if (!rlpEncoded.startsWith(TX_TYPE_TAG.TxTypeFeeDelegatedAccountUpdate))\n        throw new Error(\n            `Cannot decode to FeeDelegatedAccountUpdate. The prefix must be ${TX_TYPE_TAG.TxTypeFeeDelegatedAccountUpdate}: ${rlpEncoded}`\n        )\n\n    const typeDettached = `0x${rlpEncoded.slice(4)}`\n    const [nonce, gasPrice, gas, from, rlpEncodedKey, signatures, feePayer, feePayerSignatures] = RLP.decode(typeDettached)\n    return {\n        nonce: utils.trimLeadingZero(nonce),\n        gasPrice: utils.trimLeadingZero(gasPrice),\n        gas: utils.trimLeadingZero(gas),\n        from,\n        rlpEncodedKey,\n        signatures,\n        feePayer,\n        feePayerSignatures,\n    }\n}\n\n/**\n * Represents a fee delegated account update transaction.\n * Please refer to {@link https://docs.klaytn.com/klaytn/design/transactions/fee-delegation#txtypefeedelegatedaccountupdate|FeeDelegatedAccountUpdate} to see more detail.\n * @class\n * @hideconstructor\n */\nclass FeeDelegatedAccountUpdate extends AbstractFeeDelegatedTransaction {\n    /**\n     * Creates a fee delegated account update transaction.\n     * @method create\n     * @param {object|string} createTxObj - The parameters to create a FeeDelegatedAccountUpdate transaction. This can be an object defining transaction information, or it can be an RLP-encoded string.\n     *                                      If it is an RLP-encoded string, decode it to create a transaction instance.\n     *                               The object can define `from`, `account`, `nonce`, `gas`, `gasPrice`, `signatures`, `feePayer`, `feePayerSignatures` and `chainId`.\n     * @param {object} [klaytnCall] - An object includes klay rpc calls.\n     * @return {FeeDelegatedAccountUpdate}\n     */\n    static create(createTxObj, klaytnCall) {\n        return new FeeDelegatedAccountUpdate(createTxObj, klaytnCall)\n    }\n\n    /**\n     * decodes the RLP-encoded string and returns a FeeDelegatedAccountUpdate transaction instance.\n     *\n     * @param {string} rlpEncoded The RLP-encoded fee delegated account update transaction.\n     * @param {object} [klaytnCall] - An object includes klay rpc calls.\n     * @return {FeeDelegatedAccountUpdate}\n     */\n    static decode(rlpEncoded, klaytnCall) {\n        const decoded = _decode(rlpEncoded)\n        decoded.account = Account.createFromRLPEncoding(decoded.from, decoded.rlpEncodedKey)\n        return new FeeDelegatedAccountUpdate(decoded, klaytnCall)\n    }\n\n    /**\n     * Creates a fee delegated account update transaction.\n     * @constructor\n     * @param {object|string} createTxObj - The parameters to create a FeeDelegatedAccountUpdate transaction. This can be an object defining transaction information, or it can be an RLP-encoded string.\n     *                                      If it is an RLP-encoded string, decode it to create a transaction instance.\n     *                               The object can define `from`, `account`, `nonce`, `gas`, `gasPrice`, `signatures`, `feePayer`, `feePayerSignatures` and `chainId`.\n     * @param {object} [klaytnCall] - An object includes klay rpc calls.\n     */\n    constructor(createTxObj, klaytnCall) {\n        if (_.isString(createTxObj)) {\n            createTxObj = _decode(createTxObj)\n            createTxObj.account = Account.createFromRLPEncoding(createTxObj.from, createTxObj.rlpEncodedKey)\n        }\n\n        super(TX_TYPE_STRING.TxTypeFeeDelegatedAccountUpdate, createTxObj, klaytnCall)\n        this.account = createTxObj.account\n        if (createTxObj.gasPrice !== undefined) this.gasPrice = createTxObj.gasPrice\n    }\n\n    /**\n     * @type {string}\n     */\n    get gasPrice() {\n        return this._gasPrice\n    }\n\n    set gasPrice(g) {\n        this._gasPrice = utils.numberToHex(g)\n    }\n\n    /**\n     * @type {Account}\n     */\n    get account() {\n        return this._account\n    }\n\n    set account(acct) {\n        if (!(acct instanceof Account)) throw new Error(`Invalid account. 'account' should be instance of 'Account'.`)\n        if (this.from.toLowerCase() !== acct.address.toLowerCase())\n            throw new Error(`Transaction from address(${this.from.toLowerCase()}) and account address(${acct.address}) do not match.`)\n\n        this._account = acct\n    }\n\n    /**\n     * Returns the RLP-encoded string of this transaction (i.e., rawTransaction).\n     *\n     * @example\n     * const result = tx.getRLPEncoding()\n     *\n     * @return {string} An RLP-encoded transaction string.\n     */\n    getRLPEncoding() {\n        this.validateOptionalValues()\n        const signatures = this.signatures.map(sig => sig.encode())\n        const feePayerSignatures = this.feePayerSignatures.map(sig => sig.encode())\n\n        return (\n            TX_TYPE_TAG.TxTypeFeeDelegatedAccountUpdate +\n            RLP.encode([\n                Bytes.fromNat(this.nonce),\n                Bytes.fromNat(this.gasPrice),\n                Bytes.fromNat(this.gas),\n                this.from.toLowerCase(),\n                this.account.getRLPEncodingAccountKey(),\n                signatures,\n                this.feePayer.toLowerCase(),\n                feePayerSignatures,\n            ]).slice(2)\n        )\n    }\n\n    /**\n     * Returns the RLP-encoded string to make the signature of this transaction.\n     * This method has to be overrided in classes which extends AbstractTransaction.\n     * getCommonRLPEncodingForSignature is used in getRLPEncodingForSignature.\n     *\n     * @example\n     * const result = tx.getCommonRLPEncodingForSignature()\n     *\n     * @return {string} An RLP-encoded transaction string without signature.\n     */\n    getCommonRLPEncodingForSignature() {\n        this.validateOptionalValues()\n\n        return RLP.encode([\n            TX_TYPE_TAG.TxTypeFeeDelegatedAccountUpdate,\n            Bytes.fromNat(this.nonce),\n            Bytes.fromNat(this.gasPrice),\n            Bytes.fromNat(this.gas),\n            this.from.toLowerCase(),\n            this.account.getRLPEncodingAccountKey(),\n        ])\n    }\n\n    /**\n     * Fills in the optional variables in transaction.\n     *\n     * If the `gasPrice`, `nonce`, or `chainId` of the transaction are not defined, this method asks the default values for these optional variables and preset them by sending JSON RPC call to the connected Klaytn Node.\n     * Use {@link Klay#getGasPrice|caver.rpc.klay.getGasPrice} to get gasPrice, {@link Klay#getTransactionCount|caver.rpc.klay.getTransactionCount} to get nonce and {@link Klay#getChainId|caver.rpc.klay.getChainId} call to get chainId.\n     *\n     * @example\n     * await tx.fillTransaction()\n     */\n    async fillTransaction() {\n        const [chainId, gasPrice, nonce] = await Promise.all([\n            isNot(this.chainId) ? this.getChainId() : this.chainId,\n            isNot(this.gasPrice) ? this.getGasPrice() : this.gasPrice,\n            isNot(this.nonce) ? this.getNonce(this.from) : this.nonce,\n        ])\n\n        this.chainId = chainId\n        this.gasPrice = gasPrice\n        this.nonce = nonce\n    }\n\n    /**\n     * Checks that member variables that can be defined by the user are defined.\n     * If there is an undefined variable, an error occurs.\n     *\n     * @ignore\n     */\n    validateOptionalValues() {\n        super.validateOptionalValues()\n        if (this.gasPrice === undefined)\n            throw new Error(`gasPrice is undefined. Define gasPrice in transaction or use 'transaction.fillTransaction' to fill values.`)\n    }\n}\n\nmodule.exports = FeeDelegatedAccountUpdate\n"]},"metadata":{},"sourceType":"script"}