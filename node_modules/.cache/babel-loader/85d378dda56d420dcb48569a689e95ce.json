{"ast":null,"code":"require(\"core-js/modules/es.error.cause.js\");\n\nrequire(\"core-js/modules/es.array.includes.js\");\n\n/*\n    Modifications copyright 2018 The caver-js Authors\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n\n    This file is derived from web3.js/packages/web3-eth-abi/src/index.js (2019/06/12).\n    Modified and improved for the caver-js development.\n*/\n\n/**\n * @file index.js\n * @author Marek Kotewicz <marek@parity.io>\n * @author Fabian Vogelsteller <fabian@frozeman.de>\n * @date 2017\n */\nconst _ = require('lodash');\n\nconst EthersAbiCoder = require('@ethersproject/abi').AbiCoder;\n\nconst ParamType = require('@ethersproject/abi').ParamType;\n\nconst utils = require('../../caver-utils');\n\nconst ethersAbiCoder = new EthersAbiCoder(function (type, value) {\n  if (type.match(/^u?int/) && !_.isArray(value) && (!_.isObject(value) || value.constructor.name !== 'BN')) {\n    return value.toString();\n  }\n\n  return value;\n}); // result method\n\nfunction Result() {}\n\nclass ABI {\n  /**\n   * Encodes the function signature to its ABI signature, which are the first 4 bytes of the sha3 hash of the function name including parameter types.\n   *\n   * @example\n   * caver.abi.encodeFunctionSignature({ name: 'myMethod', type: 'function', inputs: [{ type: 'uint256', name: 'myNumber' },{ type: 'string', name: 'mystring' }]})\n   *\n   * caver.abi.encodeFunctionSignature('myMethod(uint256,string)')\n   *\n   * @method encodeFunctionSignature\n   * @memberof ABI\n   * @instance\n   * @param {string|object} functionSignature The function signature or the JSON interface object of the function to encode. If this is a string, it has to be in the form `function(type, type,...)`, e.g: `myFunction(uint256,uint32[],bytes10,bytes)`.\n   * @return {string} function signature\n   */\n  encodeFunctionSignature(functionSignature) {\n    if (_.isObject(functionSignature)) {\n      functionSignature = utils._jsonInterfaceMethodToString(functionSignature);\n    }\n\n    return utils.sha3(functionSignature).slice(0, 10);\n  }\n  /**\n   * Encodes the event signature to its ABI signature, which is the sha3 hash of the event name including input parameter types.\n   *\n   * @example\n   * caver.abi.encodeEventSignature({ name: 'myEvent', type: 'event', inputs: [{ type: 'uint256', name: 'myNumber' },{ type: 'string', name: 'mystring' }]})\n   *\n   * caver.abi.encodeEventSignature('myEvent(uint256,bytes32)')\n   *\n   * @method encodeEventSignature\n   * @memberof ABI\n   * @instance\n   * @param {string|object} eventSignature The event signature or the JSON interface object of the event to encode. If this is a string, it has to be in the form `event(type,type,...)`, e.g: `myEvent(uint256,uint32[],bytes10,bytes)`.\n   * @return {string} event signature\n   */\n\n\n  encodeEventSignature(eventSignature) {\n    if (_.isObject(eventSignature)) {\n      eventSignature = utils._jsonInterfaceMethodToString(eventSignature);\n    }\n\n    return utils.sha3(eventSignature);\n  }\n  /**\n   * Encodes a parameter based on its type to its ABI representation.\n   *\n   * @example\n   * caver.abi.encodeParameter('uint256', '2345675643')\n   * caver.abi.encodeParameter('bytes32[]', [caver.utils.rightPad('0xdf3234', 64), caver.utils.rightPad('0xfdfd', 64)])\n   * caver.abi.encodeParameter('tuple(bytes32,bool)', ['0xabdef18710a18a18abdef18710a18a18abdef18710a18a18abdef18710a18a18', true])\n   *\n   * @method encodeParameter\n   * @memberof ABI\n   * @instance\n   * @param {string|object} type The type of the parameter, see the {@link http://solidity.readthedocs.io/en/develop/types.html|solidity documentation}  for a list of types.\n   * @param {*} param The actual parameter to encode.\n   * @return {string} encoded plain param\n   */\n\n\n  encodeParameter(type, param) {\n    return this.encodeParameters([type], [param]);\n  }\n  /**\n   * Encodes function parameters based on its JSON interface object.\n   *\n   * @example\n   * caver.abi.encodeParameters(['uint256','string'], ['2345675643', 'Hello!%'])\n   *\n   * caver.abi.encodeParameters(\n   *      ['tuple(bytes32,bool)', 'tuple(bool,address)'],\n   *      [['0xabdef18710a18a18abdef18710a18a18abdef18710a18a18abdef18710a18a18', true], [true, '0x77656c636f6d6520746f20657468657265756d2e']]\n   * )\n   *\n   * caver.abi.encodeParameters(\n   *   [\n   *       {\n   *           components: [{ name: 'a', type: 'bytes32' }, { name: 'b', type: 'bool' }],\n   *           name: 'tupleExample',\n   *           type: 'tuple',\n   *       },\n   *       {\n   *           components: [{ name: 'c', type: 'bool' }, { name: 'd', type: 'address' }],\n   *           name: 'tupleExample2',\n   *          type: 'tuple',\n   *      },\n   *  ],\n   *  [\n   *      ['0xabdef18710a18a18abdef18710a18a18abdef18710a18a18abdef18710a18a18', true],\n   *      [true, '0x77656c636f6d6520746f20657468657265756d2e']\n   *  ]\n   *)\n   *\n   * @method encodeParameters\n   * @memberof ABI\n   * @instance\n   * @param {Array.<string|object>} types An array with types or a JSON interface of a function. See the {@link http://solidity.readthedocs.io/en/develop/types.html|solidity documentation} for a list of types.\n   * @param {Array.<*>} params The parameters to encode.\n   * @return {string} encoded list of params\n   */\n\n\n  encodeParameters(types, params) {\n    const self = this;\n    types = self.mapTypes(types);\n    params = params.map(function (param, index) {\n      let type = types[index]; // { components: [[Object], [Object]], name: 'b', type: 'tuple' }\n\n      if (typeof type === 'object' && type.type) {\n        // We may get a named type of shape {name, type}\n        type = type.type;\n      }\n\n      param = self.formatParam(type, param); // If the type is string but number comes in, ethersAbiCoder ignores the type and encodes successfully.\n      // To avoid invalid encoding value, adding error handling.\n\n      if (type === 'string' && typeof param !== 'string') throw new Error(`Invalid parameter: Parameter value and type do not match.`); // Format params for tuples\n\n      if (typeof type === 'string' && type.includes('tuple')) {\n        const coder = ethersAbiCoder._getCoder(ParamType.from(type)); // eslint-disable-next-line no-shadow\n\n\n        const modifyParams = (coder, param) => {\n          if (coder.name === 'array') {\n            return param.map(p => {\n              // `coder.type.replace('[]','')` can handle'tuple(string,string)[]', but cannot handle `tuple(string,string)[3]'.\n              // Therefore, in order to handle tuple arrays of fixed length, the logic is changed to handle strings using regular expression expressions.\n              const replacedType = coder.type.replace(/\\[[1-9]*\\]/g, '');\n              const parameterType = ParamType.from(replacedType);\n\n              const gotCoder = ethersAbiCoder._getCoder(parameterType);\n\n              modifyParams(gotCoder, p);\n            });\n          }\n\n          coder.coders.forEach((c, i) => {\n            if (c.name === 'tuple') {\n              modifyParams(c, param[i]);\n            } else {\n              param[i] = self.formatParam(c.name, param[i]);\n            }\n          });\n        };\n\n        modifyParams(coder, param);\n      }\n\n      return param;\n    });\n    return ethersAbiCoder.encode(types, params);\n  }\n  /**\n   * Should be used to encode smart contract deployment with constructor arguments.\n   *\n   * @example\n   * // There is no argument for constructor\n   * caver.abi.encodeContractDeploy([\n   *     { \"constant\": true, \"inputs\": [], \"name\": \"count\", \"outputs\": [ { \"name\": \"\", \"type\": \"uint256\" } ], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\" },\n   *     { \"constant\": true, \"inputs\": [], \"name\": \"getBlockNumber\", \"outputs\": [ { \"name\": \"\", \"type\": \"uint256\" } ], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\" },\n   *     { \"constant\": false, \"inputs\": [ { \"name\": \"_count\", \"type\": \"uint256\" } ], \"name\": \"setCount\", \"outputs\": [], \"payable\": false, \"stateMutability\": \"nonpayable\", \"type\": \"function\" }\n   * ],'0x{byte code}')\n   *\n   * // There is one argument for constructor\n   * caver.abi.encodeContractDeploy([\n   *     { \"constant\": true, \"inputs\": [], \"name\": \"count\", \"outputs\": [ { \"name\": \"\", \"type\": \"uint256\" } ], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\" },\n   *     { \"constant\": true, \"inputs\": [], \"name\": \"getBlockNumber\", \"outputs\": [ { \"name\": \"\", \"type\": \"uint256\" } ], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\" },\n   *     { \"constant\": false, \"inputs\": [ { \"name\": \"_count\", \"type\": \"uint256\" } ], \"name\": \"setCount\", \"outputs\": [], \"payable\": false, \"stateMutability\": \"nonpayable\", \"type\": \"function\" },\n   *     { \"inputs\": [ { \"name\": \"_a\", \"type\": \"uint256\" } ], \"payable\": false, \"stateMutability\": \"nonpayable\", \"type\": \"constructor\" }\n   * ],'0x{byte code}', 1)\n   *\n   * @method encodeContractDeploy\n   * @memberof ABI\n   * @instance\n   * @param {Array.<object>} jsonInterface The JSON interface of the contract.\n   * @param {string} bytecode A bytecode of smart contract to be deployed.\n   * @param {...*} [args] Arguments to pass to the constructor.\n   * @return {string} bytecode + args\n   */\n\n\n  encodeContractDeploy(jsonInterface, bytecode, ...args) {\n    if (!jsonInterface) {\n      throw new Error('jsonInterface should be provided for encoding contract deployment.');\n    }\n\n    if (!bytecode) {\n      throw new Error('bytecode should be provided for encoding contract deployment.');\n    }\n\n    const constructorInterface = jsonInterface.filter(({\n      type\n    }) => type === 'constructor')[0];\n    const constructorInputs = constructorInterface && constructorInterface.inputs; // If constructor doesn't exist in smart contract, only bytecode is needed for deploying.\n\n    if (!constructorInterface || !constructorInputs || _.isEmpty(constructorInputs)) {\n      return bytecode;\n    }\n\n    if (constructorInputs.length !== args.length) {\n      throw new Error(`invalid number of parameters for deploying. Got ${args.length} expected ${constructorInputs.length}!`);\n    }\n\n    const constructorTypes = constructorInputs.map(({\n      type\n    }) => type);\n    return bytecode + this.encodeParameters(constructorTypes, args).replace('0x', '');\n  }\n  /**\n   * Map types if simplified format is used\n   *\n   * @method mapTypes\n   * @memberof ABI\n   * @ignore\n   * @instance\n   * @param {Array} types\n   * @return {Array}\n   */\n\n\n  mapTypes(types) {\n    const self = this;\n    const mappedTypes = [];\n    types.forEach(function (type) {\n      // Remap `function` type params to bytes24 since Ethers does not\n      // recognize former type. Solidity docs say `Function` is a bytes24\n      // encoding the contract address followed by the function selector hash.\n      if (typeof type === 'object' && type.type === 'function') {\n        type = { ...type,\n          type: 'bytes24'\n        };\n      }\n\n      if (self.isSimplifiedStructFormat(type)) {\n        const structName = Object.keys(type)[0];\n        mappedTypes.push(Object.assign(self.mapStructNameAndType(structName), {\n          components: self.mapStructToCoderFormat(type[structName])\n        }));\n        return;\n      }\n\n      mappedTypes.push(type);\n    });\n    return mappedTypes;\n  }\n  /**\n   * Check if type is simplified struct format\n   *\n   * @method isSimplifiedStructFormat\n   * @memberof ABI\n   * @ignore\n   * @instance\n   * @param {string|Object} type\n   * @returns {boolean}\n   */\n\n\n  isSimplifiedStructFormat(type) {\n    return typeof type === 'object' && typeof type.components === 'undefined' && typeof type.name === 'undefined';\n  }\n  /**\n   * Maps the correct tuple type and name when the simplified format in encode/decodeParameter is used\n   *\n   * @method mapStructNameAndType\n   * @memberof ABI\n   * @ignore\n   * @instance\n   * @param {string} structName\n   * @return {{type: string, name: *}}\n   */\n\n\n  mapStructNameAndType(structName) {\n    let type = 'tuple';\n\n    if (structName.indexOf('[]') > -1) {\n      type = 'tuple[]';\n      structName = structName.slice(0, -2);\n    }\n\n    return {\n      type: type,\n      name: structName\n    };\n  }\n  /**\n   * Maps the simplified format in to the expected format of the ABI\n   *\n   * @method mapStructToCoderFormat\n   * @memberof ABI\n   * @ignore\n   * @instance\n   * @param {object} struct\n   * @return {Array}\n   */\n\n\n  mapStructToCoderFormat(struct) {\n    const self = this;\n    const components = [];\n    Object.keys(struct).forEach(function (key) {\n      if (typeof struct[key] === 'object') {\n        components.push(Object.assign(self.mapStructNameAndType(key), {\n          components: self.mapStructToCoderFormat(struct[key])\n        }));\n        return;\n      }\n\n      components.push({\n        name: key,\n        type: struct[key]\n      });\n    });\n    return components;\n  }\n  /**\n   * Handle some formatting of params for backwards compatability with Ethers V4\n   *\n   * @method formatParam\n   * @memberof ABI\n   * @ignore\n   * @param {string} - type\n   * @param {any} - param\n   * @return {string|Array.<string>} - The formatted param\n   */\n\n\n  formatParam(type, param) {\n    const paramTypeBytes = /^bytes([0-9]*)$/;\n    const paramTypeBytesArray = /^bytes([0-9]*)\\[\\]$/;\n    const paramTypeNumber = /^(u?int)([0-9]*)$/;\n    const paramTypeNumberArray = /^(u?int)([0-9]*)\\[\\]$/; // Format BN to string\n\n    if (utils.isBN(param) || utils.isBigNumber(param)) {\n      return param.toString(10);\n    }\n\n    if (type.match(paramTypeBytesArray) || type.match(paramTypeNumberArray)) {\n      return param.map(p => this.formatParam(type.replace('[]', ''), p));\n    } // Format correct width for u?int[0-9]*\n\n\n    let match = type.match(paramTypeNumber);\n\n    if (match) {\n      const size = parseInt(match[2] || '256');\n\n      if (size / 8 < param.length) {\n        // pad to correct bit width\n        param = utils.leftPad(param, size);\n      }\n    } // Format correct length for bytes[0-9]+\n\n\n    match = type.match(paramTypeBytes);\n\n    if (match) {\n      if (Buffer.isBuffer(param)) {\n        param = utils.toHex(param);\n      } // format to correct length\n\n\n      const size = parseInt(match[1]);\n\n      if (size) {\n        let maxSize = size * 2;\n\n        if (param.substring(0, 2) === '0x') {\n          maxSize += 2;\n        }\n\n        if (param.length < maxSize) {\n          // pad to correct length\n          param = utils.rightPad(param, size * 2);\n        }\n      } // format odd-length bytes to even-length\n\n\n      if (param.length % 2 === 1) {\n        param = `0x0${param.substring(2)}`;\n      }\n    }\n\n    return param;\n  }\n  /**\n   * Encodes a function call from its json interface and parameters.\n   *\n   * @example\n   * caver.abi.encodeFunctionCall({\n   *     name: 'myMethod',\n   *     type: 'function',\n   *     inputs: [{\n   *         type: 'uint256',\n   *         name: 'myNumber'\n   * },{\n   *         type: 'string',\n   *         name: 'mystring'\n   *     }]\n   * }, ['2345675643', 'Hello!%'])\n   *\n   * @method encodeFunctionCall\n   * @memberof ABI\n   * @instance\n   * @param {object} jsonInterface The JSON interface object of a function.\n   * @param {Array.<*>} [params] The parameters to encode.\n   * @return {string} The encoded ABI for this function call\n   */\n\n\n  encodeFunctionCall(jsonInterface, params) {\n    params = params || [];\n    return this.encodeFunctionSignature(jsonInterface) + this.encodeParameters(jsonInterface.inputs, params).replace('0x', '');\n  }\n  /**\n   * Decodes a function call from its abi object of a function and returns parameters.\n   * If the function signature of the `abi` passed as a parameter does not match the function signature of the `functionCall`, an error is returned.\n   *\n   * @example\n   * const abi = {\n   *    name: 'myMethod',\n   *    type: 'function',\n   *    inputs: [\n   *        {\n   *            type: 'uint256',\n   *           name: 'myNumber',\n   *       },\n   *       {\n   *           type: 'string',\n   *           name: 'mystring',\n   *       },\n   *   ],\n   * }\n   * const functionCall = '0x24ef0...'\n   * caver.abi.decodeFunctionCall(abi, functionCall)\n   *\n   * @method decodeFunctionCall\n   * @memberof ABI\n   * @instance\n   * @param {object} abi The abi object of a function.\n   * @param {string} functionCall The encoded function call string.\n   * @return {object} An object which includes plain params. You can use `result[0]` as it is provided to be accessed like an array in the order of the parameters.\n   */\n\n\n  decodeFunctionCall(abi, functionCall) {\n    functionCall = utils.addHexPrefix(functionCall);\n    if (!_.isObject(abi) || _.isArray(abi)) throw new Error(`Invalid abi parameter type: To decode function call, you need to pass an abi object of the function as a first parameter.`);\n    if (!abi.name || !abi.inputs) throw new Error(`Insufficient info in abi object: The function name and inputs must be defined inside the abi function object.`);\n    const funcSig = this.encodeFunctionSignature(abi);\n    const extractFuncSig = functionCall.slice(0, funcSig.length);\n    if (funcSig !== extractFuncSig) throw new Error(`Invalid function signature: The function signature of the abi as a parameter and the function signatures extracted from the function call string do not match.`);\n    return this.decodeParameters(abi.inputs, `0x${functionCall.slice(funcSig.length)}`);\n  }\n  /**\n   * Decodes an ABI encoded parameter to its JavaScript type.\n   *\n   * @example\n   * caver.abi.decodeParameter('uint256', '0x0000000000000000000000000000000000000000000000000000000000000010')\n   *\n   * caver.abi.decodeParameter('string', '0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000848656c6c6f212521000000000000000000000000000000000000000000000000')\n   *\n   * caver.abi.decodeParameter('tuple(bytes32,bool)', '0xabdef18710a18a18abdef18710a18a18abdef18710a18a18abdef18710a18a180000000000000000000000000000000000000000000000000000000000000001')\n   *\n   * caver.abi.decodeParameter(\n   *     {\n   *         components: [{ name: 'a', type: 'bytes32' }, { name: 'b', type: 'bool' }],\n   *         name: 'tupleExample',\n   *         type: 'tuple',\n   *     }, '0xabdef18710a18a18abdef18710a18a18abdef18710a18a18abdef18710a18a180000000000000000000000000000000000000000000000000000000000000001'\n   * )\n   *\n   * @method decodeParameter\n   * @memberof ABI\n   * @instance\n   * @param {string|object} type The type of the parameter, see the {@link http://solidity.readthedocs.io/en/develop/types.html|solidity documentation} for a list of types.\n   * @param {string} encodedString The ABI byte code to decode.\n   * @return {string} plain param\n   */\n\n\n  decodeParameter(type, encodedString) {\n    return this.decodeParameters([type], encodedString)[0];\n  }\n  /**\n   * Decodes ABI encoded parameters to its JavaScript types.\n   *\n   * @example\n   * caver.abi.decodeParameters(['string', 'uint256'], '0x000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000ea000000000000000000000000000000000000000000000000000000000000000848656c6c6f212521000000000000000000000000000000000000000000000000')\n   *\n   * caver.abi.decodeParameters(\n   *  ['tuple(bytes32,bool)', 'tuple(bool,address)'],\n   *  '0xabdef18710a18a18abdef18710a18a18abdef18710a18a18abdef18710a18a180000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000077656c636f6d6520746f20657468657265756d2e'\n   * )\n   *\n   * caver.abi.decodeParameters([{\n   *     type: 'string',\n   *     name: 'mystring'\n   * },{\n   *     type: 'uint256',\n   *     name: 'myNumber'\n   * }], '0x000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000ea000000000000000000000000000000000000000000000000000000000000000848656c6c6f212521000000000000000000000000000000000000000000000000')\n   *\n   * caver.abi.decodeParameters(\n   *     [\n   *         {\n   *             components: [{ name: 'a', type: 'bytes32' }, { name: 'b', type: 'bool' }],\n   *             name: 'tupleExample',\n   *             type: 'tuple',\n   *         },\n   *         {\n   *             components: [{ name: 'c', type: 'bool' }, { name: 'd', type: 'address' }],\n   *             name: 'tupleExample2',\n   *             type: 'tuple',\n   *         },\n   *     ],\n   *     '0xabdef18710a18a18abdef18710a18a18abdef18710a18a18abdef18710a18a180000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000077656c636f6d6520746f20657468657265756d2e'\n   * )\n   *\n   * @method decodeParameters\n   * @memberof ABI\n   * @instance\n   * @param {Array.<string|object>} typesArray An array with types or an array of JSON interface outputs. See the {@link http://solidity.readthedocs.io/en/develop/types.html|solidity documentation} for a list of types.\n   * @param {string} encodedString The ABI byte code to decode.\n   * @return {object} An object which includes plain params. You can use `result[0]` as it is provided to be accessed like an array in the order of the parameters.\n   */\n\n\n  decodeParameters(outputs, encodedString) {\n    return this.decodeParametersWith(outputs, encodedString, false);\n  }\n  /**\n   * Should be used to decode list of params\n   *\n   * @method decodeParametersWith\n   * @memberof ABI\n   * @instance\n   * @ignore\n   * @param {Array} outputs\n   * @param {string} bytes\n   * @param {Boolean} loose must be passed for decoding bytes and string parameters for logs emitted with solc 0.4.x\n   *                        Please refer to https://github.com/ChainSafe/web3.js/commit/e80337e16e5c04683fc40148378775234c28e0fb.\n   * @return {object} An object which includes plain params. You can use `result[0]` as it is provided to be accessed like an array in the order of the parameters.\n   */\n\n\n  decodeParametersWith(outputs, bytes, loose) {\n    if (outputs.length > 0 && (!bytes || bytes === '0x' || bytes === '0X')) {\n      throw new Error(\"Returned values aren't valid, did it run Out of Gas? \" + 'You might also see this error if you are not using the ' + 'correct ABI for the contract you are retrieving data from, ' + 'requesting data from a block number that does not exist, ' + 'or querying a node which is not fully synced.');\n    }\n\n    const res = ethersAbiCoder.decode(this.mapTypes(outputs), `0x${bytes.replace(/0x/i, '')}`, loose);\n    const returnValue = new Result();\n    returnValue.__length__ = 0;\n    outputs.forEach(function (output, i) {\n      let decodedValue = res[returnValue.__length__];\n      decodedValue = decodedValue === '0x' ? null : decodedValue;\n      returnValue[i] = decodedValue;\n\n      if (_.isObject(output) && output.name) {\n        returnValue[output.name] = decodedValue;\n      }\n\n      returnValue.__length__++;\n    });\n    return returnValue;\n  }\n  /**\n   * Decodes ABI encoded log data and indexed topic data.\n   *\n   * @example\n   * caver.abi.decodeLog(\n   *     [\n   *         {\n   *             type: 'string',\n   *             name: 'mystring'\n   *         },{\n   *             type: 'uint256',\n   *             name: 'myNumber',\n   *             indexed: true\n   *         },{\n   *             type: 'uint8',\n   *             name: 'mySmallNumber',\n   *             indexed: true\n   *          }\n   *     ],\n   *     '0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000748656c6c6f252100000000000000000000000000000000000000000000000000',\n   *      ['0x000000000000000000000000000000000000000000000000000000000000f310', '0x0000000000000000000000000000000000000000000000000000000000000010']\n   * )\n   *\n   *\n   * @method decodeLog\n   * @memberof ABI\n   * @instance\n   * @param {Array.<object>} inputs An array of JSON interface inputs. See the solidity documentation for a list of types.\n   * @param {string} data The ABI byte code in the data field of a log.\n   * @param {*} topics An array of the index parameter topics of the log. This array doesn't have topic[0] if it is a non-anonymous event, or otherwise, it has topic[0].\n   * @return {object} An object which includes plain params. You can use `result[0]` as it is provided to be accessed like an array in the order of the parameters.\n   */\n\n\n  decodeLog(inputs, data, topics) {\n    const _this = this;\n\n    topics = _.isArray(topics) ? topics : [topics];\n    data = data || '';\n    const notIndexedInputs = [];\n    const indexedParams = [];\n    let topicCount = 0; // TODO check for anonymous logs?\n\n    inputs.forEach(function (input, i) {\n      if (input.indexed) {\n        indexedParams[i] = ['bool', 'int', 'uint', 'address', 'fixed', 'ufixed'].find(function (staticType) {\n          return input.type.indexOf(staticType) !== -1;\n        }) ? _this.decodeParameter(input.type, topics[topicCount]) : topics[topicCount];\n        topicCount++;\n      } else {\n        notIndexedInputs[i] = input;\n      }\n    });\n    const nonIndexedData = data;\n    const notIndexedParams = nonIndexedData ? this.decodeParametersWith(notIndexedInputs, nonIndexedData, true) : [];\n    const returnValue = new Result();\n    returnValue.__length__ = 0;\n    inputs.forEach(function (res, i) {\n      returnValue[i] = res.type === 'string' ? '' : null;\n\n      if (typeof notIndexedParams[i] !== 'undefined') {\n        returnValue[i] = notIndexedParams[i];\n      }\n\n      if (typeof indexedParams[i] !== 'undefined') {\n        returnValue[i] = indexedParams[i];\n      }\n\n      if (res.name) {\n        returnValue[res.name] = returnValue[i];\n      }\n\n      returnValue.__length__++;\n    });\n    return returnValue;\n  }\n\n}\n/** @instance */\n\n\nconst abi = new ABI();\nmodule.exports = abi;","map":{"version":3,"sources":["/home/lorancecall/Projects/vuejs-tutorial/testpage/node_modules/caver-js/packages/caver-abi/src/index.js"],"names":["_","require","EthersAbiCoder","AbiCoder","ParamType","utils","ethersAbiCoder","type","value","match","isArray","isObject","constructor","name","toString","Result","ABI","encodeFunctionSignature","functionSignature","_jsonInterfaceMethodToString","sha3","slice","encodeEventSignature","eventSignature","encodeParameter","param","encodeParameters","types","params","self","mapTypes","map","index","formatParam","Error","includes","coder","_getCoder","from","modifyParams","p","replacedType","replace","parameterType","gotCoder","coders","forEach","c","i","encode","encodeContractDeploy","jsonInterface","bytecode","args","constructorInterface","filter","constructorInputs","inputs","isEmpty","length","constructorTypes","mappedTypes","isSimplifiedStructFormat","structName","Object","keys","push","assign","mapStructNameAndType","components","mapStructToCoderFormat","indexOf","struct","key","paramTypeBytes","paramTypeBytesArray","paramTypeNumber","paramTypeNumberArray","isBN","isBigNumber","size","parseInt","leftPad","Buffer","isBuffer","toHex","maxSize","substring","rightPad","encodeFunctionCall","decodeFunctionCall","abi","functionCall","addHexPrefix","funcSig","extractFuncSig","decodeParameters","decodeParameter","encodedString","outputs","decodeParametersWith","bytes","loose","res","decode","returnValue","__length__","output","decodedValue","decodeLog","data","topics","_this","notIndexedInputs","indexedParams","topicCount","input","indexed","find","staticType","nonIndexedData","notIndexedParams","module","exports"],"mappings":"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","sourcesContent":["/*\n    Modifications copyright 2018 The caver-js Authors\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n\n    This file is derived from web3.js/packages/web3-eth-abi/src/index.js (2019/06/12).\n    Modified and improved for the caver-js development.\n*/\n/**\n * @file index.js\n * @author Marek Kotewicz <marek@parity.io>\n * @author Fabian Vogelsteller <fabian@frozeman.de>\n * @date 2017\n */\n\nconst _ = require('lodash')\n\nconst EthersAbiCoder = require('@ethersproject/abi').AbiCoder\nconst ParamType = require('@ethersproject/abi').ParamType\nconst utils = require('../../caver-utils')\n\nconst ethersAbiCoder = new EthersAbiCoder(function(type, value) {\n    if (type.match(/^u?int/) && !_.isArray(value) && (!_.isObject(value) || value.constructor.name !== 'BN')) {\n        return value.toString()\n    }\n    return value\n})\n\n// result method\nfunction Result() {}\n\nclass ABI {\n    /**\n     * Encodes the function signature to its ABI signature, which are the first 4 bytes of the sha3 hash of the function name including parameter types.\n     *\n     * @example\n     * caver.abi.encodeFunctionSignature({ name: 'myMethod', type: 'function', inputs: [{ type: 'uint256', name: 'myNumber' },{ type: 'string', name: 'mystring' }]})\n     *\n     * caver.abi.encodeFunctionSignature('myMethod(uint256,string)')\n     *\n     * @method encodeFunctionSignature\n     * @memberof ABI\n     * @instance\n     * @param {string|object} functionSignature The function signature or the JSON interface object of the function to encode. If this is a string, it has to be in the form `function(type, type,...)`, e.g: `myFunction(uint256,uint32[],bytes10,bytes)`.\n     * @return {string} function signature\n     */\n    encodeFunctionSignature(functionSignature) {\n        if (_.isObject(functionSignature)) {\n            functionSignature = utils._jsonInterfaceMethodToString(functionSignature)\n        }\n\n        return utils.sha3(functionSignature).slice(0, 10)\n    }\n\n    /**\n     * Encodes the event signature to its ABI signature, which is the sha3 hash of the event name including input parameter types.\n     *\n     * @example\n     * caver.abi.encodeEventSignature({ name: 'myEvent', type: 'event', inputs: [{ type: 'uint256', name: 'myNumber' },{ type: 'string', name: 'mystring' }]})\n     *\n     * caver.abi.encodeEventSignature('myEvent(uint256,bytes32)')\n     *\n     * @method encodeEventSignature\n     * @memberof ABI\n     * @instance\n     * @param {string|object} eventSignature The event signature or the JSON interface object of the event to encode. If this is a string, it has to be in the form `event(type,type,...)`, e.g: `myEvent(uint256,uint32[],bytes10,bytes)`.\n     * @return {string} event signature\n     */\n    encodeEventSignature(eventSignature) {\n        if (_.isObject(eventSignature)) {\n            eventSignature = utils._jsonInterfaceMethodToString(eventSignature)\n        }\n\n        return utils.sha3(eventSignature)\n    }\n\n    /**\n     * Encodes a parameter based on its type to its ABI representation.\n     *\n     * @example\n     * caver.abi.encodeParameter('uint256', '2345675643')\n     * caver.abi.encodeParameter('bytes32[]', [caver.utils.rightPad('0xdf3234', 64), caver.utils.rightPad('0xfdfd', 64)])\n     * caver.abi.encodeParameter('tuple(bytes32,bool)', ['0xabdef18710a18a18abdef18710a18a18abdef18710a18a18abdef18710a18a18', true])\n     *\n     * @method encodeParameter\n     * @memberof ABI\n     * @instance\n     * @param {string|object} type The type of the parameter, see the {@link http://solidity.readthedocs.io/en/develop/types.html|solidity documentation}  for a list of types.\n     * @param {*} param The actual parameter to encode.\n     * @return {string} encoded plain param\n     */\n    encodeParameter(type, param) {\n        return this.encodeParameters([type], [param])\n    }\n\n    /**\n     * Encodes function parameters based on its JSON interface object.\n     *\n     * @example\n     * caver.abi.encodeParameters(['uint256','string'], ['2345675643', 'Hello!%'])\n     *\n     * caver.abi.encodeParameters(\n     *      ['tuple(bytes32,bool)', 'tuple(bool,address)'],\n     *      [['0xabdef18710a18a18abdef18710a18a18abdef18710a18a18abdef18710a18a18', true], [true, '0x77656c636f6d6520746f20657468657265756d2e']]\n     * )\n     *\n     * caver.abi.encodeParameters(\n     *   [\n     *       {\n     *           components: [{ name: 'a', type: 'bytes32' }, { name: 'b', type: 'bool' }],\n     *           name: 'tupleExample',\n     *           type: 'tuple',\n     *       },\n     *       {\n     *           components: [{ name: 'c', type: 'bool' }, { name: 'd', type: 'address' }],\n     *           name: 'tupleExample2',\n     *          type: 'tuple',\n     *      },\n     *  ],\n     *  [\n     *      ['0xabdef18710a18a18abdef18710a18a18abdef18710a18a18abdef18710a18a18', true],\n     *      [true, '0x77656c636f6d6520746f20657468657265756d2e']\n     *  ]\n     *)\n     *\n     * @method encodeParameters\n     * @memberof ABI\n     * @instance\n     * @param {Array.<string|object>} types An array with types or a JSON interface of a function. See the {@link http://solidity.readthedocs.io/en/develop/types.html|solidity documentation} for a list of types.\n     * @param {Array.<*>} params The parameters to encode.\n     * @return {string} encoded list of params\n     */\n    encodeParameters(types, params) {\n        const self = this\n        types = self.mapTypes(types)\n\n        params = params.map(function(param, index) {\n            let type = types[index]\n\n            // { components: [[Object], [Object]], name: 'b', type: 'tuple' }\n            if (typeof type === 'object' && type.type) {\n                // We may get a named type of shape {name, type}\n                type = type.type\n            }\n\n            param = self.formatParam(type, param)\n\n            // If the type is string but number comes in, ethersAbiCoder ignores the type and encodes successfully.\n            // To avoid invalid encoding value, adding error handling.\n            if (type === 'string' && typeof param !== 'string') throw new Error(`Invalid parameter: Parameter value and type do not match.`)\n\n            // Format params for tuples\n            if (typeof type === 'string' && type.includes('tuple')) {\n                const coder = ethersAbiCoder._getCoder(ParamType.from(type))\n                // eslint-disable-next-line no-shadow\n                const modifyParams = (coder, param) => {\n                    if (coder.name === 'array') {\n                        return param.map(p => {\n                            // `coder.type.replace('[]','')` can handle'tuple(string,string)[]', but cannot handle `tuple(string,string)[3]'.\n                            // Therefore, in order to handle tuple arrays of fixed length, the logic is changed to handle strings using regular expression expressions.\n                            const replacedType = coder.type.replace(/\\[[1-9]*\\]/g, '')\n                            const parameterType = ParamType.from(replacedType)\n                            const gotCoder = ethersAbiCoder._getCoder(parameterType)\n                            modifyParams(gotCoder, p)\n                        })\n                    }\n                    coder.coders.forEach((c, i) => {\n                        if (c.name === 'tuple') {\n                            modifyParams(c, param[i])\n                        } else {\n                            param[i] = self.formatParam(c.name, param[i])\n                        }\n                    })\n                }\n                modifyParams(coder, param)\n            }\n\n            return param\n        })\n\n        return ethersAbiCoder.encode(types, params)\n    }\n\n    /**\n     * Should be used to encode smart contract deployment with constructor arguments.\n     *\n     * @example\n     * // There is no argument for constructor\n     * caver.abi.encodeContractDeploy([\n     *     { \"constant\": true, \"inputs\": [], \"name\": \"count\", \"outputs\": [ { \"name\": \"\", \"type\": \"uint256\" } ], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\" },\n     *     { \"constant\": true, \"inputs\": [], \"name\": \"getBlockNumber\", \"outputs\": [ { \"name\": \"\", \"type\": \"uint256\" } ], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\" },\n     *     { \"constant\": false, \"inputs\": [ { \"name\": \"_count\", \"type\": \"uint256\" } ], \"name\": \"setCount\", \"outputs\": [], \"payable\": false, \"stateMutability\": \"nonpayable\", \"type\": \"function\" }\n     * ],'0x{byte code}')\n     *\n     * // There is one argument for constructor\n     * caver.abi.encodeContractDeploy([\n     *     { \"constant\": true, \"inputs\": [], \"name\": \"count\", \"outputs\": [ { \"name\": \"\", \"type\": \"uint256\" } ], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\" },\n     *     { \"constant\": true, \"inputs\": [], \"name\": \"getBlockNumber\", \"outputs\": [ { \"name\": \"\", \"type\": \"uint256\" } ], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\" },\n     *     { \"constant\": false, \"inputs\": [ { \"name\": \"_count\", \"type\": \"uint256\" } ], \"name\": \"setCount\", \"outputs\": [], \"payable\": false, \"stateMutability\": \"nonpayable\", \"type\": \"function\" },\n     *     { \"inputs\": [ { \"name\": \"_a\", \"type\": \"uint256\" } ], \"payable\": false, \"stateMutability\": \"nonpayable\", \"type\": \"constructor\" }\n     * ],'0x{byte code}', 1)\n     *\n     * @method encodeContractDeploy\n     * @memberof ABI\n     * @instance\n     * @param {Array.<object>} jsonInterface The JSON interface of the contract.\n     * @param {string} bytecode A bytecode of smart contract to be deployed.\n     * @param {...*} [args] Arguments to pass to the constructor.\n     * @return {string} bytecode + args\n     */\n    encodeContractDeploy(jsonInterface, bytecode, ...args) {\n        if (!jsonInterface) {\n            throw new Error('jsonInterface should be provided for encoding contract deployment.')\n        }\n\n        if (!bytecode) {\n            throw new Error('bytecode should be provided for encoding contract deployment.')\n        }\n\n        const constructorInterface = jsonInterface.filter(({ type }) => type === 'constructor')[0]\n        const constructorInputs = constructorInterface && constructorInterface.inputs\n\n        // If constructor doesn't exist in smart contract, only bytecode is needed for deploying.\n        if (!constructorInterface || !constructorInputs || _.isEmpty(constructorInputs)) {\n            return bytecode\n        }\n\n        if (constructorInputs.length !== args.length) {\n            throw new Error(`invalid number of parameters for deploying. Got ${args.length} expected ${constructorInputs.length}!`)\n        }\n\n        const constructorTypes = constructorInputs.map(({ type }) => type)\n\n        return bytecode + this.encodeParameters(constructorTypes, args).replace('0x', '')\n    }\n\n    /**\n     * Map types if simplified format is used\n     *\n     * @method mapTypes\n     * @memberof ABI\n     * @ignore\n     * @instance\n     * @param {Array} types\n     * @return {Array}\n     */\n    mapTypes(types) {\n        const self = this\n        const mappedTypes = []\n        types.forEach(function(type) {\n            // Remap `function` type params to bytes24 since Ethers does not\n            // recognize former type. Solidity docs say `Function` is a bytes24\n            // encoding the contract address followed by the function selector hash.\n            if (typeof type === 'object' && type.type === 'function') {\n                type = { ...type, type: 'bytes24' }\n            }\n            if (self.isSimplifiedStructFormat(type)) {\n                const structName = Object.keys(type)[0]\n                mappedTypes.push(\n                    Object.assign(self.mapStructNameAndType(structName), {\n                        components: self.mapStructToCoderFormat(type[structName]),\n                    })\n                )\n\n                return\n            }\n\n            mappedTypes.push(type)\n        })\n        return mappedTypes\n    }\n\n    /**\n     * Check if type is simplified struct format\n     *\n     * @method isSimplifiedStructFormat\n     * @memberof ABI\n     * @ignore\n     * @instance\n     * @param {string|Object} type\n     * @returns {boolean}\n     */\n    isSimplifiedStructFormat(type) {\n        return typeof type === 'object' && typeof type.components === 'undefined' && typeof type.name === 'undefined'\n    }\n\n    /**\n     * Maps the correct tuple type and name when the simplified format in encode/decodeParameter is used\n     *\n     * @method mapStructNameAndType\n     * @memberof ABI\n     * @ignore\n     * @instance\n     * @param {string} structName\n     * @return {{type: string, name: *}}\n     */\n    mapStructNameAndType(structName) {\n        let type = 'tuple'\n\n        if (structName.indexOf('[]') > -1) {\n            type = 'tuple[]'\n            structName = structName.slice(0, -2)\n        }\n\n        return { type: type, name: structName }\n    }\n\n    /**\n     * Maps the simplified format in to the expected format of the ABI\n     *\n     * @method mapStructToCoderFormat\n     * @memberof ABI\n     * @ignore\n     * @instance\n     * @param {object} struct\n     * @return {Array}\n     */\n    mapStructToCoderFormat(struct) {\n        const self = this\n        const components = []\n        Object.keys(struct).forEach(function(key) {\n            if (typeof struct[key] === 'object') {\n                components.push(\n                    Object.assign(self.mapStructNameAndType(key), {\n                        components: self.mapStructToCoderFormat(struct[key]),\n                    })\n                )\n\n                return\n            }\n\n            components.push({\n                name: key,\n                type: struct[key],\n            })\n        })\n\n        return components\n    }\n\n    /**\n     * Handle some formatting of params for backwards compatability with Ethers V4\n     *\n     * @method formatParam\n     * @memberof ABI\n     * @ignore\n     * @param {string} - type\n     * @param {any} - param\n     * @return {string|Array.<string>} - The formatted param\n     */\n    formatParam(type, param) {\n        const paramTypeBytes = /^bytes([0-9]*)$/\n        const paramTypeBytesArray = /^bytes([0-9]*)\\[\\]$/\n        const paramTypeNumber = /^(u?int)([0-9]*)$/\n        const paramTypeNumberArray = /^(u?int)([0-9]*)\\[\\]$/\n\n        // Format BN to string\n        if (utils.isBN(param) || utils.isBigNumber(param)) {\n            return param.toString(10)\n        }\n\n        if (type.match(paramTypeBytesArray) || type.match(paramTypeNumberArray)) {\n            return param.map(p => this.formatParam(type.replace('[]', ''), p))\n        }\n\n        // Format correct width for u?int[0-9]*\n        let match = type.match(paramTypeNumber)\n        if (match) {\n            const size = parseInt(match[2] || '256')\n            if (size / 8 < param.length) {\n                // pad to correct bit width\n                param = utils.leftPad(param, size)\n            }\n        }\n\n        // Format correct length for bytes[0-9]+\n        match = type.match(paramTypeBytes)\n        if (match) {\n            if (Buffer.isBuffer(param)) {\n                param = utils.toHex(param)\n            }\n\n            // format to correct length\n            const size = parseInt(match[1])\n            if (size) {\n                let maxSize = size * 2\n                if (param.substring(0, 2) === '0x') {\n                    maxSize += 2\n                }\n                if (param.length < maxSize) {\n                    // pad to correct length\n                    param = utils.rightPad(param, size * 2)\n                }\n            }\n\n            // format odd-length bytes to even-length\n            if (param.length % 2 === 1) {\n                param = `0x0${param.substring(2)}`\n            }\n        }\n\n        return param\n    }\n\n    /**\n     * Encodes a function call from its json interface and parameters.\n     *\n     * @example\n     * caver.abi.encodeFunctionCall({\n     *     name: 'myMethod',\n     *     type: 'function',\n     *     inputs: [{\n     *         type: 'uint256',\n     *         name: 'myNumber'\n     * },{\n     *         type: 'string',\n     *         name: 'mystring'\n     *     }]\n     * }, ['2345675643', 'Hello!%'])\n     *\n     * @method encodeFunctionCall\n     * @memberof ABI\n     * @instance\n     * @param {object} jsonInterface The JSON interface object of a function.\n     * @param {Array.<*>} [params] The parameters to encode.\n     * @return {string} The encoded ABI for this function call\n     */\n    encodeFunctionCall(jsonInterface, params) {\n        params = params || []\n        return this.encodeFunctionSignature(jsonInterface) + this.encodeParameters(jsonInterface.inputs, params).replace('0x', '')\n    }\n\n    /**\n     * Decodes a function call from its abi object of a function and returns parameters.\n     * If the function signature of the `abi` passed as a parameter does not match the function signature of the `functionCall`, an error is returned.\n     *\n     * @example\n     * const abi = {\n     *    name: 'myMethod',\n     *    type: 'function',\n     *    inputs: [\n     *        {\n     *            type: 'uint256',\n     *           name: 'myNumber',\n     *       },\n     *       {\n     *           type: 'string',\n     *           name: 'mystring',\n     *       },\n     *   ],\n     * }\n     * const functionCall = '0x24ef0...'\n     * caver.abi.decodeFunctionCall(abi, functionCall)\n     *\n     * @method decodeFunctionCall\n     * @memberof ABI\n     * @instance\n     * @param {object} abi The abi object of a function.\n     * @param {string} functionCall The encoded function call string.\n     * @return {object} An object which includes plain params. You can use `result[0]` as it is provided to be accessed like an array in the order of the parameters.\n     */\n    decodeFunctionCall(abi, functionCall) {\n        functionCall = utils.addHexPrefix(functionCall)\n\n        if (!_.isObject(abi) || _.isArray(abi))\n            throw new Error(\n                `Invalid abi parameter type: To decode function call, you need to pass an abi object of the function as a first parameter.`\n            )\n        if (!abi.name || !abi.inputs)\n            throw new Error(`Insufficient info in abi object: The function name and inputs must be defined inside the abi function object.`)\n\n        const funcSig = this.encodeFunctionSignature(abi)\n        const extractFuncSig = functionCall.slice(0, funcSig.length)\n\n        if (funcSig !== extractFuncSig)\n            throw new Error(\n                `Invalid function signature: The function signature of the abi as a parameter and the function signatures extracted from the function call string do not match.`\n            )\n\n        return this.decodeParameters(abi.inputs, `0x${functionCall.slice(funcSig.length)}`)\n    }\n\n    /**\n     * Decodes an ABI encoded parameter to its JavaScript type.\n     *\n     * @example\n     * caver.abi.decodeParameter('uint256', '0x0000000000000000000000000000000000000000000000000000000000000010')\n     *\n     * caver.abi.decodeParameter('string', '0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000848656c6c6f212521000000000000000000000000000000000000000000000000')\n     *\n     * caver.abi.decodeParameter('tuple(bytes32,bool)', '0xabdef18710a18a18abdef18710a18a18abdef18710a18a18abdef18710a18a180000000000000000000000000000000000000000000000000000000000000001')\n     *\n     * caver.abi.decodeParameter(\n     *     {\n     *         components: [{ name: 'a', type: 'bytes32' }, { name: 'b', type: 'bool' }],\n     *         name: 'tupleExample',\n     *         type: 'tuple',\n     *     }, '0xabdef18710a18a18abdef18710a18a18abdef18710a18a18abdef18710a18a180000000000000000000000000000000000000000000000000000000000000001'\n     * )\n     *\n     * @method decodeParameter\n     * @memberof ABI\n     * @instance\n     * @param {string|object} type The type of the parameter, see the {@link http://solidity.readthedocs.io/en/develop/types.html|solidity documentation} for a list of types.\n     * @param {string} encodedString The ABI byte code to decode.\n     * @return {string} plain param\n     */\n    decodeParameter(type, encodedString) {\n        return this.decodeParameters([type], encodedString)[0]\n    }\n\n    /**\n     * Decodes ABI encoded parameters to its JavaScript types.\n     *\n     * @example\n     * caver.abi.decodeParameters(['string', 'uint256'], '0x000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000ea000000000000000000000000000000000000000000000000000000000000000848656c6c6f212521000000000000000000000000000000000000000000000000')\n     *\n     * caver.abi.decodeParameters(\n     *  ['tuple(bytes32,bool)', 'tuple(bool,address)'],\n     *  '0xabdef18710a18a18abdef18710a18a18abdef18710a18a18abdef18710a18a180000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000077656c636f6d6520746f20657468657265756d2e'\n     * )\n     *\n     * caver.abi.decodeParameters([{\n     *     type: 'string',\n     *     name: 'mystring'\n     * },{\n     *     type: 'uint256',\n     *     name: 'myNumber'\n     * }], '0x000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000ea000000000000000000000000000000000000000000000000000000000000000848656c6c6f212521000000000000000000000000000000000000000000000000')\n     *\n     * caver.abi.decodeParameters(\n     *     [\n     *         {\n     *             components: [{ name: 'a', type: 'bytes32' }, { name: 'b', type: 'bool' }],\n     *             name: 'tupleExample',\n     *             type: 'tuple',\n     *         },\n     *         {\n     *             components: [{ name: 'c', type: 'bool' }, { name: 'd', type: 'address' }],\n     *             name: 'tupleExample2',\n     *             type: 'tuple',\n     *         },\n     *     ],\n     *     '0xabdef18710a18a18abdef18710a18a18abdef18710a18a18abdef18710a18a180000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000077656c636f6d6520746f20657468657265756d2e'\n     * )\n     *\n     * @method decodeParameters\n     * @memberof ABI\n     * @instance\n     * @param {Array.<string|object>} typesArray An array with types or an array of JSON interface outputs. See the {@link http://solidity.readthedocs.io/en/develop/types.html|solidity documentation} for a list of types.\n     * @param {string} encodedString The ABI byte code to decode.\n     * @return {object} An object which includes plain params. You can use `result[0]` as it is provided to be accessed like an array in the order of the parameters.\n     */\n    decodeParameters(outputs, encodedString) {\n        return this.decodeParametersWith(outputs, encodedString, false)\n    }\n\n    /**\n     * Should be used to decode list of params\n     *\n     * @method decodeParametersWith\n     * @memberof ABI\n     * @instance\n     * @ignore\n     * @param {Array} outputs\n     * @param {string} bytes\n     * @param {Boolean} loose must be passed for decoding bytes and string parameters for logs emitted with solc 0.4.x\n     *                        Please refer to https://github.com/ChainSafe/web3.js/commit/e80337e16e5c04683fc40148378775234c28e0fb.\n     * @return {object} An object which includes plain params. You can use `result[0]` as it is provided to be accessed like an array in the order of the parameters.\n     */\n    decodeParametersWith(outputs, bytes, loose) {\n        if (outputs.length > 0 && (!bytes || bytes === '0x' || bytes === '0X')) {\n            throw new Error(\n                \"Returned values aren't valid, did it run Out of Gas? \" +\n                    'You might also see this error if you are not using the ' +\n                    'correct ABI for the contract you are retrieving data from, ' +\n                    'requesting data from a block number that does not exist, ' +\n                    'or querying a node which is not fully synced.'\n            )\n        }\n\n        const res = ethersAbiCoder.decode(this.mapTypes(outputs), `0x${bytes.replace(/0x/i, '')}`, loose)\n        const returnValue = new Result()\n        returnValue.__length__ = 0\n\n        outputs.forEach(function(output, i) {\n            let decodedValue = res[returnValue.__length__]\n            decodedValue = decodedValue === '0x' ? null : decodedValue\n\n            returnValue[i] = decodedValue\n\n            if (_.isObject(output) && output.name) {\n                returnValue[output.name] = decodedValue\n            }\n\n            returnValue.__length__++\n        })\n\n        return returnValue\n    }\n\n    /**\n     * Decodes ABI encoded log data and indexed topic data.\n     *\n     * @example\n     * caver.abi.decodeLog(\n     *     [\n     *         {\n     *             type: 'string',\n     *             name: 'mystring'\n     *         },{\n     *             type: 'uint256',\n     *             name: 'myNumber',\n     *             indexed: true\n     *         },{\n     *             type: 'uint8',\n     *             name: 'mySmallNumber',\n     *             indexed: true\n     *          }\n     *     ],\n     *     '0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000748656c6c6f252100000000000000000000000000000000000000000000000000',\n     *      ['0x000000000000000000000000000000000000000000000000000000000000f310', '0x0000000000000000000000000000000000000000000000000000000000000010']\n     * )\n     *\n     *\n     * @method decodeLog\n     * @memberof ABI\n     * @instance\n     * @param {Array.<object>} inputs An array of JSON interface inputs. See the solidity documentation for a list of types.\n     * @param {string} data The ABI byte code in the data field of a log.\n     * @param {*} topics An array of the index parameter topics of the log. This array doesn't have topic[0] if it is a non-anonymous event, or otherwise, it has topic[0].\n     * @return {object} An object which includes plain params. You can use `result[0]` as it is provided to be accessed like an array in the order of the parameters.\n     */\n    decodeLog(inputs, data, topics) {\n        const _this = this\n        topics = _.isArray(topics) ? topics : [topics]\n\n        data = data || ''\n\n        const notIndexedInputs = []\n        const indexedParams = []\n        let topicCount = 0\n\n        // TODO check for anonymous logs?\n\n        inputs.forEach(function(input, i) {\n            if (input.indexed) {\n                indexedParams[i] = ['bool', 'int', 'uint', 'address', 'fixed', 'ufixed'].find(function(staticType) {\n                    return input.type.indexOf(staticType) !== -1\n                })\n                    ? _this.decodeParameter(input.type, topics[topicCount])\n                    : topics[topicCount]\n                topicCount++\n            } else {\n                notIndexedInputs[i] = input\n            }\n        })\n\n        const nonIndexedData = data\n        const notIndexedParams = nonIndexedData ? this.decodeParametersWith(notIndexedInputs, nonIndexedData, true) : []\n\n        const returnValue = new Result()\n        returnValue.__length__ = 0\n\n        inputs.forEach(function(res, i) {\n            returnValue[i] = res.type === 'string' ? '' : null\n\n            if (typeof notIndexedParams[i] !== 'undefined') {\n                returnValue[i] = notIndexedParams[i]\n            }\n            if (typeof indexedParams[i] !== 'undefined') {\n                returnValue[i] = indexedParams[i]\n            }\n\n            if (res.name) {\n                returnValue[res.name] = returnValue[i]\n            }\n\n            returnValue.__length__++\n        })\n\n        return returnValue\n    }\n}\n\n/** @instance */\nconst abi = new ABI()\n\nmodule.exports = abi\n"]},"metadata":{},"sourceType":"script"}