{"ast":null,"code":"/*\n    Modifications copyright 2018 The caver-js Authors\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n\n    This file is derived from web3.js/packages/web3-providers-http/src/index.js (2019/06/12).\n    Modified and improved for the caver-js development.\n*/\n\n/** @file httpprovider.js\n * @authors:\n *   Marek Kotewicz <marek@parity.io>\n *   Marian Oancea\n *   Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2015\n */\nconst XHR2 = require('xhr2-cookies').XMLHttpRequest;\n\nconst http = require('http');\n\nconst https = require('https');\n\nconst errors = require('../../../caver-core-helpers').errors;\n/**\n * HttpProvider should be used to send rpc calls over http\n */\n\n/**\n * @param       {string} host\n * @param       {object} options\n * @constructor\n */\n\n\nconst HttpProvider = function HttpProvider(host, options) {\n  options = options || {};\n  this.host = host || 'http://localhost:8545';\n  this.timeout = options.timeout || 0;\n  this.headers = options.headers;\n  this.connected = false; // keepAlive is true unless explicitly set to false\n\n  const keepAlive = options.keepAlive !== false;\n  this.host = host || 'http://localhost:8545';\n\n  if (!this.agent) {\n    if (this.host.substring(0, 5) === 'https') {\n      this.httpsAgent = new https.Agent({\n        keepAlive\n      });\n    } else {\n      this.httpAgent = new http.Agent({\n        keepAlive\n      });\n    }\n  }\n};\n/**\n * _prepareRequest create request instance\n */\n\n\nHttpProvider.prototype._prepareRequest = function () {\n  let request; // the current runtime is a browser\n\n  if (typeof XMLHttpRequest !== 'undefined') {\n    // eslint-disable-next-line no-undef\n    request = new XMLHttpRequest();\n  } else {\n    request = new XHR2();\n    const agents = {\n      httpsAgent: this.httpsAgent,\n      httpAgent: this.httpAgent,\n      baseUrl: this.baseUrl\n    };\n\n    if (this.agent) {\n      agents.httpsAgent = this.agent.https;\n      agents.httpAgent = this.agent.http;\n      agents.baseUrl = this.agent.baseUrl;\n    }\n\n    request.nodejsSet(agents);\n  }\n\n  request.open('POST', this.host, true);\n  request.setRequestHeader('Content-Type', 'application/json');\n  request.timeout = this.timeout;\n  request.withCredentials = this.withCredentials;\n\n  if (this.headers) {\n    this.headers.forEach(function (header) {\n      request.setRequestHeader(header.name, header.value);\n    });\n  }\n\n  return request;\n};\n/**\n * Should be used to make async request\n *\n * @method send\n * @param {Object} payload\n * @param {Function} callback triggered on end with (err, result)\n */\n\n\nHttpProvider.prototype.send = function (payload, callback) {\n  const _this = this;\n\n  const request = this._prepareRequest();\n\n  request.onreadystatechange = function () {\n    if (request.readyState === 4 && request.timeout !== 1) {\n      let result = request.responseText;\n      let error = null;\n\n      try {\n        result = JSON.parse(result);\n      } catch (e) {\n        error = errors.InvalidResponse(request.responseText);\n      }\n\n      _this.connected = true;\n      callback(error, result);\n    }\n  };\n\n  request.ontimeout = function () {\n    _this.connected = false;\n    callback(errors.ConnectionTimeout(this.timeout));\n  };\n\n  try {\n    request.send(JSON.stringify(payload));\n  } catch (error) {\n    this.connected = false;\n    callback(errors.InvalidConnection(this.host));\n  }\n};\n\nHttpProvider.prototype.disconnect = function () {// NO OP\n};\n\nHttpProvider.prototype.supportsSubscriptions = function () {\n  return false;\n};\n\nmodule.exports = HttpProvider;","map":{"version":3,"sources":["/home/lorancecall/Projects/vuejs-tutorial/testpage/node_modules/caver-js/packages/caver-core-requestmanager/caver-providers-http/src/index.js"],"names":["XHR2","require","XMLHttpRequest","http","https","errors","HttpProvider","host","options","timeout","headers","connected","keepAlive","agent","substring","httpsAgent","Agent","httpAgent","prototype","_prepareRequest","request","agents","baseUrl","nodejsSet","open","setRequestHeader","withCredentials","forEach","header","name","value","send","payload","callback","_this","onreadystatechange","readyState","result","responseText","error","JSON","parse","e","InvalidResponse","ontimeout","ConnectionTimeout","stringify","InvalidConnection","disconnect","supportsSubscriptions","module","exports"],"mappings":"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","sourcesContent":["/*\n    Modifications copyright 2018 The caver-js Authors\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n\n    This file is derived from web3.js/packages/web3-providers-http/src/index.js (2019/06/12).\n    Modified and improved for the caver-js development.\n*/\n/** @file httpprovider.js\n * @authors:\n *   Marek Kotewicz <marek@parity.io>\n *   Marian Oancea\n *   Fabian Vogelsteller <fabian@ethereum.org>\n * @date 2015\n */\n\nconst XHR2 = require('xhr2-cookies').XMLHttpRequest\nconst http = require('http')\nconst https = require('https')\n\nconst errors = require('../../../caver-core-helpers').errors\n\n/**\n * HttpProvider should be used to send rpc calls over http\n */\n/**\n * @param       {string} host\n * @param       {object} options\n * @constructor\n */\nconst HttpProvider = function HttpProvider(host, options) {\n    options = options || {}\n    this.host = host || 'http://localhost:8545'\n    this.timeout = options.timeout || 0\n    this.headers = options.headers\n    this.connected = false\n\n    // keepAlive is true unless explicitly set to false\n    const keepAlive = options.keepAlive !== false\n    this.host = host || 'http://localhost:8545'\n    if (!this.agent) {\n        if (this.host.substring(0, 5) === 'https') {\n            this.httpsAgent = new https.Agent({ keepAlive })\n        } else {\n            this.httpAgent = new http.Agent({ keepAlive })\n        }\n    }\n}\n\n/**\n * _prepareRequest create request instance\n */\nHttpProvider.prototype._prepareRequest = function() {\n    let request\n\n    // the current runtime is a browser\n    if (typeof XMLHttpRequest !== 'undefined') {\n        // eslint-disable-next-line no-undef\n        request = new XMLHttpRequest()\n    } else {\n        request = new XHR2()\n        const agents = { httpsAgent: this.httpsAgent, httpAgent: this.httpAgent, baseUrl: this.baseUrl }\n\n        if (this.agent) {\n            agents.httpsAgent = this.agent.https\n            agents.httpAgent = this.agent.http\n            agents.baseUrl = this.agent.baseUrl\n        }\n\n        request.nodejsSet(agents)\n    }\n\n    request.open('POST', this.host, true)\n    request.setRequestHeader('Content-Type', 'application/json')\n    request.timeout = this.timeout\n    request.withCredentials = this.withCredentials\n\n    if (this.headers) {\n        this.headers.forEach(function(header) {\n            request.setRequestHeader(header.name, header.value)\n        })\n    }\n\n    return request\n}\n\n/**\n * Should be used to make async request\n *\n * @method send\n * @param {Object} payload\n * @param {Function} callback triggered on end with (err, result)\n */\nHttpProvider.prototype.send = function(payload, callback) {\n    const _this = this\n    const request = this._prepareRequest()\n\n    request.onreadystatechange = function() {\n        if (request.readyState === 4 && request.timeout !== 1) {\n            let result = request.responseText\n            let error = null\n\n            try {\n                result = JSON.parse(result)\n            } catch (e) {\n                error = errors.InvalidResponse(request.responseText)\n            }\n\n            _this.connected = true\n            callback(error, result)\n        }\n    }\n\n    request.ontimeout = function() {\n        _this.connected = false\n        callback(errors.ConnectionTimeout(this.timeout))\n    }\n\n    try {\n        request.send(JSON.stringify(payload))\n    } catch (error) {\n        this.connected = false\n        callback(errors.InvalidConnection(this.host))\n    }\n}\n\nHttpProvider.prototype.disconnect = function() {\n    // NO OP\n}\n\nHttpProvider.prototype.supportsSubscriptions = function() {\n    return false\n}\n\nmodule.exports = HttpProvider\n"]},"metadata":{},"sourceType":"script"}